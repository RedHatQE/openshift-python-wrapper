{
    "explain": "KIND:       Pod\nVERSION:    v1\n\nDESCRIPTION:\n    Pod is a collection of containers that can run on a host. This resource is\n    created by clients and scheduled onto hosts.\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<PodSpec>\n    Specification of the desired behavior of the pod. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n\n  status\t<PodStatus>\n    Most recently observed status of the pod. This data may not be up to date.\n    Populated by the system. Read-only. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n\n\n",
    "namespace": "1\n",
    "explain-activeDeadlineSeconds": "KIND:       Pod\nVERSION:    v1\n\nFIELD: activeDeadlineSeconds <integer>\n\nDESCRIPTION:\n    Optional duration in seconds the pod may be active on the node relative to\n    StartTime before the system will actively try to mark it failed and kill\n    associated containers. Value must be a positive integer.\n    \n\n",
    "explain-affinity": "KIND:       Pod\nVERSION:    v1\n\nFIELD: affinity <Affinity>\n\nDESCRIPTION:\n    If specified, the pod's scheduling constraints\n    Affinity is a group of affinity scheduling rules.\n    \nFIELDS:\n  nodeAffinity\t<NodeAffinity>\n    Describes node affinity scheduling rules for the pod.\n\n  podAffinity\t<PodAffinity>\n    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same\n    node, zone, etc. as some other pod(s)).\n\n  podAntiAffinity\t<PodAntiAffinity>\n    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in\n    the same node, zone, etc. as some other pod(s)).\n\n\n",
    "explain-automountServiceAccountToken": "KIND:       Pod\nVERSION:    v1\n\nFIELD: automountServiceAccountToken <boolean>\n\nDESCRIPTION:\n    AutomountServiceAccountToken indicates whether a service account token\n    should be automatically mounted.\n    \n\n",
    "explain-containers": "KIND:       Pod\nVERSION:    v1\n\nFIELD: containers <[]Container>\n\nDESCRIPTION:\n    List of containers belonging to the pod. Containers cannot currently be\n    added or removed. There must be at least one container in a Pod. Cannot be\n    updated.\n    A single application container that you want to run within a pod.\n    \nFIELDS:\n  args\t<[]string>\n    Arguments to the entrypoint. The container image's CMD is used if this is\n    not provided. Variable references $(VAR_NAME) are expanded using the\n    container's environment. If a variable cannot be resolved, the reference in\n    the input string will be unchanged. Double $$ are reduced to a single $,\n    which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\n    produce the string literal \"$(VAR_NAME)\". Escaped references will never be\n    expanded, regardless of whether the variable exists or not. Cannot be\n    updated. More info:\n    https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n\n  command\t<[]string>\n    Entrypoint array. Not executed within a shell. The container image's\n    ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME)\n    are expanded using the container's environment. If a variable cannot be\n    resolved, the reference in the input string will be unchanged. Double $$ are\n    reduced to a single $, which allows for escaping the $(VAR_NAME) syntax:\n    i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped\n    references will never be expanded, regardless of whether the variable exists\n    or not. Cannot be updated. More info:\n    https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n\n  env\t<[]EnvVar>\n    List of environment variables to set in the container. Cannot be updated.\n\n  envFrom\t<[]EnvFromSource>\n    List of sources to populate environment variables in the container. The keys\n    defined within a source must be a C_IDENTIFIER. All invalid keys will be\n    reported as an event when the container is starting. When a key exists in\n    multiple sources, the value associated with the last source will take\n    precedence. Values defined by an Env with a duplicate key will take\n    precedence. Cannot be updated.\n\n  image\t<string>\n    Container image name. More info:\n    https://kubernetes.io/docs/concepts/containers/images This field is optional\n    to allow higher level config management to default or override container\n    images in workload controllers like Deployments and StatefulSets.\n\n  imagePullPolicy\t<string>\n    Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if\n    :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More\n    info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n    \n    Possible enum values:\n     - `\"Always\"` means that kubelet always attempts to pull the latest image.\n    Container will fail If the pull fails.\n     - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on\n    disk. Container will fail if the image isn't present and the pull fails.\n     - `\"Never\"` means that kubelet never pulls an image, but only uses a local\n    image. Container will fail if the image isn't present\n\n  lifecycle\t<Lifecycle>\n    Actions that the management system should take in response to container\n    lifecycle events. Cannot be updated.\n\n  livenessProbe\t<Probe>\n    Periodic probe of container liveness. Container will be restarted if the\n    probe fails. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n\n  name\t<string> -required-\n    Name of the container specified as a DNS_LABEL. Each container in a pod must\n    have a unique name (DNS_LABEL). Cannot be updated.\n\n  ports\t<[]ContainerPort>\n    List of ports to expose from the container. Not specifying a port here DOES\n    NOT prevent that port from being exposed. Any port which is listening on the\n    default \"0.0.0.0\" address inside a container will be accessible from the\n    network. Modifying this array with strategic merge patch may corrupt the\n    data. For more information See\n    https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.\n\n  readinessProbe\t<Probe>\n    Periodic probe of container service readiness. Container will be removed\n    from service endpoints if the probe fails. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n\n  resizePolicy\t<[]ContainerResizePolicy>\n    Resources resize policy for the container.\n\n  resources\t<ResourceRequirements>\n    Compute Resources required by this container. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n\n  restartPolicy\t<string>\n    RestartPolicy defines the restart behavior of individual containers in a\n    pod. This field may only be set for init containers, and the only allowed\n    value is \"Always\". For non-init containers or when this field is not\n    specified, the restart behavior is defined by the Pod's restart policy and\n    the container type. Setting the RestartPolicy as \"Always\" for the init\n    container will have the following effect: this init container will be\n    continually restarted on exit until all regular containers have terminated.\n    Once all regular containers have completed, all init containers with\n    restartPolicy \"Always\" will be shut down. This lifecycle differs from normal\n    init containers and is often referred to as a \"sidecar\" container. Although\n    this init container still starts in the init container sequence, it does not\n    wait for the container to complete before proceeding to the next init\n    container. Instead, the next init container starts immediately after this\n    init container is started, or after any startupProbe has successfully\n    completed.\n\n  securityContext\t<SecurityContext>\n    SecurityContext defines the security options the container should be run\n    with. If set, the fields of SecurityContext override the equivalent fields\n    of PodSecurityContext. More info:\n    https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n\n  startupProbe\t<Probe>\n    StartupProbe indicates that the Pod has successfully initialized. If\n    specified, no other probes are executed until this completes successfully.\n    If this probe fails, the Pod will be restarted, just as if the livenessProbe\n    failed. This can be used to provide different probe parameters at the\n    beginning of a Pod's lifecycle, when it might take a long time to load data\n    or warm a cache, than during steady-state operation. This cannot be updated.\n    More info:\n    https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n\n  stdin\t<boolean>\n    Whether this container should allocate a buffer for stdin in the container\n    runtime. If this is not set, reads from stdin in the container will always\n    result in EOF. Default is false.\n\n  stdinOnce\t<boolean>\n    Whether the container runtime should close the stdin channel after it has\n    been opened by a single attach. When stdin is true the stdin stream will\n    remain open across multiple attach sessions. If stdinOnce is set to true,\n    stdin is opened on container start, is empty until the first client attaches\n    to stdin, and then remains open and accepts data until the client\n    disconnects, at which time stdin is closed and remains closed until the\n    container is restarted. If this flag is false, a container processes that\n    reads from stdin will never receive an EOF. Default is false\n\n  terminationMessagePath\t<string>\n    Optional: Path at which the file to which the container's termination\n    message will be written is mounted into the container's filesystem. Message\n    written is intended to be brief final status, such as an assertion failure\n    message. Will be truncated by the node if greater than 4096 bytes. The total\n    message length across all containers will be limited to 12kb. Defaults to\n    /dev/termination-log. Cannot be updated.\n\n  terminationMessagePolicy\t<string>\n    Indicate how the termination message should be populated. File will use the\n    contents of terminationMessagePath to populate the container status message\n    on both success and failure. FallbackToLogsOnError will use the last chunk\n    of container log output if the termination message file is empty and the\n    container exited with an error. The log output is limited to 2048 bytes or\n    80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n    \n    Possible enum values:\n     - `\"FallbackToLogsOnError\"` will read the most recent contents of the\n    container logs for the container status message when the container exits\n    with an error and the terminationMessagePath has no contents.\n     - `\"File\"` is the default behavior and will set the container status\n    message to the contents of the container's terminationMessagePath when the\n    container exits.\n\n  tty\t<boolean>\n    Whether this container should allocate a TTY for itself, also requires\n    'stdin' to be true. Default is false.\n\n  volumeDevices\t<[]VolumeDevice>\n    volumeDevices is the list of block devices to be used by the container.\n\n  volumeMounts\t<[]VolumeMount>\n    Pod volumes to mount into the container's filesystem. Cannot be updated.\n\n  workingDir\t<string>\n    Container's working directory. If not specified, the container runtime's\n    default will be used, which might be configured in the container image.\n    Cannot be updated.\n\n\n",
    "explain-dnsConfig": "KIND:       Pod\nVERSION:    v1\n\nFIELD: dnsConfig <PodDNSConfig>\n\nDESCRIPTION:\n    Specifies the DNS parameters of a pod. Parameters specified here will be\n    merged to the generated DNS configuration based on DNSPolicy.\n    PodDNSConfig defines the DNS parameters of a pod in addition to those\n    generated from DNSPolicy.\n    \nFIELDS:\n  nameservers\t<[]string>\n    A list of DNS name server IP addresses. This will be appended to the base\n    nameservers generated from DNSPolicy. Duplicated nameservers will be\n    removed.\n\n  options\t<[]PodDNSConfigOption>\n    A list of DNS resolver options. This will be merged with the base options\n    generated from DNSPolicy. Duplicated entries will be removed. Resolution\n    options given in Options will override those that appear in the base\n    DNSPolicy.\n\n  searches\t<[]string>\n    A list of DNS search domains for host-name lookup. This will be appended to\n    the base search paths generated from DNSPolicy. Duplicated search paths will\n    be removed.\n\n\n",
    "explain-dnsPolicy": "KIND:       Pod\nVERSION:    v1\n\nFIELD: dnsPolicy <string>\n\nDESCRIPTION:\n    Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are\n    'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS\n    parameters given in DNSConfig will be merged with the policy selected with\n    DNSPolicy. To have DNS options set along with hostNetwork, you have to\n    specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n    \n    Possible enum values:\n     - `\"ClusterFirst\"` indicates that the pod should use cluster DNS first\n    unless hostNetwork is true, if it is available, then fall back on the\n    default (as determined by kubelet) DNS settings.\n     - `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster DNS\n    first, if it is available, then fall back on the default (as determined by\n    kubelet) DNS settings.\n     - `\"Default\"` indicates that the pod should use the default (as determined\n    by kubelet) DNS settings.\n     - `\"None\"` indicates that the pod should use empty DNS settings. DNS\n    parameters such as nameservers and search paths should be defined via\n    DNSConfig.\n    \n\n",
    "explain-enableServiceLinks": "KIND:       Pod\nVERSION:    v1\n\nFIELD: enableServiceLinks <boolean>\n\nDESCRIPTION:\n    EnableServiceLinks indicates whether information about services should be\n    injected into pod's environment variables, matching the syntax of Docker\n    links. Optional: Defaults to true.\n    \n\n",
    "explain-ephemeralContainers": "KIND:       Pod\nVERSION:    v1\n\nFIELD: ephemeralContainers <[]EphemeralContainer>\n\nDESCRIPTION:\n    List of ephemeral containers run in this pod. Ephemeral containers may be\n    run in an existing pod to perform user-initiated actions such as debugging.\n    This list cannot be specified when creating a pod, and it cannot be modified\n    by updating the pod spec. In order to add an ephemeral container to an\n    existing pod, use the pod's ephemeralcontainers subresource.\n    An EphemeralContainer is a temporary container that you may add to an\n    existing Pod for user-initiated activities such as debugging. Ephemeral\n    containers have no resource or scheduling guarantees, and they will not be\n    restarted when they exit or when a Pod is removed or restarted. The kubelet\n    may evict a Pod if an ephemeral container causes the Pod to exceed its\n    resource allocation.\n    \n    To add an ephemeral container, use the ephemeralcontainers subresource of an\n    existing Pod. Ephemeral containers may not be removed or restarted.\n    \nFIELDS:\n  args\t<[]string>\n    Arguments to the entrypoint. The image's CMD is used if this is not\n    provided. Variable references $(VAR_NAME) are expanded using the container's\n    environment. If a variable cannot be resolved, the reference in the input\n    string will be unchanged. Double $$ are reduced to a single $, which allows\n    for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the\n    string literal \"$(VAR_NAME)\". Escaped references will never be expanded,\n    regardless of whether the variable exists or not. Cannot be updated. More\n    info:\n    https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n\n  command\t<[]string>\n    Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is\n    used if this is not provided. Variable references $(VAR_NAME) are expanded\n    using the container's environment. If a variable cannot be resolved, the\n    reference in the input string will be unchanged. Double $$ are reduced to a\n    single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n    \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped\n    references will never be expanded, regardless of whether the variable exists\n    or not. Cannot be updated. More info:\n    https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n\n  env\t<[]EnvVar>\n    List of environment variables to set in the container. Cannot be updated.\n\n  envFrom\t<[]EnvFromSource>\n    List of sources to populate environment variables in the container. The keys\n    defined within a source must be a C_IDENTIFIER. All invalid keys will be\n    reported as an event when the container is starting. When a key exists in\n    multiple sources, the value associated with the last source will take\n    precedence. Values defined by an Env with a duplicate key will take\n    precedence. Cannot be updated.\n\n  image\t<string>\n    Container image name. More info:\n    https://kubernetes.io/docs/concepts/containers/images\n\n  imagePullPolicy\t<string>\n    Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if\n    :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More\n    info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n    \n    Possible enum values:\n     - `\"Always\"` means that kubelet always attempts to pull the latest image.\n    Container will fail If the pull fails.\n     - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on\n    disk. Container will fail if the image isn't present and the pull fails.\n     - `\"Never\"` means that kubelet never pulls an image, but only uses a local\n    image. Container will fail if the image isn't present\n\n  lifecycle\t<Lifecycle>\n    Lifecycle is not allowed for ephemeral containers.\n\n  livenessProbe\t<Probe>\n    Probes are not allowed for ephemeral containers.\n\n  name\t<string> -required-\n    Name of the ephemeral container specified as a DNS_LABEL. This name must be\n    unique among all containers, init containers and ephemeral containers.\n\n  ports\t<[]ContainerPort>\n    Ports are not allowed for ephemeral containers.\n\n  readinessProbe\t<Probe>\n    Probes are not allowed for ephemeral containers.\n\n  resizePolicy\t<[]ContainerResizePolicy>\n    Resources resize policy for the container.\n\n  resources\t<ResourceRequirements>\n    Resources are not allowed for ephemeral containers. Ephemeral containers use\n    spare resources already allocated to the pod.\n\n  restartPolicy\t<string>\n    Restart policy for the container to manage the restart behavior of each\n    container within a pod. This may only be set for init containers. You cannot\n    set this field on ephemeral containers.\n\n  securityContext\t<SecurityContext>\n    Optional: SecurityContext defines the security options the ephemeral\n    container should be run with. If set, the fields of SecurityContext override\n    the equivalent fields of PodSecurityContext.\n\n  startupProbe\t<Probe>\n    Probes are not allowed for ephemeral containers.\n\n  stdin\t<boolean>\n    Whether this container should allocate a buffer for stdin in the container\n    runtime. If this is not set, reads from stdin in the container will always\n    result in EOF. Default is false.\n\n  stdinOnce\t<boolean>\n    Whether the container runtime should close the stdin channel after it has\n    been opened by a single attach. When stdin is true the stdin stream will\n    remain open across multiple attach sessions. If stdinOnce is set to true,\n    stdin is opened on container start, is empty until the first client attaches\n    to stdin, and then remains open and accepts data until the client\n    disconnects, at which time stdin is closed and remains closed until the\n    container is restarted. If this flag is false, a container processes that\n    reads from stdin will never receive an EOF. Default is false\n\n  targetContainerName\t<string>\n    If set, the name of the container from PodSpec that this ephemeral container\n    targets. The ephemeral container will be run in the namespaces (IPC, PID,\n    etc) of this container. If not set then the ephemeral container uses the\n    namespaces configured in the Pod spec.\n    \n    The container runtime must implement support for this feature. If the\n    runtime does not support namespace targeting then the result of setting this\n    field is undefined.\n\n  terminationMessagePath\t<string>\n    Optional: Path at which the file to which the container's termination\n    message will be written is mounted into the container's filesystem. Message\n    written is intended to be brief final status, such as an assertion failure\n    message. Will be truncated by the node if greater than 4096 bytes. The total\n    message length across all containers will be limited to 12kb. Defaults to\n    /dev/termination-log. Cannot be updated.\n\n  terminationMessagePolicy\t<string>\n    Indicate how the termination message should be populated. File will use the\n    contents of terminationMessagePath to populate the container status message\n    on both success and failure. FallbackToLogsOnError will use the last chunk\n    of container log output if the termination message file is empty and the\n    container exited with an error. The log output is limited to 2048 bytes or\n    80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n    \n    Possible enum values:\n     - `\"FallbackToLogsOnError\"` will read the most recent contents of the\n    container logs for the container status message when the container exits\n    with an error and the terminationMessagePath has no contents.\n     - `\"File\"` is the default behavior and will set the container status\n    message to the contents of the container's terminationMessagePath when the\n    container exits.\n\n  tty\t<boolean>\n    Whether this container should allocate a TTY for itself, also requires\n    'stdin' to be true. Default is false.\n\n  volumeDevices\t<[]VolumeDevice>\n    volumeDevices is the list of block devices to be used by the container.\n\n  volumeMounts\t<[]VolumeMount>\n    Pod volumes to mount into the container's filesystem. Subpath mounts are not\n    allowed for ephemeral containers. Cannot be updated.\n\n  workingDir\t<string>\n    Container's working directory. If not specified, the container runtime's\n    default will be used, which might be configured in the container image.\n    Cannot be updated.\n\n\n",
    "explain-hostAliases": "KIND:       Pod\nVERSION:    v1\n\nFIELD: hostAliases <[]HostAlias>\n\nDESCRIPTION:\n    HostAliases is an optional list of hosts and IPs that will be injected into\n    the pod's hosts file if specified.\n    HostAlias holds the mapping between IP and hostnames that will be injected\n    as an entry in the pod's hosts file.\n    \nFIELDS:\n  hostnames\t<[]string>\n    Hostnames for the above IP address.\n\n  ip\t<string> -required-\n    IP address of the host file entry.\n\n\n",
    "explain-hostIPC": "KIND:       Pod\nVERSION:    v1\n\nFIELD: hostIPC <boolean>\n\nDESCRIPTION:\n    Use the host's ipc namespace. Optional: Default to false.\n    \n\n",
    "explain-hostNetwork": "KIND:       Pod\nVERSION:    v1\n\nFIELD: hostNetwork <boolean>\n\nDESCRIPTION:\n    Host networking requested for this pod. Use the host's network namespace. If\n    this option is set, the ports that will be used must be specified. Default\n    to false.\n    \n\n",
    "explain-hostPID": "KIND:       Pod\nVERSION:    v1\n\nFIELD: hostPID <boolean>\n\nDESCRIPTION:\n    Use the host's pid namespace. Optional: Default to false.\n    \n\n",
    "explain-hostUsers": "KIND:       Pod\nVERSION:    v1\n\nFIELD: hostUsers <boolean>\n\nDESCRIPTION:\n    Use the host's user namespace. Optional: Default to true. If set to true or\n    not present, the pod will be run in the host user namespace, useful for when\n    the pod needs a feature only available to the host user namespace, such as\n    loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns\n    is created for the pod. Setting false is useful for mitigating container\n    breakout vulnerabilities even allowing users to run their containers as root\n    without actually having root privileges on the host. This field is\n    alpha-level and is only honored by servers that enable the\n    UserNamespacesSupport feature.\n    \n\n",
    "explain-hostname": "KIND:       Pod\nVERSION:    v1\n\nFIELD: hostname <string>\n\nDESCRIPTION:\n    Specifies the hostname of the Pod If not specified, the pod's hostname will\n    be set to a system-defined value.\n    \n\n",
    "explain-imagePullSecrets": "KIND:       Pod\nVERSION:    v1\n\nFIELD: imagePullSecrets <[]LocalObjectReference>\n\nDESCRIPTION:\n    ImagePullSecrets is an optional list of references to secrets in the same\n    namespace to use for pulling any of the images used by this PodSpec. If\n    specified, these secrets will be passed to individual puller implementations\n    for them to use. More info:\n    https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n    LocalObjectReference contains enough information to let you locate the\n    referenced object inside the same namespace.\n    \nFIELDS:\n  name\t<string>\n    Name of the referent. This field is effectively required, but due to\n    backwards compatibility is allowed to be empty. Instances of this type with\n    an empty value here are almost certainly wrong. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n\n\n",
    "explain-initContainers": "KIND:       Pod\nVERSION:    v1\n\nFIELD: initContainers <[]Container>\n\nDESCRIPTION:\n    List of initialization containers belonging to the pod. Init containers are\n    executed in order prior to containers being started. If any init container\n    fails, the pod is considered to have failed and is handled according to its\n    restartPolicy. The name for an init container or normal container must be\n    unique among all containers. Init containers may not have Lifecycle actions,\n    Readiness probes, Liveness probes, or Startup probes. The\n    resourceRequirements of an init container are taken into account during\n    scheduling by finding the highest request/limit for each resource type, and\n    then using the max of of that value or the sum of the normal containers.\n    Limits are applied to init containers in a similar fashion. Init containers\n    cannot currently be added or removed. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n    A single application container that you want to run within a pod.\n    \nFIELDS:\n  args\t<[]string>\n    Arguments to the entrypoint. The container image's CMD is used if this is\n    not provided. Variable references $(VAR_NAME) are expanded using the\n    container's environment. If a variable cannot be resolved, the reference in\n    the input string will be unchanged. Double $$ are reduced to a single $,\n    which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\n    produce the string literal \"$(VAR_NAME)\". Escaped references will never be\n    expanded, regardless of whether the variable exists or not. Cannot be\n    updated. More info:\n    https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n\n  command\t<[]string>\n    Entrypoint array. Not executed within a shell. The container image's\n    ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME)\n    are expanded using the container's environment. If a variable cannot be\n    resolved, the reference in the input string will be unchanged. Double $$ are\n    reduced to a single $, which allows for escaping the $(VAR_NAME) syntax:\n    i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped\n    references will never be expanded, regardless of whether the variable exists\n    or not. Cannot be updated. More info:\n    https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n\n  env\t<[]EnvVar>\n    List of environment variables to set in the container. Cannot be updated.\n\n  envFrom\t<[]EnvFromSource>\n    List of sources to populate environment variables in the container. The keys\n    defined within a source must be a C_IDENTIFIER. All invalid keys will be\n    reported as an event when the container is starting. When a key exists in\n    multiple sources, the value associated with the last source will take\n    precedence. Values defined by an Env with a duplicate key will take\n    precedence. Cannot be updated.\n\n  image\t<string>\n    Container image name. More info:\n    https://kubernetes.io/docs/concepts/containers/images This field is optional\n    to allow higher level config management to default or override container\n    images in workload controllers like Deployments and StatefulSets.\n\n  imagePullPolicy\t<string>\n    Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if\n    :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More\n    info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n    \n    Possible enum values:\n     - `\"Always\"` means that kubelet always attempts to pull the latest image.\n    Container will fail If the pull fails.\n     - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on\n    disk. Container will fail if the image isn't present and the pull fails.\n     - `\"Never\"` means that kubelet never pulls an image, but only uses a local\n    image. Container will fail if the image isn't present\n\n  lifecycle\t<Lifecycle>\n    Actions that the management system should take in response to container\n    lifecycle events. Cannot be updated.\n\n  livenessProbe\t<Probe>\n    Periodic probe of container liveness. Container will be restarted if the\n    probe fails. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n\n  name\t<string> -required-\n    Name of the container specified as a DNS_LABEL. Each container in a pod must\n    have a unique name (DNS_LABEL). Cannot be updated.\n\n  ports\t<[]ContainerPort>\n    List of ports to expose from the container. Not specifying a port here DOES\n    NOT prevent that port from being exposed. Any port which is listening on the\n    default \"0.0.0.0\" address inside a container will be accessible from the\n    network. Modifying this array with strategic merge patch may corrupt the\n    data. For more information See\n    https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.\n\n  readinessProbe\t<Probe>\n    Periodic probe of container service readiness. Container will be removed\n    from service endpoints if the probe fails. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n\n  resizePolicy\t<[]ContainerResizePolicy>\n    Resources resize policy for the container.\n\n  resources\t<ResourceRequirements>\n    Compute Resources required by this container. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n\n  restartPolicy\t<string>\n    RestartPolicy defines the restart behavior of individual containers in a\n    pod. This field may only be set for init containers, and the only allowed\n    value is \"Always\". For non-init containers or when this field is not\n    specified, the restart behavior is defined by the Pod's restart policy and\n    the container type. Setting the RestartPolicy as \"Always\" for the init\n    container will have the following effect: this init container will be\n    continually restarted on exit until all regular containers have terminated.\n    Once all regular containers have completed, all init containers with\n    restartPolicy \"Always\" will be shut down. This lifecycle differs from normal\n    init containers and is often referred to as a \"sidecar\" container. Although\n    this init container still starts in the init container sequence, it does not\n    wait for the container to complete before proceeding to the next init\n    container. Instead, the next init container starts immediately after this\n    init container is started, or after any startupProbe has successfully\n    completed.\n\n  securityContext\t<SecurityContext>\n    SecurityContext defines the security options the container should be run\n    with. If set, the fields of SecurityContext override the equivalent fields\n    of PodSecurityContext. More info:\n    https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n\n  startupProbe\t<Probe>\n    StartupProbe indicates that the Pod has successfully initialized. If\n    specified, no other probes are executed until this completes successfully.\n    If this probe fails, the Pod will be restarted, just as if the livenessProbe\n    failed. This can be used to provide different probe parameters at the\n    beginning of a Pod's lifecycle, when it might take a long time to load data\n    or warm a cache, than during steady-state operation. This cannot be updated.\n    More info:\n    https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n\n  stdin\t<boolean>\n    Whether this container should allocate a buffer for stdin in the container\n    runtime. If this is not set, reads from stdin in the container will always\n    result in EOF. Default is false.\n\n  stdinOnce\t<boolean>\n    Whether the container runtime should close the stdin channel after it has\n    been opened by a single attach. When stdin is true the stdin stream will\n    remain open across multiple attach sessions. If stdinOnce is set to true,\n    stdin is opened on container start, is empty until the first client attaches\n    to stdin, and then remains open and accepts data until the client\n    disconnects, at which time stdin is closed and remains closed until the\n    container is restarted. If this flag is false, a container processes that\n    reads from stdin will never receive an EOF. Default is false\n\n  terminationMessagePath\t<string>\n    Optional: Path at which the file to which the container's termination\n    message will be written is mounted into the container's filesystem. Message\n    written is intended to be brief final status, such as an assertion failure\n    message. Will be truncated by the node if greater than 4096 bytes. The total\n    message length across all containers will be limited to 12kb. Defaults to\n    /dev/termination-log. Cannot be updated.\n\n  terminationMessagePolicy\t<string>\n    Indicate how the termination message should be populated. File will use the\n    contents of terminationMessagePath to populate the container status message\n    on both success and failure. FallbackToLogsOnError will use the last chunk\n    of container log output if the termination message file is empty and the\n    container exited with an error. The log output is limited to 2048 bytes or\n    80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n    \n    Possible enum values:\n     - `\"FallbackToLogsOnError\"` will read the most recent contents of the\n    container logs for the container status message when the container exits\n    with an error and the terminationMessagePath has no contents.\n     - `\"File\"` is the default behavior and will set the container status\n    message to the contents of the container's terminationMessagePath when the\n    container exits.\n\n  tty\t<boolean>\n    Whether this container should allocate a TTY for itself, also requires\n    'stdin' to be true. Default is false.\n\n  volumeDevices\t<[]VolumeDevice>\n    volumeDevices is the list of block devices to be used by the container.\n\n  volumeMounts\t<[]VolumeMount>\n    Pod volumes to mount into the container's filesystem. Cannot be updated.\n\n  workingDir\t<string>\n    Container's working directory. If not specified, the container runtime's\n    default will be used, which might be configured in the container image.\n    Cannot be updated.\n\n\n",
    "explain-nodeName": "KIND:       Pod\nVERSION:    v1\n\nFIELD: nodeName <string>\n\nDESCRIPTION:\n    NodeName is a request to schedule this pod onto a specific node. If it is\n    non-empty, the scheduler simply schedules this pod onto that node, assuming\n    that it fits resource requirements.\n    \n\n",
    "explain-nodeSelector": "KIND:       Pod\nVERSION:    v1\n\nFIELD: nodeSelector <map[string]string>\n\nDESCRIPTION:\n    NodeSelector is a selector which must be true for the pod to fit on a node.\n    Selector which must match a node's labels for the pod to be scheduled on\n    that node. More info:\n    https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n    \n\n",
    "explain-os": "KIND:       Pod\nVERSION:    v1\n\nFIELD: os <PodOS>\n\nDESCRIPTION:\n    Specifies the OS of the containers in the pod. Some pod and container fields\n    are restricted if this is set.\n    \n    If the OS field is set to linux, the following fields must be unset:\n    -securityContext.windowsOptions\n    \n    If the OS field is set to windows, following fields must be unset: -\n    spec.hostPID - spec.hostIPC - spec.hostUsers -\n    spec.securityContext.appArmorProfile - spec.securityContext.seLinuxOptions -\n    spec.securityContext.seccompProfile - spec.securityContext.fsGroup -\n    spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls -\n    spec.shareProcessNamespace - spec.securityContext.runAsUser -\n    spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups -\n    spec.containers[*].securityContext.appArmorProfile -\n    spec.containers[*].securityContext.seLinuxOptions -\n    spec.containers[*].securityContext.seccompProfile -\n    spec.containers[*].securityContext.capabilities -\n    spec.containers[*].securityContext.readOnlyRootFilesystem -\n    spec.containers[*].securityContext.privileged -\n    spec.containers[*].securityContext.allowPrivilegeEscalation -\n    spec.containers[*].securityContext.procMount -\n    spec.containers[*].securityContext.runAsUser -\n    spec.containers[*].securityContext.runAsGroup\n    PodOS defines the OS parameters of a pod.\n    \nFIELDS:\n  name\t<string> -required-\n    Name is the name of the operating system. The currently supported values are\n    linux and windows. Additional value may be defined in future and can be one\n    of:\n    https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration\n    Clients should expect to handle additional values and treat unrecognized\n    values in this field as os: null\n\n\n",
    "explain-overhead": "KIND:       Pod\nVERSION:    v1\n\nFIELD: overhead <map[string]Quantity>\n\nDESCRIPTION:\n    Overhead represents the resource overhead associated with running a pod for\n    a given RuntimeClass. This field will be autopopulated at admission time by\n    the RuntimeClass admission controller. If the RuntimeClass admission\n    controller is enabled, overhead must not be set in Pod create requests. The\n    RuntimeClass admission controller will reject Pod create requests which have\n    the overhead already set. If RuntimeClass is configured and selected in the\n    PodSpec, Overhead will be set to the value defined in the corresponding\n    RuntimeClass, otherwise it will remain unset and treated as zero. More info:\n    https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md\n    Quantity is a fixed-point representation of a number. It provides convenient\n    marshaling/unmarshaling in JSON and YAML, in addition to String() and\n    AsInt64() accessors.\n    \n    The serialization format is:\n    \n    ``` <quantity>        ::= <signedNumber><suffix>\n    \n    \t(Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n    \n    <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> |\n    <digit><digits> <number>          ::= <digits> | <digits>.<digits> |\n    <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::=\n    <number> | <sign><number> <suffix>          ::= <binarySI> |\n    <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi\n    | Ei\n    \n    \t(International System of units; See:\n    http://physics.nist.gov/cuu/Units/binary.html)\n    \n    <decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n    \n    \t(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n    \n    <decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber> ```\n    \n    No matter which of the three exponent forms is used, no quantity may\n    represent a number greater than 2^63-1 in magnitude, nor may it have more\n    than 3 decimal places. Numbers larger or more precise will be capped or\n    rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the\n    future if we require larger or smaller quantities.\n    \n    When a Quantity is parsed from a string, it will remember the type of suffix\n    it had, and will use the same type again when it is serialized.\n    \n    Before serializing, Quantity will be put in \"canonical form\". This means\n    that Exponent/suffix will be adjusted up or down (with a corresponding\n    increase or decrease in Mantissa) such that:\n    \n    - No precision is lost - No fractional digits will be emitted - The exponent\n    (or suffix) is as large as possible.\n    \n    The sign will be omitted unless the number is negative.\n    \n    Examples:\n    \n    - 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"\n    \n    Note that the quantity will NEVER be internally represented by a floating\n    point number. That is the whole point of this exercise.\n    \n    Non-canonical values will still parse as long as they are well formed, but\n    will be re-emitted in their canonical form. (So always use canonical form,\n    or don't diff.)\n    \n    This format is intended to make it difficult to use these numbers without\n    writing some sort of special handling code in the hopes that that will cause\n    implementors to also use a fixed point implementation.\n    \n\n",
    "explain-preemptionPolicy": "KIND:       Pod\nVERSION:    v1\n\nFIELD: preemptionPolicy <string>\n\nDESCRIPTION:\n    PreemptionPolicy is the Policy for preempting pods with lower priority. One\n    of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.\n    \n    Possible enum values:\n     - `\"Never\"` means that pod never preempts other pods with lower priority.\n     - `\"PreemptLowerPriority\"` means that pod can preempt other pods with lower\n    priority.\n    \n\n",
    "explain-priority": "KIND:       Pod\nVERSION:    v1\n\nFIELD: priority <integer>\n\nDESCRIPTION:\n    The priority value. Various system components use this field to find the\n    priority of the pod. When Priority Admission Controller is enabled, it\n    prevents users from setting this field. The admission controller populates\n    this field from PriorityClassName. The higher the value, the higher the\n    priority.\n    \n\n",
    "explain-priorityClassName": "KIND:       Pod\nVERSION:    v1\n\nFIELD: priorityClassName <string>\n\nDESCRIPTION:\n    If specified, indicates the pod's priority. \"system-node-critical\" and\n    \"system-cluster-critical\" are two special keywords which indicate the\n    highest priorities with the former being the highest priority. Any other\n    name must be defined by creating a PriorityClass object with that name. If\n    not specified, the pod priority will be default or zero if there is no\n    default.\n    \n\n",
    "explain-readinessGates": "KIND:       Pod\nVERSION:    v1\n\nFIELD: readinessGates <[]PodReadinessGate>\n\nDESCRIPTION:\n    If specified, all readiness gates will be evaluated for pod readiness. A pod\n    is ready when all its containers are ready AND all conditions specified in\n    the readiness gates have status equal to \"True\" More info:\n    https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates\n    PodReadinessGate contains the reference to a pod condition\n    \nFIELDS:\n  conditionType\t<string> -required-\n    ConditionType refers to a condition in the pod's condition list with\n    matching type.\n\n\n",
    "explain-resourceClaims": "KIND:       Pod\nVERSION:    v1\n\nFIELD: resourceClaims <[]PodResourceClaim>\n\nDESCRIPTION:\n    ResourceClaims defines which ResourceClaims must be allocated and reserved\n    before the Pod is allowed to start. The resources will be made available to\n    those containers which consume them by name.\n    \n    This is an alpha field and requires enabling the DynamicResourceAllocation\n    feature gate.\n    \n    This field is immutable.\n    PodResourceClaim references exactly one ResourceClaim through a ClaimSource.\n    It adds a name to it that uniquely identifies the ResourceClaim inside the\n    Pod. Containers that need access to the ResourceClaim reference it with this\n    name.\n    \nFIELDS:\n  name\t<string> -required-\n    Name uniquely identifies this resource claim inside the pod. This must be a\n    DNS_LABEL.\n\n  source\t<ClaimSource>\n    Source describes where to find the ResourceClaim.\n\n\n",
    "explain-restartPolicy": "KIND:       Pod\nVERSION:    v1\n\nFIELD: restartPolicy <string>\n\nDESCRIPTION:\n    Restart policy for all containers within the pod. One of Always, OnFailure,\n    Never. In some contexts, only a subset of those values may be permitted.\n    Default to Always. More info:\n    https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n    \n    Possible enum values:\n     - `\"Always\"`\n     - `\"Never\"`\n     - `\"OnFailure\"`\n    \n\n",
    "explain-runtimeClassName": "KIND:       Pod\nVERSION:    v1\n\nFIELD: runtimeClassName <string>\n\nDESCRIPTION:\n    RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group,\n    which should be used to run this pod.  If no RuntimeClass resource matches\n    the named class, the pod will not be run. If unset or empty, the \"legacy\"\n    RuntimeClass will be used, which is an implicit class with an empty\n    definition that uses the default runtime handler. More info:\n    https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class\n    \n\n",
    "explain-schedulerName": "KIND:       Pod\nVERSION:    v1\n\nFIELD: schedulerName <string>\n\nDESCRIPTION:\n    If specified, the pod will be dispatched by specified scheduler. If not\n    specified, the pod will be dispatched by default scheduler.\n    \n\n",
    "explain-schedulingGates": "KIND:       Pod\nVERSION:    v1\n\nFIELD: schedulingGates <[]PodSchedulingGate>\n\nDESCRIPTION:\n    SchedulingGates is an opaque list of values that if specified will block\n    scheduling the pod. If schedulingGates is not empty, the pod will stay in\n    the SchedulingGated state and the scheduler will not attempt to schedule the\n    pod.\n    \n    SchedulingGates can only be set at pod creation time, and be removed only\n    afterwards.\n    PodSchedulingGate is associated to a Pod to guard its scheduling.\n    \nFIELDS:\n  name\t<string> -required-\n    Name of the scheduling gate. Each scheduling gate must have a unique name\n    field.\n\n\n",
    "explain-securityContext": "KIND:       Pod\nVERSION:    v1\n\nFIELD: securityContext <PodSecurityContext>\n\nDESCRIPTION:\n    SecurityContext holds pod-level security attributes and common container\n    settings. Optional: Defaults to empty.  See type description for default\n    values of each field.\n    PodSecurityContext holds pod-level security attributes and common container\n    settings. Some fields are also present in container.securityContext.  Field\n    values of container.securityContext take precedence over field values of\n    PodSecurityContext.\n    \nFIELDS:\n  appArmorProfile\t<AppArmorProfile>\n    appArmorProfile is the AppArmor options to use by the containers in this\n    pod. Note that this field cannot be set when spec.os.name is windows.\n\n  fsGroup\t<integer>\n    A special supplemental group that applies to all containers in a pod. Some\n    volume types allow the Kubelet to change the ownership of that volume to be\n    owned by the pod:\n    \n    1. The owning GID will be the FSGroup 2. The setgid bit is set (new files\n    created in the volume will be owned by FSGroup) 3. The permission bits are\n    OR'd with rw-rw----\n    \n    If unset, the Kubelet will not modify the ownership and permissions of any\n    volume. Note that this field cannot be set when spec.os.name is windows.\n\n  fsGroupChangePolicy\t<string>\n    fsGroupChangePolicy defines behavior of changing ownership and permission of\n    the volume before being exposed inside Pod. This field will only apply to\n    volume types which support fsGroup based ownership(and permissions). It will\n    have no effect on ephemeral volume types such as: secret, configmaps and\n    emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified,\n    \"Always\" is used. Note that this field cannot be set when spec.os.name is\n    windows.\n    \n    Possible enum values:\n     - `\"Always\"` indicates that volume's ownership and permissions should\n    always be changed whenever volume is mounted inside a Pod. This the default\n    behavior.\n     - `\"OnRootMismatch\"` indicates that volume's ownership and permissions will\n    be changed only when permission and ownership of root directory does not\n    match with expected permissions on the volume. This can help shorten the\n    time it takes to change ownership and permissions of a volume.\n\n  runAsGroup\t<integer>\n    The GID to run the entrypoint of the container process. Uses runtime default\n    if unset. May also be set in SecurityContext.  If set in both\n    SecurityContext and PodSecurityContext, the value specified in\n    SecurityContext takes precedence for that container. Note that this field\n    cannot be set when spec.os.name is windows.\n\n  runAsNonRoot\t<boolean>\n    Indicates that the container must run as a non-root user. If true, the\n    Kubelet will validate the image at runtime to ensure that it does not run as\n    UID 0 (root) and fail to start the container if it does. If unset or false,\n    no such validation will be performed. May also be set in SecurityContext.\n    If set in both SecurityContext and PodSecurityContext, the value specified\n    in SecurityContext takes precedence.\n\n  runAsUser\t<integer>\n    The UID to run the entrypoint of the container process. Defaults to user\n    specified in image metadata if unspecified. May also be set in\n    SecurityContext.  If set in both SecurityContext and PodSecurityContext, the\n    value specified in SecurityContext takes precedence for that container. Note\n    that this field cannot be set when spec.os.name is windows.\n\n  seLinuxOptions\t<SELinuxOptions>\n    The SELinux context to be applied to all containers. If unspecified, the\n    container runtime will allocate a random SELinux context for each container.\n    May also be set in SecurityContext.  If set in both SecurityContext and\n    PodSecurityContext, the value specified in SecurityContext takes precedence\n    for that container. Note that this field cannot be set when spec.os.name is\n    windows.\n\n  seccompProfile\t<SeccompProfile>\n    The seccomp options to use by the containers in this pod. Note that this\n    field cannot be set when spec.os.name is windows.\n\n  supplementalGroups\t<[]integer>\n    A list of groups applied to the first process run in each container, in\n    addition to the container's primary GID, the fsGroup (if specified), and\n    group memberships defined in the container image for the uid of the\n    container process. If unspecified, no additional groups are added to any\n    container. Note that group memberships defined in the container image for\n    the uid of the container process are still effective, even if they are not\n    included in this list. Note that this field cannot be set when spec.os.name\n    is windows.\n\n  sysctls\t<[]Sysctl>\n    Sysctls hold a list of namespaced sysctls used for the pod. Pods with\n    unsupported sysctls (by the container runtime) might fail to launch. Note\n    that this field cannot be set when spec.os.name is windows.\n\n  windowsOptions\t<WindowsSecurityContextOptions>\n    The Windows specific settings applied to all containers. If unspecified, the\n    options within a container's SecurityContext will be used. If set in both\n    SecurityContext and PodSecurityContext, the value specified in\n    SecurityContext takes precedence. Note that this field cannot be set when\n    spec.os.name is linux.\n\n\n",
    "explain-serviceAccount": "KIND:       Pod\nVERSION:    v1\n\nFIELD: serviceAccount <string>\n\nDESCRIPTION:\n    DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.\n    Deprecated: Use serviceAccountName instead.\n    \n\n",
    "explain-serviceAccountName": "KIND:       Pod\nVERSION:    v1\n\nFIELD: serviceAccountName <string>\n\nDESCRIPTION:\n    ServiceAccountName is the name of the ServiceAccount to use to run this pod.\n    More info:\n    https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n    \n\n",
    "explain-setHostnameAsFQDN": "KIND:       Pod\nVERSION:    v1\n\nFIELD: setHostnameAsFQDN <boolean>\n\nDESCRIPTION:\n    If true the pod's hostname will be configured as the pod's FQDN, rather than\n    the leaf name (the default). In Linux containers, this means setting the\n    FQDN in the hostname field of the kernel (the nodename field of struct\n    utsname). In Windows containers, this means setting the registry value of\n    hostname for the registry key\n    HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to\n    FQDN. If a pod does not have FQDN, this has no effect. Default to false.\n    \n\n",
    "explain-shareProcessNamespace": "KIND:       Pod\nVERSION:    v1\n\nFIELD: shareProcessNamespace <boolean>\n\nDESCRIPTION:\n    Share a single process namespace between all of the containers in a pod.\n    When this is set containers will be able to view and signal processes from\n    other containers in the same pod, and the first process in each container\n    will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be\n    set. Optional: Default to false.\n    \n\n",
    "explain-subdomain": "KIND:       Pod\nVERSION:    v1\n\nFIELD: subdomain <string>\n\nDESCRIPTION:\n    If specified, the fully qualified Pod hostname will be\n    \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not\n    specified, the pod will not have a domainname at all.\n    \n\n",
    "explain-terminationGracePeriodSeconds": "KIND:       Pod\nVERSION:    v1\n\nFIELD: terminationGracePeriodSeconds <integer>\n\nDESCRIPTION:\n    Optional duration in seconds the pod needs to terminate gracefully. May be\n    decreased in delete request. Value must be non-negative integer. The value\n    zero indicates stop immediately via the kill signal (no opportunity to shut\n    down). If this value is nil, the default grace period will be used instead.\n    The grace period is the duration in seconds after the processes running in\n    the pod are sent a termination signal and the time when the processes are\n    forcibly halted with a kill signal. Set this value longer than the expected\n    cleanup time for your process. Defaults to 30 seconds.\n    \n\n",
    "explain-tolerations": "KIND:       Pod\nVERSION:    v1\n\nFIELD: tolerations <[]Toleration>\n\nDESCRIPTION:\n    If specified, the pod's tolerations.\n    The pod this Toleration is attached to tolerates any taint that matches the\n    triple <key,value,effect> using the matching operator <operator>.\n    \nFIELDS:\n  effect\t<string>\n    Effect indicates the taint effect to match. Empty means match all taint\n    effects. When specified, allowed values are NoSchedule, PreferNoSchedule and\n    NoExecute.\n    \n    Possible enum values:\n     - `\"NoExecute\"` Evict any already-running pods that do not tolerate the\n    taint. Currently enforced by NodeController.\n     - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless\n    they tolerate the taint, but allow all pods submitted to Kubelet without\n    going through the scheduler to start, and allow all already-running pods to\n    continue running. Enforced by the scheduler.\n     - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries\n    not to schedule new pods onto the node, rather than prohibiting new pods\n    from scheduling onto the node entirely. Enforced by the scheduler.\n\n  key\t<string>\n    Key is the taint key that the toleration applies to. Empty means match all\n    taint keys. If the key is empty, operator must be Exists; this combination\n    means to match all values and all keys.\n\n  operator\t<string>\n    Operator represents a key's relationship to the value. Valid operators are\n    Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for\n    value, so that a pod can tolerate all taints of a particular category.\n    \n    Possible enum values:\n     - `\"Equal\"`\n     - `\"Exists\"`\n\n  tolerationSeconds\t<integer>\n    TolerationSeconds represents the period of time the toleration (which must\n    be of effect NoExecute, otherwise this field is ignored) tolerates the\n    taint. By default, it is not set, which means tolerate the taint forever (do\n    not evict). Zero and negative values will be treated as 0 (evict\n    immediately) by the system.\n\n  value\t<string>\n    Value is the taint value the toleration matches to. If the operator is\n    Exists, the value should be empty, otherwise just a regular string.\n\n\n",
    "explain-topologySpreadConstraints": "KIND:       Pod\nVERSION:    v1\n\nFIELD: topologySpreadConstraints <[]TopologySpreadConstraint>\n\nDESCRIPTION:\n    TopologySpreadConstraints describes how a group of pods ought to spread\n    across topology domains. Scheduler will schedule pods in a way which abides\n    by the constraints. All topologySpreadConstraints are ANDed.\n    TopologySpreadConstraint specifies how to spread matching pods among the\n    given topology.\n    \nFIELDS:\n  labelSelector\t<LabelSelector>\n    LabelSelector is used to find matching pods. Pods that match this label\n    selector are counted to determine the number of pods in their corresponding\n    topology domain.\n\n  matchLabelKeys\t<[]string>\n    MatchLabelKeys is a set of pod label keys to select the pods over which\n    spreading will be calculated. The keys are used to lookup values from the\n    incoming pod labels, those key-value labels are ANDed with labelSelector to\n    select the group of existing pods over which spreading will be calculated\n    for the incoming pod. The same key is forbidden to exist in both\n    MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when\n    LabelSelector isn't set. Keys that don't exist in the incoming pod labels\n    will be ignored. A null or empty list means only match against\n    labelSelector.\n    \n    This is a beta field and requires the MatchLabelKeysInPodTopologySpread\n    feature gate to be enabled (enabled by default).\n\n  maxSkew\t<integer> -required-\n    MaxSkew describes the degree to which pods may be unevenly distributed. When\n    `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\n    between the number of matching pods in the target topology and the global\n    minimum. The global minimum is the minimum number of matching pods in an\n    eligible domain or zero if the number of eligible domains is less than\n    MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods\n    with the same labelSelector spread as 2/2/1: In this case, the global\n    minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if\n    MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\n    scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on\n    zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be\n    scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used\n    to give higher precedence to topologies that satisfy it. It's a required\n    field. Default value is 1 and 0 is not allowed.\n\n  minDomains\t<integer>\n    MinDomains indicates a minimum number of eligible domains. When the number\n    of eligible domains with matching topology keys is less than minDomains, Pod\n    Topology Spread treats \"global minimum\" as 0, and then the calculation of\n    Skew is performed. And when the number of eligible domains with matching\n    topology keys equals or greater than minDomains, this value has no effect on\n    scheduling. As a result, when the number of eligible domains is less than\n    minDomains, scheduler won't schedule more than maxSkew Pods to those\n    domains. If value is nil, the constraint behaves as if MinDomains is equal\n    to 1. Valid values are integers greater than 0. When value is not nil,\n    WhenUnsatisfiable must be DoNotSchedule.\n    \n    For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to\n    5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 |\n    zone3 | |  P P  |  P P  |  P P  | The number of domains is less than\n    5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new\n    pod with the same labelSelector cannot be scheduled, because computed skew\n    will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will\n    violate MaxSkew.\n\n  nodeAffinityPolicy\t<string>\n    NodeAffinityPolicy indicates how we will treat Pod's\n    nodeAffinity/nodeSelector when calculating pod topology spread skew. Options\n    are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in\n    the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes\n    are included in the calculations.\n    \n    If this value is nil, the behavior is equivalent to the Honor policy. This\n    is a beta-level feature default enabled by the\n    NodeInclusionPolicyInPodTopologySpread feature flag.\n    \n    Possible enum values:\n     - `\"Honor\"` means use this scheduling directive when calculating pod\n    topology spread skew.\n     - `\"Ignore\"` means ignore this scheduling directive when calculating pod\n    topology spread skew.\n\n  nodeTaintsPolicy\t<string>\n    NodeTaintsPolicy indicates how we will treat node taints when calculating\n    pod topology spread skew. Options are: - Honor: nodes without taints, along\n    with tainted nodes for which the incoming pod has a toleration, are\n    included. - Ignore: node taints are ignored. All nodes are included.\n    \n    If this value is nil, the behavior is equivalent to the Ignore policy. This\n    is a beta-level feature default enabled by the\n    NodeInclusionPolicyInPodTopologySpread feature flag.\n    \n    Possible enum values:\n     - `\"Honor\"` means use this scheduling directive when calculating pod\n    topology spread skew.\n     - `\"Ignore\"` means ignore this scheduling directive when calculating pod\n    topology spread skew.\n\n  topologyKey\t<string> -required-\n    TopologyKey is the key of node labels. Nodes that have a label with this key\n    and identical values are considered to be in the same topology. We consider\n    each <key, value> as a \"bucket\", and try to put balanced number of pods into\n    each bucket. We define a domain as a particular instance of a topology.\n    Also, we define an eligible domain as a domain whose nodes meet the\n    requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey\n    is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if\n    TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that\n    topology. It's a required field.\n\n  whenUnsatisfiable\t<string> -required-\n    WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the\n    spread constraint. - DoNotSchedule (default) tells the scheduler not to\n    schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any\n    location,\n      but giving higher precedence to topologies that would help reduce the\n      skew.\n    A constraint is considered \"Unsatisfiable\" for an incoming pod if and only\n    if every possible node assignment for that pod would violate \"MaxSkew\" on\n    some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and\n    pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 |\n    | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule,\n    incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as\n    ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the\n    cluster can still be imbalanced, but scheduler won't make it *more*\n    imbalanced. It's a required field.\n    \n    Possible enum values:\n     - `\"DoNotSchedule\"` instructs the scheduler not to schedule the pod when\n    constraints are not satisfied.\n     - `\"ScheduleAnyway\"` instructs the scheduler to schedule the pod even if\n    constraints are not satisfied.\n\n\n",
    "explain-volumes": "KIND:       Pod\nVERSION:    v1\n\nFIELD: volumes <[]Volume>\n\nDESCRIPTION:\n    List of volumes that can be mounted by containers belonging to the pod. More\n    info: https://kubernetes.io/docs/concepts/storage/volumes\n    Volume represents a named volume in a pod that may be accessed by any\n    container in the pod.\n    \nFIELDS:\n  awsElasticBlockStore\t<AWSElasticBlockStoreVolumeSource>\n    awsElasticBlockStore represents an AWS Disk resource that is attached to a\n    kubelet's host machine and then exposed to the pod. More info:\n    https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n\n  azureDisk\t<AzureDiskVolumeSource>\n    azureDisk represents an Azure Data Disk mount on the host and bind mount to\n    the pod.\n\n  azureFile\t<AzureFileVolumeSource>\n    azureFile represents an Azure File Service mount on the host and bind mount\n    to the pod.\n\n  cephfs\t<CephFSVolumeSource>\n    cephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n\n  cinder\t<CinderVolumeSource>\n    cinder represents a cinder volume attached and mounted on kubelets host\n    machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md\n\n  configMap\t<ConfigMapVolumeSource>\n    configMap represents a configMap that should populate this volume\n\n  csi\t<CSIVolumeSource>\n    csi (Container Storage Interface) represents ephemeral storage that is\n    handled by certain external CSI drivers (Beta feature).\n\n  downwardAPI\t<DownwardAPIVolumeSource>\n    downwardAPI represents downward API about the pod that should populate this\n    volume\n\n  emptyDir\t<EmptyDirVolumeSource>\n    emptyDir represents a temporary directory that shares a pod's lifetime. More\n    info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n\n  ephemeral\t<EphemeralVolumeSource>\n    ephemeral represents a volume that is handled by a cluster storage driver.\n    The volume's lifecycle is tied to the pod that defines it - it will be\n    created before the pod starts, and deleted when the pod is removed.\n    \n    Use this if: a) the volume is only needed while the pod runs, b) features of\n    normal volumes like restoring from snapshot or capacity\n       tracking are needed,\n    c) the storage driver is specified through a storage class, and d) the\n    storage driver supports dynamic volume provisioning through\n       a PersistentVolumeClaim (see EphemeralVolumeSource for more\n       information on the connection between this volume type\n       and PersistentVolumeClaim).\n    \n    Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes\n    that persist for longer than the lifecycle of an individual pod.\n    \n    Use CSI for light-weight local ephemeral volumes if the CSI driver is meant\n    to be used that way - see the documentation of the driver for more\n    information.\n    \n    A pod can use both types of ephemeral volumes and persistent volumes at the\n    same time.\n\n  fc\t<FCVolumeSource>\n    fc represents a Fibre Channel resource that is attached to a kubelet's host\n    machine and then exposed to the pod.\n\n  flexVolume\t<FlexVolumeSource>\n    flexVolume represents a generic volume resource that is provisioned/attached\n    using an exec based plugin.\n\n  flocker\t<FlockerVolumeSource>\n    flocker represents a Flocker volume attached to a kubelet's host machine.\n    This depends on the Flocker control service being running\n\n  gcePersistentDisk\t<GCEPersistentDiskVolumeSource>\n    gcePersistentDisk represents a GCE Disk resource that is attached to a\n    kubelet's host machine and then exposed to the pod. More info:\n    https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n\n  gitRepo\t<GitRepoVolumeSource>\n    gitRepo represents a git repository at a particular revision. DEPRECATED:\n    GitRepo is deprecated. To provision a container with a git repo, mount an\n    EmptyDir into an InitContainer that clones the repo using git, then mount\n    the EmptyDir into the Pod's container.\n\n  glusterfs\t<GlusterfsVolumeSource>\n    glusterfs represents a Glusterfs mount on the host that shares a pod's\n    lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md\n\n  hostPath\t<HostPathVolumeSource>\n    hostPath represents a pre-existing file or directory on the host machine\n    that is directly exposed to the container. This is generally used for system\n    agents or other privileged things that are allowed to see the host machine.\n    Most containers will NOT need this. More info:\n    https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n\n  iscsi\t<ISCSIVolumeSource>\n    iscsi represents an ISCSI Disk resource that is attached to a kubelet's host\n    machine and then exposed to the pod. More info:\n    https://examples.k8s.io/volumes/iscsi/README.md\n\n  name\t<string> -required-\n    name of the volume. Must be a DNS_LABEL and unique within the pod. More\n    info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n\n  nfs\t<NFSVolumeSource>\n    nfs represents an NFS mount on the host that shares a pod's lifetime More\n    info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n\n  persistentVolumeClaim\t<PersistentVolumeClaimVolumeSource>\n    persistentVolumeClaimVolumeSource represents a reference to a\n    PersistentVolumeClaim in the same namespace. More info:\n    https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n\n  photonPersistentDisk\t<PhotonPersistentDiskVolumeSource>\n    photonPersistentDisk represents a PhotonController persistent disk attached\n    and mounted on kubelets host machine\n\n  portworxVolume\t<PortworxVolumeSource>\n    portworxVolume represents a portworx volume attached and mounted on kubelets\n    host machine\n\n  projected\t<ProjectedVolumeSource>\n    projected items for all in one resources secrets, configmaps, and downward\n    API\n\n  quobyte\t<QuobyteVolumeSource>\n    quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n\n  rbd\t<RBDVolumeSource>\n    rbd represents a Rados Block Device mount on the host that shares a pod's\n    lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md\n\n  scaleIO\t<ScaleIOVolumeSource>\n    scaleIO represents a ScaleIO persistent volume attached and mounted on\n    Kubernetes nodes.\n\n  secret\t<SecretVolumeSource>\n    secret represents a secret that should populate this volume. More info:\n    https://kubernetes.io/docs/concepts/storage/volumes#secret\n\n  storageos\t<StorageOSVolumeSource>\n    storageOS represents a StorageOS volume attached and mounted on Kubernetes\n    nodes.\n\n  vsphereVolume\t<VsphereVirtualDiskVolumeSource>\n    vsphereVolume represents a vSphere volume attached and mounted on kubelets\n    host machine\n\n\n",
    "explain-spec": "KIND:       Pod\nVERSION:    v1\n\nFIELD: spec <PodSpec>\n\nDESCRIPTION:\n    Specification of the desired behavior of the pod. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n    PodSpec is a description of a pod.\n    \nFIELDS:\n  activeDeadlineSeconds\t<integer>\n    Optional duration in seconds the pod may be active on the node relative to\n    StartTime before the system will actively try to mark it failed and kill\n    associated containers. Value must be a positive integer.\n\n  affinity\t<Affinity>\n    If specified, the pod's scheduling constraints\n\n  automountServiceAccountToken\t<boolean>\n    AutomountServiceAccountToken indicates whether a service account token\n    should be automatically mounted.\n\n  containers\t<[]Container> -required-\n    List of containers belonging to the pod. Containers cannot currently be\n    added or removed. There must be at least one container in a Pod. Cannot be\n    updated.\n\n  dnsConfig\t<PodDNSConfig>\n    Specifies the DNS parameters of a pod. Parameters specified here will be\n    merged to the generated DNS configuration based on DNSPolicy.\n\n  dnsPolicy\t<string>\n    Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are\n    'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS\n    parameters given in DNSConfig will be merged with the policy selected with\n    DNSPolicy. To have DNS options set along with hostNetwork, you have to\n    specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n    \n    Possible enum values:\n     - `\"ClusterFirst\"` indicates that the pod should use cluster DNS first\n    unless hostNetwork is true, if it is available, then fall back on the\n    default (as determined by kubelet) DNS settings.\n     - `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster DNS\n    first, if it is available, then fall back on the default (as determined by\n    kubelet) DNS settings.\n     - `\"Default\"` indicates that the pod should use the default (as determined\n    by kubelet) DNS settings.\n     - `\"None\"` indicates that the pod should use empty DNS settings. DNS\n    parameters such as nameservers and search paths should be defined via\n    DNSConfig.\n\n  enableServiceLinks\t<boolean>\n    EnableServiceLinks indicates whether information about services should be\n    injected into pod's environment variables, matching the syntax of Docker\n    links. Optional: Defaults to true.\n\n  ephemeralContainers\t<[]EphemeralContainer>\n    List of ephemeral containers run in this pod. Ephemeral containers may be\n    run in an existing pod to perform user-initiated actions such as debugging.\n    This list cannot be specified when creating a pod, and it cannot be modified\n    by updating the pod spec. In order to add an ephemeral container to an\n    existing pod, use the pod's ephemeralcontainers subresource.\n\n  hostAliases\t<[]HostAlias>\n    HostAliases is an optional list of hosts and IPs that will be injected into\n    the pod's hosts file if specified.\n\n  hostIPC\t<boolean>\n    Use the host's ipc namespace. Optional: Default to false.\n\n  hostNetwork\t<boolean>\n    Host networking requested for this pod. Use the host's network namespace. If\n    this option is set, the ports that will be used must be specified. Default\n    to false.\n\n  hostPID\t<boolean>\n    Use the host's pid namespace. Optional: Default to false.\n\n  hostUsers\t<boolean>\n    Use the host's user namespace. Optional: Default to true. If set to true or\n    not present, the pod will be run in the host user namespace, useful for when\n    the pod needs a feature only available to the host user namespace, such as\n    loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns\n    is created for the pod. Setting false is useful for mitigating container\n    breakout vulnerabilities even allowing users to run their containers as root\n    without actually having root privileges on the host. This field is\n    alpha-level and is only honored by servers that enable the\n    UserNamespacesSupport feature.\n\n  hostname\t<string>\n    Specifies the hostname of the Pod If not specified, the pod's hostname will\n    be set to a system-defined value.\n\n  imagePullSecrets\t<[]LocalObjectReference>\n    ImagePullSecrets is an optional list of references to secrets in the same\n    namespace to use for pulling any of the images used by this PodSpec. If\n    specified, these secrets will be passed to individual puller implementations\n    for them to use. More info:\n    https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n\n  initContainers\t<[]Container>\n    List of initialization containers belonging to the pod. Init containers are\n    executed in order prior to containers being started. If any init container\n    fails, the pod is considered to have failed and is handled according to its\n    restartPolicy. The name for an init container or normal container must be\n    unique among all containers. Init containers may not have Lifecycle actions,\n    Readiness probes, Liveness probes, or Startup probes. The\n    resourceRequirements of an init container are taken into account during\n    scheduling by finding the highest request/limit for each resource type, and\n    then using the max of of that value or the sum of the normal containers.\n    Limits are applied to init containers in a similar fashion. Init containers\n    cannot currently be added or removed. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n\n  nodeName\t<string>\n    NodeName is a request to schedule this pod onto a specific node. If it is\n    non-empty, the scheduler simply schedules this pod onto that node, assuming\n    that it fits resource requirements.\n\n  nodeSelector\t<map[string]string>\n    NodeSelector is a selector which must be true for the pod to fit on a node.\n    Selector which must match a node's labels for the pod to be scheduled on\n    that node. More info:\n    https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n\n  os\t<PodOS>\n    Specifies the OS of the containers in the pod. Some pod and container fields\n    are restricted if this is set.\n    \n    If the OS field is set to linux, the following fields must be unset:\n    -securityContext.windowsOptions\n    \n    If the OS field is set to windows, following fields must be unset: -\n    spec.hostPID - spec.hostIPC - spec.hostUsers -\n    spec.securityContext.appArmorProfile - spec.securityContext.seLinuxOptions -\n    spec.securityContext.seccompProfile - spec.securityContext.fsGroup -\n    spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls -\n    spec.shareProcessNamespace - spec.securityContext.runAsUser -\n    spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups -\n    spec.containers[*].securityContext.appArmorProfile -\n    spec.containers[*].securityContext.seLinuxOptions -\n    spec.containers[*].securityContext.seccompProfile -\n    spec.containers[*].securityContext.capabilities -\n    spec.containers[*].securityContext.readOnlyRootFilesystem -\n    spec.containers[*].securityContext.privileged -\n    spec.containers[*].securityContext.allowPrivilegeEscalation -\n    spec.containers[*].securityContext.procMount -\n    spec.containers[*].securityContext.runAsUser -\n    spec.containers[*].securityContext.runAsGroup\n\n  overhead\t<map[string]Quantity>\n    Overhead represents the resource overhead associated with running a pod for\n    a given RuntimeClass. This field will be autopopulated at admission time by\n    the RuntimeClass admission controller. If the RuntimeClass admission\n    controller is enabled, overhead must not be set in Pod create requests. The\n    RuntimeClass admission controller will reject Pod create requests which have\n    the overhead already set. If RuntimeClass is configured and selected in the\n    PodSpec, Overhead will be set to the value defined in the corresponding\n    RuntimeClass, otherwise it will remain unset and treated as zero. More info:\n    https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md\n\n  preemptionPolicy\t<string>\n    PreemptionPolicy is the Policy for preempting pods with lower priority. One\n    of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.\n    \n    Possible enum values:\n     - `\"Never\"` means that pod never preempts other pods with lower priority.\n     - `\"PreemptLowerPriority\"` means that pod can preempt other pods with lower\n    priority.\n\n  priority\t<integer>\n    The priority value. Various system components use this field to find the\n    priority of the pod. When Priority Admission Controller is enabled, it\n    prevents users from setting this field. The admission controller populates\n    this field from PriorityClassName. The higher the value, the higher the\n    priority.\n\n  priorityClassName\t<string>\n    If specified, indicates the pod's priority. \"system-node-critical\" and\n    \"system-cluster-critical\" are two special keywords which indicate the\n    highest priorities with the former being the highest priority. Any other\n    name must be defined by creating a PriorityClass object with that name. If\n    not specified, the pod priority will be default or zero if there is no\n    default.\n\n  readinessGates\t<[]PodReadinessGate>\n    If specified, all readiness gates will be evaluated for pod readiness. A pod\n    is ready when all its containers are ready AND all conditions specified in\n    the readiness gates have status equal to \"True\" More info:\n    https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates\n\n  resourceClaims\t<[]PodResourceClaim>\n    ResourceClaims defines which ResourceClaims must be allocated and reserved\n    before the Pod is allowed to start. The resources will be made available to\n    those containers which consume them by name.\n    \n    This is an alpha field and requires enabling the DynamicResourceAllocation\n    feature gate.\n    \n    This field is immutable.\n\n  restartPolicy\t<string>\n    Restart policy for all containers within the pod. One of Always, OnFailure,\n    Never. In some contexts, only a subset of those values may be permitted.\n    Default to Always. More info:\n    https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n    \n    Possible enum values:\n     - `\"Always\"`\n     - `\"Never\"`\n     - `\"OnFailure\"`\n\n  runtimeClassName\t<string>\n    RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group,\n    which should be used to run this pod.  If no RuntimeClass resource matches\n    the named class, the pod will not be run. If unset or empty, the \"legacy\"\n    RuntimeClass will be used, which is an implicit class with an empty\n    definition that uses the default runtime handler. More info:\n    https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class\n\n  schedulerName\t<string>\n    If specified, the pod will be dispatched by specified scheduler. If not\n    specified, the pod will be dispatched by default scheduler.\n\n  schedulingGates\t<[]PodSchedulingGate>\n    SchedulingGates is an opaque list of values that if specified will block\n    scheduling the pod. If schedulingGates is not empty, the pod will stay in\n    the SchedulingGated state and the scheduler will not attempt to schedule the\n    pod.\n    \n    SchedulingGates can only be set at pod creation time, and be removed only\n    afterwards.\n\n  securityContext\t<PodSecurityContext>\n    SecurityContext holds pod-level security attributes and common container\n    settings. Optional: Defaults to empty.  See type description for default\n    values of each field.\n\n  serviceAccount\t<string>\n    DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.\n    Deprecated: Use serviceAccountName instead.\n\n  serviceAccountName\t<string>\n    ServiceAccountName is the name of the ServiceAccount to use to run this pod.\n    More info:\n    https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n\n  setHostnameAsFQDN\t<boolean>\n    If true the pod's hostname will be configured as the pod's FQDN, rather than\n    the leaf name (the default). In Linux containers, this means setting the\n    FQDN in the hostname field of the kernel (the nodename field of struct\n    utsname). In Windows containers, this means setting the registry value of\n    hostname for the registry key\n    HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to\n    FQDN. If a pod does not have FQDN, this has no effect. Default to false.\n\n  shareProcessNamespace\t<boolean>\n    Share a single process namespace between all of the containers in a pod.\n    When this is set containers will be able to view and signal processes from\n    other containers in the same pod, and the first process in each container\n    will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be\n    set. Optional: Default to false.\n\n  subdomain\t<string>\n    If specified, the fully qualified Pod hostname will be\n    \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not\n    specified, the pod will not have a domainname at all.\n\n  terminationGracePeriodSeconds\t<integer>\n    Optional duration in seconds the pod needs to terminate gracefully. May be\n    decreased in delete request. Value must be non-negative integer. The value\n    zero indicates stop immediately via the kill signal (no opportunity to shut\n    down). If this value is nil, the default grace period will be used instead.\n    The grace period is the duration in seconds after the processes running in\n    the pod are sent a termination signal and the time when the processes are\n    forcibly halted with a kill signal. Set this value longer than the expected\n    cleanup time for your process. Defaults to 30 seconds.\n\n  tolerations\t<[]Toleration>\n    If specified, the pod's tolerations.\n\n  topologySpreadConstraints\t<[]TopologySpreadConstraint>\n    TopologySpreadConstraints describes how a group of pods ought to spread\n    across topology domains. Scheduler will schedule pods in a way which abides\n    by the constraints. All topologySpreadConstraints are ANDed.\n\n  volumes\t<[]Volume>\n    List of volumes that can be mounted by containers belonging to the pod. More\n    info: https://kubernetes.io/docs/concepts/storage/volumes\n\n\n"
}
