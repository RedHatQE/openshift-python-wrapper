{
    "explain": "GROUP:      apps\nKIND:       Deployment\nVERSION:    v1\n\nDESCRIPTION:\n    Deployment enables declarative updates for Pods and ReplicaSets.\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<DeploymentSpec>\n    Specification of the desired behavior of the Deployment.\n\n  status\t<DeploymentStatus>\n    Most recently observed status of the Deployment.\n\n\n",
    "namespace": "1\n",
    "explain-minReadySeconds": "GROUP:      apps\nKIND:       Deployment\nVERSION:    v1\n\nFIELD: minReadySeconds <integer>\n\nDESCRIPTION:\n    Minimum number of seconds for which a newly created pod should be ready\n    without any of its container crashing, for it to be considered available.\n    Defaults to 0 (pod will be considered available as soon as it is ready)\n    \n\n",
    "explain-paused": "GROUP:      apps\nKIND:       Deployment\nVERSION:    v1\n\nFIELD: paused <boolean>\n\nDESCRIPTION:\n    Indicates that the deployment is paused.\n    \n\n",
    "explain-progressDeadlineSeconds": "GROUP:      apps\nKIND:       Deployment\nVERSION:    v1\n\nFIELD: progressDeadlineSeconds <integer>\n\nDESCRIPTION:\n    The maximum time in seconds for a deployment to make progress before it is\n    considered to be failed. The deployment controller will continue to process\n    failed deployments and a condition with a ProgressDeadlineExceeded reason\n    will be surfaced in the deployment status. Note that progress will not be\n    estimated during the time a deployment is paused. Defaults to 600s.\n    \n\n",
    "explain-replicas": "GROUP:      apps\nKIND:       Deployment\nVERSION:    v1\n\nFIELD: replicas <integer>\n\nDESCRIPTION:\n    Number of desired pods. This is a pointer to distinguish between explicit\n    zero and not specified. Defaults to 1.\n    \n\n",
    "explain-revisionHistoryLimit": "GROUP:      apps\nKIND:       Deployment\nVERSION:    v1\n\nFIELD: revisionHistoryLimit <integer>\n\nDESCRIPTION:\n    The number of old ReplicaSets to retain to allow rollback. This is a pointer\n    to distinguish between explicit zero and not specified. Defaults to 10.\n    \n\n",
    "explain-selector": "GROUP:      apps\nKIND:       Deployment\nVERSION:    v1\n\nFIELD: selector <LabelSelector>\n\nDESCRIPTION:\n    Label selector for pods. Existing ReplicaSets whose pods are selected by\n    this will be the ones affected by this deployment. It must match the pod\n    template's labels.\n    A label selector is a label query over a set of resources. The result of\n    matchLabels and matchExpressions are ANDed. An empty label selector matches\n    all objects. A null label selector matches no objects.\n    \nFIELDS:\n  matchExpressions\t<[]LabelSelectorRequirement>\n    matchExpressions is a list of label selector requirements. The requirements\n    are ANDed.\n\n  matchLabels\t<map[string]string>\n    matchLabels is a map of {key,value} pairs. A single {key,value} in the\n    matchLabels map is equivalent to an element of matchExpressions, whose key\n    field is \"key\", the operator is \"In\", and the values array contains only\n    \"value\". The requirements are ANDed.\n\n\n",
    "explain-strategy": "GROUP:      apps\nKIND:       Deployment\nVERSION:    v1\n\nFIELD: strategy <DeploymentStrategy>\n\nDESCRIPTION:\n    The deployment strategy to use to replace existing pods with new ones.\n    DeploymentStrategy describes how to replace existing pods with new ones.\n    \nFIELDS:\n  rollingUpdate\t<RollingUpdateDeployment>\n    Rolling update config params. Present only if DeploymentStrategyType =\n    RollingUpdate.\n\n  type\t<string>\n    Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is\n    RollingUpdate.\n    \n    Possible enum values:\n     - `\"Recreate\"` Kill all existing pods before creating new ones.\n     - `\"RollingUpdate\"` Replace the old ReplicaSets by new one using rolling\n    update i.e gradually scale down the old ReplicaSets and scale up the new\n    one.\n\n\n",
    "explain-template": "GROUP:      apps\nKIND:       Deployment\nVERSION:    v1\n\nFIELD: template <PodTemplateSpec>\n\nDESCRIPTION:\n    Template describes the pods that will be created. The only allowed\n    template.spec.restartPolicy value is \"Always\".\n    PodTemplateSpec describes the data a pod should have when created from a\n    template\n    \nFIELDS:\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<PodSpec>\n    Specification of the desired behavior of the pod. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n\n\n",
    "explain-spec": "GROUP:      apps\nKIND:       Deployment\nVERSION:    v1\n\nFIELD: spec <DeploymentSpec>\n\nDESCRIPTION:\n    Specification of the desired behavior of the Deployment.\n    DeploymentSpec is the specification of the desired behavior of the\n    Deployment.\n    \nFIELDS:\n  minReadySeconds\t<integer>\n    Minimum number of seconds for which a newly created pod should be ready\n    without any of its container crashing, for it to be considered available.\n    Defaults to 0 (pod will be considered available as soon as it is ready)\n\n  paused\t<boolean>\n    Indicates that the deployment is paused.\n\n  progressDeadlineSeconds\t<integer>\n    The maximum time in seconds for a deployment to make progress before it is\n    considered to be failed. The deployment controller will continue to process\n    failed deployments and a condition with a ProgressDeadlineExceeded reason\n    will be surfaced in the deployment status. Note that progress will not be\n    estimated during the time a deployment is paused. Defaults to 600s.\n\n  replicas\t<integer>\n    Number of desired pods. This is a pointer to distinguish between explicit\n    zero and not specified. Defaults to 1.\n\n  revisionHistoryLimit\t<integer>\n    The number of old ReplicaSets to retain to allow rollback. This is a pointer\n    to distinguish between explicit zero and not specified. Defaults to 10.\n\n  selector\t<LabelSelector> -required-\n    Label selector for pods. Existing ReplicaSets whose pods are selected by\n    this will be the ones affected by this deployment. It must match the pod\n    template's labels.\n\n  strategy\t<DeploymentStrategy>\n    The deployment strategy to use to replace existing pods with new ones.\n\n  template\t<PodTemplateSpec> -required-\n    Template describes the pods that will be created. The only allowed\n    template.spec.restartPolicy value is \"Always\".\n\n\n"
}
