{
  "description": "ServiceMeshPeer is the Schema for joining two meshes together.  The resource name will be used to identify the 'cluster' to which imported services belong.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ServiceMeshPeerSpec configures details required to support federation with another service mesh.",
      "type": "object",
      "properties": {
        "gateways": {
          "description": "Gateways configures the gateways used to facilitate ingress and egress with the other mesh.",
          "type": "object",
          "properties": {
            "egress": {
              "description": "Gateway through which outbound federated service traffic will travel.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                }
              }
            },
            "ingress": {
              "description": "Gateway through which inbound federated service traffic will travel.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                }
              }
            }
          }
        },
        "remote": {
          "description": "Remote configures details related to the remote mesh with which this mesh is federating.",
          "type": "object",
          "properties": {
            "addresses": {
              "description": "Addresses are the addresses to which discovery and service requests should be sent (i.e. the addresses of ingress gateways on the remote mesh).  These may be specified as resolveable DNS names or IP addresses.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "discoveryPort": {
              "description": "DiscoveryPort is the port on which the addresses are handling discovery requests.  Defaults to 8188, if unspecified.",
              "type": "integer",
              "format": "int32"
            },
            "servicePort": {
              "description": "ServicePort is the port on which the addresses are handling service requests.  Defaults to 15443, if unspecified.",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "security": {
          "description": "Security configures details for securing communication with the other mesh.",
          "type": "object",
          "properties": {
            "certificateChain": {
              "description": "Name of ConfigMap containing certificate chain to be used to validate the remote.  This is also used to validate certificates used by the remote services (both client and server certificates).  The name of the entry should be root-cert.pem.  If unspecified, it will look for a ConfigMap named <meshfederation-name>-ca-root-cert, e.g. if this resource is named mesh1, it will look for a ConfigMap named mesh1-ca-root-cert.",
              "type": "object",
              "required": [
                "kind",
                "name"
              ],
              "properties": {
                "apiGroup": {
                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the type of resource being referenced",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the name of resource being referenced",
                  "type": "string"
                }
              }
            },
            "clientID": {
              "description": "ClientID of the remote mesh.  This is used to authenticate incoming requrests from the remote mesh's discovery client.",
              "type": "string"
            },
            "trustDomain": {
              "description": "TrustDomain of remote mesh.",
              "type": "string"
            }
          }
        }
      }
    },
    "status": {
      "description": "ServiceMeshPeerStatus provides information related to the other mesh.",
      "type": "object",
      "properties": {
        "discoveryStatus": {
          "description": "DiscoveryStatus represents the discovery status of each pilot/istiod pod in the mesh.",
          "type": "object",
          "properties": {
            "active": {
              "description": "Active represents the pilot/istiod pods actively watching the other mesh for discovery.",
              "x-kubernetes-list-map-keys": [
                "pod"
              ],
              "x-kubernetes-list-type": "map"
            },
            "inactive": {
              "description": "Inactive represents the pilot/istiod pods not actively watching the other mesh for discovery.",
              "x-kubernetes-list-map-keys": [
                "pod"
              ],
              "x-kubernetes-list-type": "map"
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "federation.maistra.io",
      "kind": "ServiceMeshPeer",
      "version": "v1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}