{
  "description": "APIServer holds configuration (like serving certificates, client CA and CORS domains)\nshared by all API servers in the system, among them especially kube-apiserver\nand openshift-apiserver. The canonical name of an instance is 'cluster'.\n\nCompatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "spec holds user settable values for configuration",
      "type": "object",
      "properties": {
        "additionalCORSAllowedOrigins": {
          "description": "additionalCORSAllowedOrigins lists additional, user-defined regular expressions describing hosts for which the\nAPI server allows access using the CORS headers. This may be needed to access the API and the integrated OAuth\nserver from JavaScript applications.\nThe values are regular expressions that correspond to the Golang regular expression language.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "audit": {
          "description": "audit specifies the settings for audit configuration to be applied to all OpenShift-provided\nAPI servers in the cluster.",
          "type": "object",
          "properties": {
            "customRules": {
              "description": "customRules specify profiles per group. These profile take precedence over the\ntop-level profile field if they apply. They are evaluation from top to bottom and\nthe first one that matches, applies.",
              "type": "array",
              "items": {
                "description": "AuditCustomRule describes a custom rule for an audit profile that takes precedence over\nthe top-level profile.",
                "type": "object",
                "required": [
                  "group",
                  "profile"
                ],
                "properties": {
                  "group": {
                    "description": "group is a name of group a request user must be member of in order to this profile to apply.",
                    "type": "string",
                    "minLength": 1
                  },
                  "profile": {
                    "description": "profile specifies the name of the desired audit policy configuration to be deployed to\nall OpenShift-provided API servers in the cluster.\n\nThe following profiles are provided:\n- Default: the existing default policy.\n- WriteRequestBodies: like 'Default', but logs request and response HTTP payloads for\nwrite requests (create, update, patch).\n- AllRequestBodies: like 'WriteRequestBodies', but also logs request and response\nHTTP payloads for read requests (get, list).\n- None: no requests are logged at all, not even oauthaccesstokens and oauthauthorizetokens.\n\nIf unset, the 'Default' profile is used as the default.",
                    "type": "string",
                    "enum": [
                      "Default",
                      "WriteRequestBodies",
                      "AllRequestBodies",
                      "None"
                    ]
                  }
                }
              },
              "x-kubernetes-list-map-keys": [
                "group"
              ],
              "x-kubernetes-list-type": "map"
            },
            "profile": {
              "description": "profile specifies the name of the desired top-level audit profile to be applied to all requests\nsent to any of the OpenShift-provided API servers in the cluster (kube-apiserver,\nopenshift-apiserver and oauth-apiserver), with the exception of those requests that match\none or more of the customRules.\n\nThe following profiles are provided:\n- Default: default policy which means MetaData level logging with the exception of events\n  (not logged at all), oauthaccesstokens and oauthauthorizetokens (both logged at RequestBody\n  level).\n- WriteRequestBodies: like 'Default', but logs request and response HTTP payloads for\nwrite requests (create, update, patch).\n- AllRequestBodies: like 'WriteRequestBodies', but also logs request and response\nHTTP payloads for read requests (get, list).\n- None: no requests are logged at all, not even oauthaccesstokens and oauthauthorizetokens.\n\nWarning: It is not recommended to disable audit logging by using the `None` profile unless you\nare fully aware of the risks of not logging data that can be beneficial when troubleshooting issues.\nIf you disable audit logging and a support situation arises, you might need to enable audit logging\nand reproduce the issue in order to troubleshoot properly.\n\nIf unset, the 'Default' profile is used as the default.",
              "type": "string",
              "enum": [
                "Default",
                "WriteRequestBodies",
                "AllRequestBodies",
                "None"
              ]
            }
          }
        },
        "clientCA": {
          "description": "clientCA references a ConfigMap containing a certificate bundle for the signers that will be recognized for\nincoming client certificates in addition to the operator managed signers. If this is empty, then only operator managed signers are valid.\nYou usually only have to set this if you have your own PKI you wish to honor client certificates from.\nThe ConfigMap must exist in the openshift-config namespace and contain the following required fields:\n- ConfigMap.Data[\"ca-bundle.crt\"] - CA bundle.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "name is the metadata.name of the referenced config map",
              "type": "string"
            }
          }
        },
        "encryption": {
          "description": "encryption allows the configuration of encryption of resources at the datastore layer.",
          "type": "object",
          "properties": {
            "type": {
              "description": "type defines what encryption type should be used to encrypt resources at the datastore layer.\nWhen this field is unset (i.e. when it is set to the empty string), identity is implied.\nThe behavior of unset can and will change over time.  Even if encryption is enabled by default,\nthe meaning of unset may change to a different encryption type based on changes in best practices.\n\nWhen encryption is enabled, all sensitive resources shipped with the platform are encrypted.\nThis list of sensitive resources can and will change over time.  The current authoritative list is:\n\n  1. secrets\n  2. configmaps\n  3. routes.route.openshift.io\n  4. oauthaccesstokens.oauth.openshift.io\n  5. oauthauthorizetokens.oauth.openshift.io",
              "type": "string",
              "enum": [
                "",
                "identity",
                "aescbc",
                "aesgcm"
              ]
            }
          }
        },
        "servingCerts": {
          "description": "servingCert is the TLS cert info for serving secure traffic. If not specified, operator managed certificates\nwill be used for serving secure traffic.",
          "type": "object",
          "properties": {
            "namedCertificates": {
              "description": "namedCertificates references secrets containing the TLS cert info for serving secure traffic to specific hostnames.\nIf no named certificates are provided, or no named certificates match the server name as understood by a client,\nthe defaultServingCertificate will be used.",
              "type": "array",
              "items": {
                "description": "APIServerNamedServingCert maps a server DNS name, as understood by a client, to a certificate.",
                "type": "object",
                "properties": {
                  "names": {
                    "description": "names is a optional list of explicit DNS names (leading wildcards allowed) that should use this certificate to\nserve secure traffic. If no names are provided, the implicit names will be extracted from the certificates.\nExact names trump over wildcard names. Explicit names defined here trump over extracted implicit names.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "servingCertificate": {
                    "description": "servingCertificate references a kubernetes.io/tls type secret containing the TLS cert info for serving secure traffic.\nThe secret must exist in the openshift-config namespace and contain the following required fields:\n- Secret.Data[\"tls.key\"] - TLS private key.\n- Secret.Data[\"tls.crt\"] - TLS certificate.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tlsSecurityProfile": {
          "description": "tlsSecurityProfile specifies settings for TLS connections for externally exposed servers.\n\nIf unset, a default (which may change between releases) is chosen. Note that only Old,\nIntermediate and Custom profiles are currently supported, and the maximum available\nminTLSVersion is VersionTLS12.",
          "type": "object",
          "properties": {
            "custom": {
              "description": "custom is a user-defined TLS security profile. Be extremely careful using a custom\nprofile as invalid configurations can be catastrophic. An example custom profile\nlooks like this:\n\n  ciphers:\n\n    - ECDHE-ECDSA-CHACHA20-POLY1305\n\n    - ECDHE-RSA-CHACHA20-POLY1305\n\n    - ECDHE-RSA-AES128-GCM-SHA256\n\n    - ECDHE-ECDSA-AES128-GCM-SHA256\n\n  minTLSVersion: VersionTLS11"
            },
            "intermediate": {
              "description": "intermediate is a TLS security profile based on:\n\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29\n\nand looks like this (yaml):\n\n  ciphers:\n\n    - TLS_AES_128_GCM_SHA256\n\n    - TLS_AES_256_GCM_SHA384\n\n    - TLS_CHACHA20_POLY1305_SHA256\n\n    - ECDHE-ECDSA-AES128-GCM-SHA256\n\n    - ECDHE-RSA-AES128-GCM-SHA256\n\n    - ECDHE-ECDSA-AES256-GCM-SHA384\n\n    - ECDHE-RSA-AES256-GCM-SHA384\n\n    - ECDHE-ECDSA-CHACHA20-POLY1305\n\n    - ECDHE-RSA-CHACHA20-POLY1305\n\n    - DHE-RSA-AES128-GCM-SHA256\n\n    - DHE-RSA-AES256-GCM-SHA384\n\n  minTLSVersion: VersionTLS12"
            },
            "modern": {
              "description": "modern is a TLS security profile based on:\n\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility\n\nand looks like this (yaml):\n\n  ciphers:\n\n    - TLS_AES_128_GCM_SHA256\n\n    - TLS_AES_256_GCM_SHA384\n\n    - TLS_CHACHA20_POLY1305_SHA256\n\n  minTLSVersion: VersionTLS13"
            },
            "old": {
              "description": "old is a TLS security profile based on:\n\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility\n\nand looks like this (yaml):\n\n  ciphers:\n\n    - TLS_AES_128_GCM_SHA256\n\n    - TLS_AES_256_GCM_SHA384\n\n    - TLS_CHACHA20_POLY1305_SHA256\n\n    - ECDHE-ECDSA-AES128-GCM-SHA256\n\n    - ECDHE-RSA-AES128-GCM-SHA256\n\n    - ECDHE-ECDSA-AES256-GCM-SHA384\n\n    - ECDHE-RSA-AES256-GCM-SHA384\n\n    - ECDHE-ECDSA-CHACHA20-POLY1305\n\n    - ECDHE-RSA-CHACHA20-POLY1305\n\n    - DHE-RSA-AES128-GCM-SHA256\n\n    - DHE-RSA-AES256-GCM-SHA384\n\n    - DHE-RSA-CHACHA20-POLY1305\n\n    - ECDHE-ECDSA-AES128-SHA256\n\n    - ECDHE-RSA-AES128-SHA256\n\n    - ECDHE-ECDSA-AES128-SHA\n\n    - ECDHE-RSA-AES128-SHA\n\n    - ECDHE-ECDSA-AES256-SHA384\n\n    - ECDHE-RSA-AES256-SHA384\n\n    - ECDHE-ECDSA-AES256-SHA\n\n    - ECDHE-RSA-AES256-SHA\n\n    - DHE-RSA-AES128-SHA256\n\n    - DHE-RSA-AES256-SHA256\n\n    - AES128-GCM-SHA256\n\n    - AES256-GCM-SHA384\n\n    - AES128-SHA256\n\n    - AES256-SHA256\n\n    - AES128-SHA\n\n    - AES256-SHA\n\n    - DES-CBC3-SHA\n\n  minTLSVersion: VersionTLS10"
            },
            "type": {
              "description": "type is one of Old, Intermediate, Modern or Custom. Custom provides\nthe ability to specify individual TLS security profile parameters.\nOld, Intermediate and Modern are TLS security profiles based on:\n\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations\n\nThe profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers\nare found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be\nreduced.\n\nNote that the Modern profile is currently not supported because it is not\nyet well adopted by common software libraries.",
              "type": "string",
              "enum": [
                "Old",
                "Intermediate",
                "Modern",
                "Custom"
              ]
            }
          }
        }
      }
    },
    "status": {
      "description": "status holds observed values from the cluster. They may not be overridden.",
      "type": "object"
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "config.openshift.io",
      "kind": "APIServer",
      "version": "v1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}