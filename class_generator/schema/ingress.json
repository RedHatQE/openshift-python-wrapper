{
  "description": "Ingress holds cluster-wide information about ingress, including the default ingress domain\nused for routes. The canonical name is `cluster`.\n\nCompatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "spec holds user settable values for configuration",
      "type": "object",
      "properties": {
        "appsDomain": {
          "description": "appsDomain is an optional domain to use instead of the one specified\nin the domain field when a Route is created without specifying an explicit\nhost. If appsDomain is nonempty, this value is used to generate default\nhost values for Route. Unlike domain, appsDomain may be modified after\ninstallation.\nThis assumes a new ingresscontroller has been setup with a wildcard\ncertificate.",
          "type": "string"
        },
        "componentRoutes": {
          "description": "componentRoutes is an optional list of routes that are managed by OpenShift components\nthat a cluster-admin is able to configure the hostname and serving certificate for.\nThe namespace and name of each route in this list should match an existing entry in the\nstatus.componentRoutes list.\n\nTo determine the set of configurable Routes, look at namespace and name of entries in the\n.status.componentRoutes list, where participating operators write the status of\nconfigurable routes.",
          "type": "array",
          "items": {
            "description": "ComponentRouteSpec allows for configuration of a route's hostname and serving certificate.",
            "type": "object",
            "required": [
              "hostname",
              "name",
              "namespace"
            ],
            "properties": {
              "hostname": {
                "description": "hostname is the hostname that should be used by the route.",
                "type": "string",
                "pattern": "^([a-zA-Z0-9\\p{S}\\p{L}]((-?[a-zA-Z0-9\\p{S}\\p{L}]{0,62})?)|([a-zA-Z0-9\\p{S}\\p{L}](([a-zA-Z0-9-\\p{S}\\p{L}]{0,61}[a-zA-Z0-9\\p{S}\\p{L}])?)(\\.)){1,}([a-zA-Z\\p{L}]){2,63})$|^(([a-z0-9][-a-z0-9]{0,61}[a-z0-9]|[a-z0-9]{1,63})[\\.]){0,}([a-z0-9][-a-z0-9]{0,61}[a-z0-9]|[a-z0-9]{1,63})$"
              },
              "name": {
                "description": "name is the logical name of the route to customize.\n\nThe namespace and name of this componentRoute must match a corresponding\nentry in the list of status.componentRoutes if the route is to be customized.",
                "type": "string",
                "maxLength": 256,
                "minLength": 1
              },
              "namespace": {
                "description": "namespace is the namespace of the route to customize.\n\nThe namespace and name of this componentRoute must match a corresponding\nentry in the list of status.componentRoutes if the route is to be customized.",
                "type": "string",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
              },
              "servingCertKeyPairSecret": {
                "description": "servingCertKeyPairSecret is a reference to a secret of type `kubernetes.io/tls` in the openshift-config namespace.\nThe serving cert/key pair must match and will be used by the operator to fulfill the intent of serving with this name.\nIf the custom hostname uses the default routing suffix of the cluster,\nthe Secret specification for a serving certificate will not be needed.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "name is the metadata.name of the referenced secret",
                    "type": "string"
                  }
                }
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "namespace",
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "domain": {
          "description": "domain is used to generate a default host name for a route when the\nroute's host name is empty. The generated host name will follow this\npattern: \"<route-name>.<route-namespace>.<domain>\".\n\nIt is also used as the default wildcard domain suffix for ingress. The\ndefault ingresscontroller domain will follow this pattern: \"*.<domain>\".\n\nOnce set, changing domain is not currently supported.",
          "type": "string"
        },
        "loadBalancer": {
          "description": "loadBalancer contains the load balancer details in general which are not only specific to the underlying infrastructure\nprovider of the current cluster and are required for Ingress Controller to work on OpenShift.",
          "type": "object",
          "properties": {
            "platform": {
              "description": "platform holds configuration specific to the underlying\ninfrastructure provider for the ingress load balancers.\nWhen omitted, this means the user has no opinion and the platform is left\nto choose reasonable defaults. These defaults are subject to change over time.",
              "type": "object",
              "properties": {
                "aws": {
                  "description": "aws contains settings specific to the Amazon Web Services infrastructure provider.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "description": "type allows user to set a load balancer type.\nWhen this field is set the default ingresscontroller will get created using the specified LBType.\nIf this field is not set then the default ingress controller of LBType Classic will be created.\nValid values are:\n\n* \"Classic\": A Classic Load Balancer that makes routing decisions at either\n  the transport layer (TCP/SSL) or the application layer (HTTP/HTTPS). See\n  the following for additional details:\n\n    https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#clb\n\n* \"NLB\": A Network Load Balancer that makes routing decisions at the\n  transport layer (TCP/SSL). See the following for additional details:\n\n    https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#nlb",
                      "type": "string",
                      "enum": [
                        "NLB",
                        "Classic"
                      ]
                    }
                  }
                },
                "type": {
                  "description": "type is the underlying infrastructure provider for the cluster.\nAllowed values are \"AWS\", \"Azure\", \"BareMetal\", \"GCP\", \"Libvirt\",\n\"OpenStack\", \"VSphere\", \"oVirt\", \"KubeVirt\", \"EquinixMetal\", \"PowerVS\",\n\"AlibabaCloud\", \"Nutanix\" and \"None\". Individual components may not support all platforms,\nand must handle unrecognized platforms as None if they do not support that platform.",
                  "type": "string",
                  "enum": [
                    "",
                    "AWS",
                    "Azure",
                    "BareMetal",
                    "GCP",
                    "Libvirt",
                    "OpenStack",
                    "None",
                    "VSphere",
                    "oVirt",
                    "IBMCloud",
                    "KubeVirt",
                    "EquinixMetal",
                    "PowerVS",
                    "AlibabaCloud",
                    "Nutanix",
                    "External"
                  ]
                }
              }
            }
          }
        },
        "requiredHSTSPolicies": {
          "description": "requiredHSTSPolicies specifies HSTS policies that are required to be set on newly created  or updated routes\nmatching the domainPattern/s and namespaceSelector/s that are specified in the policy.\nEach requiredHSTSPolicy must have at least a domainPattern and a maxAge to validate a route HSTS Policy route\nannotation, and affect route admission.\n\nA candidate route is checked for HSTS Policies if it has the HSTS Policy route annotation:\n\"haproxy.router.openshift.io/hsts_header\"\nE.g. haproxy.router.openshift.io/hsts_header: max-age=31536000;preload;includeSubDomains\n\n- For each candidate route, if it matches a requiredHSTSPolicy domainPattern and optional namespaceSelector,\nthen the maxAge, preloadPolicy, and includeSubdomainsPolicy must be valid to be admitted.  Otherwise, the route\nis rejected.\n- The first match, by domainPattern and optional namespaceSelector, in the ordering of the RequiredHSTSPolicies\ndetermines the route's admission status.\n- If the candidate route doesn't match any requiredHSTSPolicy domainPattern and optional namespaceSelector,\nthen it may use any HSTS Policy annotation.\n\nThe HSTS policy configuration may be changed after routes have already been created. An update to a previously\nadmitted route may then fail if the updated route does not conform to the updated HSTS policy configuration.\nHowever, changing the HSTS policy configuration will not cause a route that is already admitted to stop working.\n\nNote that if there are no RequiredHSTSPolicies, any HSTS Policy annotation on the route is valid.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "domainPatterns"
            ],
            "properties": {
              "domainPatterns": {
                "description": "domainPatterns is a list of domains for which the desired HSTS annotations are required.\nIf domainPatterns is specified and a route is created with a spec.host matching one of the domains,\nthe route must specify the HSTS Policy components described in the matching RequiredHSTSPolicy.\n\nThe use of wildcards is allowed like this: *.foo.com matches everything under foo.com.\nfoo.com only matches foo.com, so to cover foo.com and everything under it, you must specify *both*.",
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              },
              "includeSubDomainsPolicy": {
                "description": "includeSubDomainsPolicy means the HSTS Policy should apply to any subdomains of the host's\ndomain name.  Thus, for the host bar.foo.com, if includeSubDomainsPolicy was set to RequireIncludeSubDomains:\n- the host app.bar.foo.com would inherit the HSTS Policy of bar.foo.com\n- the host bar.foo.com would inherit the HSTS Policy of bar.foo.com\n- the host foo.com would NOT inherit the HSTS Policy of bar.foo.com\n- the host def.foo.com would NOT inherit the HSTS Policy of bar.foo.com",
                "type": "string",
                "enum": [
                  "RequireIncludeSubDomains",
                  "RequireNoIncludeSubDomains",
                  "NoOpinion"
                ]
              },
              "maxAge": {
                "description": "maxAge is the delta time range in seconds during which hosts are regarded as HSTS hosts.\nIf set to 0, it negates the effect, and hosts are removed as HSTS hosts.\nIf set to 0 and includeSubdomains is specified, all subdomains of the host are also removed as HSTS hosts.\nmaxAge is a time-to-live value, and if this policy is not refreshed on a client, the HSTS\npolicy will eventually expire on that client.",
                "type": "object",
                "properties": {
                  "largestMaxAge": {
                    "description": "The largest allowed value (in seconds) of the RequiredHSTSPolicy max-age\nThis value can be left unspecified, in which case no upper limit is enforced.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 2147483647,
                    "minimum": 0
                  },
                  "smallestMaxAge": {
                    "description": "The smallest allowed value (in seconds) of the RequiredHSTSPolicy max-age\nSetting max-age=0 allows the deletion of an existing HSTS header from a host.  This is a necessary\ntool for administrators to quickly correct mistakes.\nThis value can be left unspecified, in which case no lower limit is enforced.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 2147483647,
                    "minimum": 0
                  }
                }
              },
              "namespaceSelector": {
                "description": "namespaceSelector specifies a label selector such that the policy applies only to those routes that\nare in namespaces with labels that match the selector, and are in one of the DomainPatterns.\nDefaults to the empty LabelSelector, which matches everything.",
                "type": "object",
                "properties": {
                  "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "type": "array",
                    "items": {
                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                      "type": "object",
                      "required": [
                        "key",
                        "operator"
                      ],
                      "properties": {
                        "key": {
                          "description": "key is the label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                          "type": "string"
                        },
                        "values": {
                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "preloadPolicy": {
                "description": "preloadPolicy directs the client to include hosts in its host preload list so that\nit never needs to do an initial load to get the HSTS header (note that this is not defined\nin RFC 6797 and is therefore client implementation-dependent).",
                "type": "string",
                "enum": [
                  "RequirePreload",
                  "RequireNoPreload",
                  "NoOpinion"
                ]
              }
            }
          }
        }
      }
    },
    "status": {
      "description": "status holds observed values from the cluster. They may not be overridden.",
      "type": "object",
      "properties": {
        "componentRoutes": {
          "description": "componentRoutes is where participating operators place the current route status for routes whose\nhostnames and serving certificates can be customized by the cluster-admin.",
          "type": "array",
          "items": {
            "description": "ComponentRouteStatus contains information allowing configuration of a route's hostname and serving certificate.",
            "type": "object",
            "required": [
              "defaultHostname",
              "name",
              "namespace",
              "relatedObjects"
            ],
            "properties": {
              "conditions": {
                "description": "conditions are used to communicate the state of the componentRoutes entry.\n\nSupported conditions include Available, Degraded and Progressing.\n\nIf available is true, the content served by the route can be accessed by users. This includes cases\nwhere a default may continue to serve content while the customized route specified by the cluster-admin\nis being configured.\n\nIf Degraded is true, that means something has gone wrong trying to handle the componentRoutes entry.\nThe currentHostnames field may or may not be in effect.\n\nIf Progressing is true, that means the component is taking some action related to the componentRoutes entry.",
                "type": "array",
                "items": {
                  "description": "Condition contains details for one aspect of the current state of this API Resource.",
                  "type": "object",
                  "required": [
                    "lastTransitionTime",
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                      "type": "string",
                      "maxLength": 32768
                    },
                    "observedGeneration": {
                      "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    },
                    "reason": {
                      "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                      "type": "string",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                    },
                    "status": {
                      "description": "status of the condition, one of True, False, Unknown.",
                      "type": "string",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ]
                    },
                    "type": {
                      "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                      "type": "string",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                    }
                  }
                },
                "x-kubernetes-list-map-keys": [
                  "type"
                ],
                "x-kubernetes-list-type": "map"
              },
              "consumingUsers": {
                "description": "consumingUsers is a slice of ServiceAccounts that need to have read permission on the servingCertKeyPairSecret secret.",
                "type": "array",
                "maxItems": 5,
                "items": {
                  "description": "ConsumingUser is an alias for string which we add validation to. Currently only service accounts are supported.",
                  "type": "string",
                  "maxLength": 512,
                  "minLength": 1,
                  "pattern": "^system:serviceaccount:[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                }
              },
              "currentHostnames": {
                "description": "currentHostnames is the list of current names used by the route. Typically, this list should consist of a single\nhostname, but if multiple hostnames are supported by the route the operator may write multiple entries to this list.",
                "type": "array",
                "minItems": 1,
                "items": {
                  "description": "Hostname is a host name as defined by RFC-1123.",
                  "type": "string",
                  "pattern": "^([a-zA-Z0-9\\p{S}\\p{L}]((-?[a-zA-Z0-9\\p{S}\\p{L}]{0,62})?)|([a-zA-Z0-9\\p{S}\\p{L}](([a-zA-Z0-9-\\p{S}\\p{L}]{0,61}[a-zA-Z0-9\\p{S}\\p{L}])?)(\\.)){1,}([a-zA-Z\\p{L}]){2,63})$|^(([a-z0-9][-a-z0-9]{0,61}[a-z0-9]|[a-z0-9]{1,63})[\\.]){0,}([a-z0-9][-a-z0-9]{0,61}[a-z0-9]|[a-z0-9]{1,63})$"
                }
              },
              "defaultHostname": {
                "description": "defaultHostname is the hostname of this route prior to customization.",
                "type": "string",
                "pattern": "^([a-zA-Z0-9\\p{S}\\p{L}]((-?[a-zA-Z0-9\\p{S}\\p{L}]{0,62})?)|([a-zA-Z0-9\\p{S}\\p{L}](([a-zA-Z0-9-\\p{S}\\p{L}]{0,61}[a-zA-Z0-9\\p{S}\\p{L}])?)(\\.)){1,}([a-zA-Z\\p{L}]){2,63})$|^(([a-z0-9][-a-z0-9]{0,61}[a-z0-9]|[a-z0-9]{1,63})[\\.]){0,}([a-z0-9][-a-z0-9]{0,61}[a-z0-9]|[a-z0-9]{1,63})$"
              },
              "name": {
                "description": "name is the logical name of the route to customize. It does not have to be the actual name of a route resource\nbut it cannot be renamed.\n\nThe namespace and name of this componentRoute must match a corresponding\nentry in the list of spec.componentRoutes if the route is to be customized.",
                "type": "string",
                "maxLength": 256,
                "minLength": 1
              },
              "namespace": {
                "description": "namespace is the namespace of the route to customize. It must be a real namespace. Using an actual namespace\nensures that no two components will conflict and the same component can be installed multiple times.\n\nThe namespace and name of this componentRoute must match a corresponding\nentry in the list of spec.componentRoutes if the route is to be customized.",
                "type": "string",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
              },
              "relatedObjects": {
                "description": "relatedObjects is a list of resources which are useful when debugging or inspecting how spec.componentRoutes is applied.",
                "type": "array",
                "minItems": 1,
                "items": {
                  "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
                  "type": "object",
                  "required": [
                    "group",
                    "name",
                    "resource"
                  ],
                  "properties": {
                    "group": {
                      "description": "group of the referent.",
                      "type": "string"
                    },
                    "name": {
                      "description": "name of the referent.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "namespace of the referent.",
                      "type": "string"
                    },
                    "resource": {
                      "description": "resource of the referent.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "namespace",
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "defaultPlacement": {
          "description": "defaultPlacement is set at installation time to control which\nnodes will host the ingress router pods by default. The options are\ncontrol-plane nodes or worker nodes.\n\nThis field works by dictating how the Cluster Ingress Operator will\nconsider unset replicas and nodePlacement fields in IngressController\nresources when creating the corresponding Deployments.\n\nSee the documentation for the IngressController replicas and nodePlacement\nfields for more information.\n\nWhen omitted, the default value is Workers",
          "type": "string",
          "enum": [
            "ControlPlane",
            "Workers",
            ""
          ]
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "config.openshift.io",
      "kind": "Ingress",
      "version": "v1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}