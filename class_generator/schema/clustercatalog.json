{
  "description": "ClusterCatalog enables users to make File-Based Catalog (FBC) catalog data available to the cluster.\nFor more information on FBC, see https://olm.operatorframework.io/docs/reference/file-based-catalogs/#docs",
  "type": "object",
  "required": [
    "metadata",
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "spec is the desired state of the ClusterCatalog.\nspec is required.\nThe controller will work to ensure that the desired\ncatalog is unpacked and served over the catalog content HTTP server.",
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "availabilityMode": {
          "description": "availabilityMode allows users to define how the ClusterCatalog is made available to clients on the cluster.\navailabilityMode is optional.\n\nAllowed values are \"Available\" and \"Unavailable\" and omitted.\n\nWhen omitted, the default value is \"Available\".\n\nWhen set to \"Available\", the catalog contents will be unpacked and served over the catalog content HTTP server.\nSetting the availabilityMode to \"Available\" tells clients that they should consider this ClusterCatalog\nand its contents as usable.\n\nWhen set to \"Unavailable\", the catalog contents will no longer be served over the catalog content HTTP server.\nWhen set to this availabilityMode it should be interpreted the same as the ClusterCatalog not existing.\nSetting the availabilityMode to \"Unavailable\" can be useful in scenarios where a user may not want\nto delete the ClusterCatalog all together, but would still like it to be treated as if it doesn't exist.",
          "type": "string",
          "enum": [
            "Unavailable",
            "Available"
          ]
        },
        "priority": {
          "description": "priority allows the user to define a priority for a ClusterCatalog.\npriority is optional.\n\nA ClusterCatalog's priority is used by clients as a tie-breaker between ClusterCatalogs that meet the client's requirements.\nA higher number means higher priority.\n\nIt is up to clients to decide how to handle scenarios where multiple ClusterCatalogs with the same priority meet their requirements.\nWhen deciding how to break the tie in this scenario, it is recommended that clients prompt their users for additional input.\n\nWhen omitted, the default priority is 0 because that is the zero value of integers.\n\nNegative numbers can be used to specify a priority lower than the default.\nPositive numbers can be used to specify a priority higher than the default.\n\nThe lowest possible value is -2147483648.\nThe highest possible value is 2147483647.",
          "type": "integer",
          "format": "int32"
        },
        "source": {
          "description": "source allows a user to define the source of a catalog.\nA \"catalog\" contains information on content that can be installed on a cluster.\nProviding a catalog source makes the contents of the catalog discoverable and usable by\nother on-cluster components.\nThese on-cluster components may do a variety of things with this information, such as\npresenting the content in a GUI dashboard or installing content from the catalog on the cluster.\nThe catalog source must contain catalog metadata in the File-Based Catalog (FBC) format.\nFor more information on FBC, see https://olm.operatorframework.io/docs/reference/file-based-catalogs/#docs.\nsource is a required field.\n\nBelow is a minimal example of a ClusterCatalogSpec that sources a catalog from an image:\n\n source:\n   type: Image\n   image:\n     ref: quay.io/operatorhubio/catalog:latest",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "image": {
              "description": "image is used to configure how catalog contents are sourced from an OCI image.\nThis field is required when type is Image, and forbidden otherwise.",
              "type": "object",
              "required": [
                "ref"
              ],
              "properties": {
                "pollIntervalMinutes": {
                  "description": "pollIntervalMinutes allows the user to set the interval, in minutes, at which the image source should be polled for new content.\npollIntervalMinutes is optional.\npollIntervalMinutes can not be specified when ref is a digest-based reference.\n\nWhen omitted, the image will not be polled for new content.",
                  "type": "integer",
                  "minimum": 1
                },
                "ref": {
                  "description": "ref allows users to define the reference to a container image containing Catalog contents.\nref is required.\nref can not be more than 1000 characters.\n\nA reference can be broken down into 3 parts - the domain, name, and identifier.\n\nThe domain is typically the registry where an image is located.\nIt must be alphanumeric characters (lowercase and uppercase) separated by the \".\" character.\nHyphenation is allowed, but the domain must start and end with alphanumeric characters.\nSpecifying a port to use is also allowed by adding the \":\" character followed by numeric values.\nThe port must be the last value in the domain.\nSome examples of valid domain values are \"registry.mydomain.io\", \"quay.io\", \"my-registry.io:8080\".\n\nThe name is typically the repository in the registry where an image is located.\nIt must contain lowercase alphanumeric characters separated only by the \".\", \"_\", \"__\", \"-\" characters.\nMultiple names can be concatenated with the \"/\" character.\nThe domain and name are combined using the \"/\" character.\nSome examples of valid name values are \"operatorhubio/catalog\", \"catalog\", \"my-catalog.prod\".\nAn example of the domain and name parts of a reference being combined is \"quay.io/operatorhubio/catalog\".\n\nThe identifier is typically the tag or digest for an image reference and is present at the end of the reference.\nIt starts with a separator character used to distinguish the end of the name and beginning of the identifier.\nFor a digest-based reference, the \"@\" character is the separator.\nFor a tag-based reference, the \":\" character is the separator.\nAn identifier is required in the reference.\n\nDigest-based references must contain an algorithm reference immediately after the \"@\" separator.\nThe algorithm reference must be followed by the \":\" character and an encoded string.\nThe algorithm must start with an uppercase or lowercase alpha character followed by alphanumeric characters and may contain the \"-\", \"_\", \"+\", and \".\" characters.\nSome examples of valid algorithm values are \"sha256\", \"sha256+b64u\", \"multihash+base58\".\nThe encoded string following the algorithm must be hex digits (a-f, A-F, 0-9) and must be a minimum of 32 characters.\n\nTag-based references must begin with a word character (alphanumeric + \"_\") followed by word characters or \".\", and \"-\" characters.\nThe tag must not be longer than 127 characters.\n\nAn example of a valid digest-based image reference is \"quay.io/operatorhubio/catalog@sha256:200d4ddb2a73594b91358fe6397424e975205bfbe44614f5846033cad64b3f05\"\nAn example of a valid tag-based image reference is \"quay.io/operatorhubio/catalog:latest\"",
                  "type": "string",
                  "maxLength": 1000,
                  "x-kubernetes-validations": [
                    {
                      "message": "must start with a valid domain. valid domains must be alphanumeric characters (lowercase and uppercase) separated by the \".\" character.",
                      "rule": "self.matches('^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])((\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]))+)?(:[0-9]+)?\\\\b')"
                    },
                    {
                      "message": "a valid name is required. valid names must contain lowercase alphanumeric characters separated only by the \".\", \"_\", \"__\", \"-\" characters.",
                      "rule": "self.find('(\\\\/[a-z0-9]+((([._]|__|[-]*)[a-z0-9]+)+)?((\\\\/[a-z0-9]+((([._]|__|[-]*)[a-z0-9]+)+)?)+)?)') != \"\""
                    },
                    {
                      "message": "must end with a digest or a tag",
                      "rule": "self.find('(@.*:)') != \"\" || self.find(':.*$') != \"\""
                    },
                    {
                      "message": "tag is invalid. the tag must not be more than 127 characters",
                      "rule": "self.find('(@.*:)') == \"\" ? (self.find(':.*$') != \"\" ? self.find(':.*$').substring(1).size() <= 127 : true) : true"
                    },
                    {
                      "message": "tag is invalid. valid tags must begin with a word character (alphanumeric + \"_\") followed by word characters or \".\", and \"-\" characters",
                      "rule": "self.find('(@.*:)') == \"\" ? (self.find(':.*$') != \"\" ? self.find(':.*$').matches(':[\\\\w][\\\\w.-]*$') : true) : true"
                    },
                    {
                      "message": "digest algorithm is not valid. valid algorithms must start with an uppercase or lowercase alpha character followed by alphanumeric characters and may contain the \"-\", \"_\", \"+\", and \".\" characters.",
                      "rule": "self.find('(@.*:)') != \"\" ? self.find('(@.*:)').matches('(@[A-Za-z][A-Za-z0-9]*([-_+.][A-Za-z][A-Za-z0-9]*)*[:])') : true"
                    },
                    {
                      "message": "digest is not valid. the encoded string must be at least 32 characters",
                      "rule": "self.find('(@.*:)') != \"\" ? self.find(':.*$').substring(1).size() >= 32 : true"
                    },
                    {
                      "message": "digest is not valid. the encoded string must only contain hex characters (A-F, a-f, 0-9)",
                      "rule": "self.find('(@.*:)') != \"\" ? self.find(':.*$').matches(':[0-9A-Fa-f]*$') : true"
                    }
                  ]
                }
              },
              "x-kubernetes-validations": [
                {
                  "message": "cannot specify pollIntervalMinutes while using digest-based image",
                  "rule": "self.ref.find('(@.*:)') != \"\" ? !has(self.pollIntervalMinutes) : true"
                }
              ]
            },
            "type": {
              "description": "type is a reference to the type of source the catalog is sourced from.\ntype is required.\n\nThe only allowed value is \"Image\".\n\nWhen set to \"Image\", the ClusterCatalog content will be sourced from an OCI image.\nWhen using an image source, the image field must be set and must be the only field defined for this type.",
              "type": "string",
              "enum": [
                "Image"
              ]
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "image is required when source type is Image, and forbidden otherwise",
              "rule": "has(self.type) && self.type == 'Image' ? has(self.image) : !has(self.image)"
            }
          ]
        }
      }
    },
    "status": {
      "description": "status contains information about the state of the ClusterCatalog such as:\n  - Whether or not the catalog contents are being served via the catalog content HTTP server\n  - Whether or not the ClusterCatalog is progressing to a new state\n  - A reference to the source from which the catalog contents were retrieved",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "conditions is a representation of the current state for this ClusterCatalog.\n\nThe current condition types are Serving and Progressing.\n\nThe Serving condition is used to represent whether or not the contents of the catalog is being served via the HTTP(S) web server.\nWhen it has a status of True and a reason of Available, the contents of the catalog are being served.\nWhen it has a status of False and a reason of Unavailable, the contents of the catalog are not being served because the contents are not yet available.\nWhen it has a status of False and a reason of UserSpecifiedUnavailable, the contents of the catalog are not being served because the catalog has been intentionally marked as unavailable.\n\nThe Progressing condition is used to represent whether or not the ClusterCatalog is progressing or is ready to progress towards a new state.\nWhen it has a status of True and a reason of Retrying, there was an error in the progression of the ClusterCatalog that may be resolved on subsequent reconciliation attempts.\nWhen it has a status of True and a reason of Succeeded, the ClusterCatalog has successfully progressed to a new state and is ready to continue progressing.\nWhen it has a status of False and a reason of Blocked, there was an error in the progression of the ClusterCatalog that requires manual intervention for recovery.\n\nIn the case that the Serving condition is True with reason Available and Progressing is True with reason Retrying, the previously fetched\ncatalog contents are still being served via the HTTP(S) web server while we are progressing towards serving a new version of the catalog\ncontents. This could occur when we've initially fetched the latest contents from the source for this catalog and when polling for changes\nto the contents we identify that there are updates to the contents.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "lastUnpacked": {
          "description": "lastUnpacked represents the last time the contents of the\ncatalog were extracted from their source format. As an example,\nwhen using an Image source, the OCI image will be pulled and the\nimage layers written to a file-system backed cache. We refer to the\nact of this extraction from the source format as \"unpacking\".",
          "type": "string",
          "format": "date-time"
        },
        "resolvedSource": {
          "description": "resolvedSource contains information about the resolved source based on the source type.",
          "type": "object",
          "required": [
            "image",
            "type"
          ],
          "properties": {
            "image": {
              "description": "image is a field containing resolution information for a catalog sourced from an image.\nThis field must be set when type is Image, and forbidden otherwise.",
              "type": "object",
              "required": [
                "ref"
              ],
              "properties": {
                "ref": {
                  "description": "ref contains the resolved image digest-based reference.\nThe digest format is used so users can use other tooling to fetch the exact\nOCI manifests that were used to extract the catalog contents.",
                  "type": "string",
                  "maxLength": 1000,
                  "x-kubernetes-validations": [
                    {
                      "message": "must start with a valid domain. valid domains must be alphanumeric characters (lowercase and uppercase) separated by the \".\" character.",
                      "rule": "self.matches('^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])((\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]))+)?(:[0-9]+)?\\\\b')"
                    },
                    {
                      "message": "a valid name is required. valid names must contain lowercase alphanumeric characters separated only by the \".\", \"_\", \"__\", \"-\" characters.",
                      "rule": "self.find('(\\\\/[a-z0-9]+((([._]|__|[-]*)[a-z0-9]+)+)?((\\\\/[a-z0-9]+((([._]|__|[-]*)[a-z0-9]+)+)?)+)?)') != \"\""
                    },
                    {
                      "message": "must end with a digest",
                      "rule": "self.find('(@.*:)') != \"\""
                    },
                    {
                      "message": "digest algorithm is not valid. valid algorithms must start with an uppercase or lowercase alpha character followed by alphanumeric characters and may contain the \"-\", \"_\", \"+\", and \".\" characters.",
                      "rule": "self.find('(@.*:)') != \"\" ? self.find('(@.*:)').matches('(@[A-Za-z][A-Za-z0-9]*([-_+.][A-Za-z][A-Za-z0-9]*)*[:])') : true"
                    },
                    {
                      "message": "digest is not valid. the encoded string must be at least 32 characters",
                      "rule": "self.find('(@.*:)') != \"\" ? self.find(':.*$').substring(1).size() >= 32 : true"
                    },
                    {
                      "message": "digest is not valid. the encoded string must only contain hex characters (A-F, a-f, 0-9)",
                      "rule": "self.find('(@.*:)') != \"\" ? self.find(':.*$').matches(':[0-9A-Fa-f]*$') : true"
                    }
                  ]
                }
              }
            },
            "type": {
              "description": "type is a reference to the type of source the catalog is sourced from.\ntype is required.\n\nThe only allowed value is \"Image\".\n\nWhen set to \"Image\", information about the resolved image source will be set in the 'image' field.",
              "type": "string",
              "enum": [
                "Image"
              ]
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "image is required when source type is Image, and forbidden otherwise",
              "rule": "has(self.type) && self.type == 'Image' ? has(self.image) : !has(self.image)"
            }
          ]
        },
        "urls": {
          "description": "urls contains the URLs that can be used to access the catalog.",
          "type": "object",
          "required": [
            "base"
          ],
          "properties": {
            "base": {
              "description": "base is a cluster-internal URL that provides endpoints for\naccessing the content of the catalog.\n\nIt is expected that clients append the path for the endpoint they wish\nto access.\n\nCurrently, only a single endpoint is served and is accessible at the path\n/api/v1.\n\nThe endpoints served for the v1 API are:\n  - /all - this endpoint returns the entirety of the catalog contents in the FBC format\n\nAs the needs of users and clients of the evolve, new endpoints may be added.",
              "type": "string",
              "maxLength": 525,
              "x-kubernetes-validations": [
                {
                  "message": "must be a valid URL",
                  "rule": "isURL(self)"
                },
                {
                  "message": "scheme must be either http or https",
                  "rule": "isURL(self) ? (url(self).getScheme() == \"http\" || url(self).getScheme() == \"https\") : true"
                }
              ]
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "olm.operatorframework.io",
      "kind": "ClusterCatalog",
      "version": "v1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}