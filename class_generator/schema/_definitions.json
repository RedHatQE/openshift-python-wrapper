{
  "definitions": {
    "com.github.openshift.api.apps.v1.CustomDeploymentStrategyParams": {
      "description": "CustomDeploymentStrategyParams are the input to the Custom deployment strategy.",
      "properties": {
        "command": {
          "description": "Command is optional and overrides CMD in the container Image.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "environment": {
          "description": "Environment holds the environment which will be given to the container for Image.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "image": {
          "description": "Image specifies a container image which can carry out a deployment.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.DeploymentCause": {
      "description": "DeploymentCause captures information about a particular cause of a deployment.",
      "properties": {
        "imageTrigger": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.DeploymentCauseImageTrigger"
            }
          ],
          "description": "ImageTrigger contains the image trigger details, if this trigger was fired based on an image change"
        },
        "type": {
          "default": "",
          "description": "Type of the trigger that resulted in the creation of a new deployment",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.DeploymentCauseImageTrigger": {
      "description": "DeploymentCauseImageTrigger represents details about the cause of a deployment originating from an image change trigger",
      "properties": {
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "From is a reference to the changed object which triggered a deployment. The field may have the kinds DockerImage, ImageStreamTag, or ImageStreamImage."
        }
      },
      "required": [
        "from"
      ],
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.DeploymentCondition": {
      "description": "DeploymentCondition describes the state of a deployment config at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "The last time the condition transitioned from one status to another."
        },
        "lastUpdateTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "The last time this condition was updated."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of deployment condition.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigRollbackSpec": {
      "description": "DeploymentConfigRollbackSpec represents the options for rollback generation.",
      "properties": {
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "From points to a ReplicationController which is a deployment."
        },
        "includeReplicationMeta": {
          "default": false,
          "description": "IncludeReplicationMeta specifies whether to include the replica count and selector.",
          "type": "boolean"
        },
        "includeStrategy": {
          "default": false,
          "description": "IncludeStrategy specifies whether to include the deployment Strategy.",
          "type": "boolean"
        },
        "includeTemplate": {
          "default": false,
          "description": "IncludeTemplate specifies whether to include the PodTemplateSpec.",
          "type": "boolean"
        },
        "includeTriggers": {
          "default": false,
          "description": "IncludeTriggers specifies whether to include config Triggers.",
          "type": "boolean"
        },
        "revision": {
          "description": "Revision to rollback to. If set to 0, rollback to the last revision.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "from",
        "includeTriggers",
        "includeTemplate",
        "includeReplicationMeta",
        "includeStrategy"
      ],
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigSpec": {
      "description": "DeploymentConfigSpec represents the desired state of the deployment.",
      "properties": {
        "minReadySeconds": {
          "description": "MinReadySeconds is the minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "format": "int32",
          "type": "integer"
        },
        "paused": {
          "description": "Paused indicates that the deployment config is paused resulting in no new deployments on template changes or changes in the template caused by other triggers.",
          "type": "boolean"
        },
        "replicas": {
          "default": 0,
          "description": "Replicas is the number of desired replicas.",
          "format": "int32",
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "description": "RevisionHistoryLimit is the number of old ReplicationControllers to retain to allow for rollbacks. This field is a pointer to allow for differentiation between an explicit zero and not specified. Defaults to 10. (This only applies to DeploymentConfigs created via the new group API resource, not the legacy resource.)",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Selector is a label query over pods that should match the Replicas count.",
          "type": "object"
        },
        "strategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.DeploymentStrategy"
            }
          ],
          "default": {},
          "description": "Strategy describes how a deployment is executed."
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected."
        },
        "test": {
          "default": false,
          "description": "Test ensures that this deployment config will have zero replicas except while a deployment is running. This allows the deployment config to be used as a continuous deployment test - triggering on images, running the deployment, and then succeeding or failing. Post strategy hooks and After actions can be used to integrate successful deployment with an action.",
          "type": "boolean"
        },
        "triggers": {
          "description": "Triggers determine how updates to a DeploymentConfig result in new deployments. If no triggers are defined, a new deployment can only occur as a result of an explicit client update to the DeploymentConfig with a new LatestVersion. If null, defaults to having a config change trigger.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.DeploymentTriggerPolicy"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigStatus": {
      "description": "DeploymentConfigStatus represents the current deployment state.",
      "properties": {
        "availableReplicas": {
          "default": 0,
          "description": "AvailableReplicas is the total number of available pods targeted by this deployment config.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "Conditions represents the latest available observations of a deployment config's current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.DeploymentCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "details": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.DeploymentDetails"
            }
          ],
          "description": "Details are the reasons for the update to this deployment config. This could be based on a change made by the user or caused by an automatic trigger"
        },
        "latestVersion": {
          "default": 0,
          "description": "LatestVersion is used to determine whether the current deployment associated with a deployment config is out of sync.",
          "format": "int64",
          "type": "integer"
        },
        "observedGeneration": {
          "default": 0,
          "description": "ObservedGeneration is the most recent generation observed by the deployment config controller.",
          "format": "int64",
          "type": "integer"
        },
        "readyReplicas": {
          "description": "Total number of ready pods targeted by this deployment.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "default": 0,
          "description": "Replicas is the total number of pods targeted by this deployment config.",
          "format": "int32",
          "type": "integer"
        },
        "unavailableReplicas": {
          "default": 0,
          "description": "UnavailableReplicas is the total number of unavailable pods targeted by this deployment config.",
          "format": "int32",
          "type": "integer"
        },
        "updatedReplicas": {
          "default": 0,
          "description": "UpdatedReplicas is the total number of non-terminated pods targeted by this deployment config that have the desired template spec.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "latestVersion",
        "observedGeneration",
        "replicas",
        "updatedReplicas",
        "availableReplicas",
        "unavailableReplicas"
      ],
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.DeploymentDetails": {
      "description": "DeploymentDetails captures information about the causes of a deployment.",
      "properties": {
        "causes": {
          "description": "Causes are extended data associated with all the causes for creating a new deployment",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.DeploymentCause"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "message": {
          "description": "Message is the user specified change message, if this deployment was triggered manually by the user",
          "type": "string"
        }
      },
      "required": [
        "causes"
      ],
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.DeploymentStrategy": {
      "description": "DeploymentStrategy describes how to perform a deployment.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "ActiveDeadlineSeconds is the duration in seconds that the deployer pods for this deployment config may be active on a node before the system actively tries to terminate them.",
          "format": "int64",
          "type": "integer"
        },
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Annotations is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods.",
          "type": "object"
        },
        "customParams": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.CustomDeploymentStrategyParams"
            }
          ],
          "description": "CustomParams are the input to the Custom deployment strategy, and may also be specified for the Recreate and Rolling strategies to customize the execution process that runs the deployment."
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Labels is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods.",
          "type": "object"
        },
        "recreateParams": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.RecreateDeploymentStrategyParams"
            }
          ],
          "description": "RecreateParams are the input to the Recreate deployment strategy."
        },
        "resources": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceRequirements"
            }
          ],
          "default": {},
          "description": "Resources contains resource requirements to execute the deployment and any hooks."
        },
        "rollingParams": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.RollingDeploymentStrategyParams"
            }
          ],
          "description": "RollingParams are the input to the Rolling deployment strategy."
        },
        "type": {
          "description": "Type is the name of a deployment strategy.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.DeploymentTriggerImageChangeParams": {
      "description": "DeploymentTriggerImageChangeParams represents the parameters to the ImageChange trigger.",
      "properties": {
        "automatic": {
          "description": "Automatic means that the detection of a new tag value should result in an image update inside the pod template.",
          "type": "boolean"
        },
        "containerNames": {
          "description": "ContainerNames is used to restrict tag updates to the specified set of container names in a pod. If multiple triggers point to the same containers, the resulting behavior is undefined. Future API versions will make this a validation error. If ContainerNames does not point to a valid container, the trigger will be ignored. Future API versions will make this a validation error.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "From is a reference to an image stream tag to watch for changes. From.Name is the only required subfield - if From.Namespace is blank, the namespace of the current deployment trigger will be used."
        },
        "lastTriggeredImage": {
          "description": "LastTriggeredImage is the last image to be triggered.",
          "type": "string"
        }
      },
      "required": [
        "from"
      ],
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.DeploymentTriggerPolicy": {
      "description": "DeploymentTriggerPolicy describes a policy for a single trigger that results in a new deployment.",
      "properties": {
        "imageChangeParams": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.DeploymentTriggerImageChangeParams"
            }
          ],
          "description": "ImageChangeParams represents the parameters for the ImageChange trigger."
        },
        "type": {
          "description": "Type of the trigger",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.ExecNewPodHook": {
      "description": "ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.",
      "properties": {
        "command": {
          "description": "Command is the action command and its arguments.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "containerName": {
          "default": "",
          "description": "ContainerName is the name of a container in the deployment pod template whose container image will be used for the hook pod's container.",
          "type": "string"
        },
        "env": {
          "description": "Env is a set of environment variables to supply to the hook pod's container.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "volumes": {
          "description": "Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "command",
        "containerName"
      ],
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.LifecycleHook": {
      "description": "LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.",
      "properties": {
        "execNewPod": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.ExecNewPodHook"
            }
          ],
          "description": "ExecNewPod specifies the options for a lifecycle hook backed by a pod."
        },
        "failurePolicy": {
          "default": "",
          "description": "FailurePolicy specifies what action to take if the hook fails.",
          "type": "string"
        },
        "tagImages": {
          "description": "TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.TagImageHook"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "failurePolicy"
      ],
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.RecreateDeploymentStrategyParams": {
      "description": "RecreateDeploymentStrategyParams are the input to the Recreate deployment strategy.",
      "properties": {
        "mid": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.LifecycleHook"
            }
          ],
          "description": "Mid is a lifecycle hook which is executed while the deployment is scaled down to zero before the first new pod is created. All LifecycleHookFailurePolicy values are supported."
        },
        "post": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.LifecycleHook"
            }
          ],
          "description": "Post is a lifecycle hook which is executed after the strategy has finished all deployment logic. All LifecycleHookFailurePolicy values are supported."
        },
        "pre": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.LifecycleHook"
            }
          ],
          "description": "Pre is a lifecycle hook which is executed before the strategy manipulates the deployment. All LifecycleHookFailurePolicy values are supported."
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.RollingDeploymentStrategyParams": {
      "description": "RollingDeploymentStrategyParams are the input to the Rolling deployment strategy.",
      "properties": {
        "intervalSeconds": {
          "description": "IntervalSeconds is the time to wait between polling deployment status after update. If the value is nil, a default will be used.",
          "format": "int64",
          "type": "integer"
        },
        "maxSurge": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "MaxSurge is the maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up.\n\nThis cannot be 0 if MaxUnavailable is 0. By default, 25% is used.\n\nExample: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of original pods."
        },
        "maxUnavailable": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "MaxUnavailable is the maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding down.\n\nThis cannot be 0 if MaxSurge is 0. By default, 25% is used.\n\nExample: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update."
        },
        "post": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.LifecycleHook"
            }
          ],
          "description": "Post is a lifecycle hook which is executed after the strategy has finished all deployment logic. All LifecycleHookFailurePolicy values are supported."
        },
        "pre": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.apps.v1.LifecycleHook"
            }
          ],
          "description": "Pre is a lifecycle hook which is executed before the deployment process begins. All LifecycleHookFailurePolicy values are supported."
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.",
          "format": "int64",
          "type": "integer"
        },
        "updatePeriodSeconds": {
          "description": "UpdatePeriodSeconds is the time to wait between individual pod updates. If the value is nil, a default will be used.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.apps.v1.TagImageHook": {
      "description": "TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.",
      "properties": {
        "containerName": {
          "default": "",
          "description": "ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container.",
          "type": "string"
        },
        "to": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "To is the target ImageStreamTag to set the container's image onto."
        }
      },
      "required": [
        "containerName",
        "to"
      ],
      "type": "object"
    },
    "com.github.openshift.api.authorization.v1.GroupRestriction": {
      "description": "GroupRestriction matches a group either by a string match on the group name or a label selector applied to group labels.",
      "properties": {
        "groups": {
          "description": "Groups is a list of groups used to match against an individual user's groups. If the user is a member of one of the whitelisted groups, the user is allowed to be bound to a role.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "labels": {
          "description": "Selectors specifies a list of label selectors over group labels.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "groups",
        "labels"
      ],
      "type": "object"
    },
    "com.github.openshift.api.authorization.v1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If this field is empty, then both kubernetes and origin API groups are assumed. That means that if an action is requested against one of the enumerated resources in either the kubernetes or the origin API group, the request will be allowed",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "attributeRestrictions": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.runtime.RawExtension"
            }
          ],
          "description": "AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports. If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error."
        },
        "nonResourceURLs": {
          "description": "NonResourceURLsSlice is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verbs",
        "resources"
      ],
      "type": "object"
    },
    "com.github.openshift.api.authorization.v1.RoleBindingRestrictionSpec": {
      "description": "RoleBindingRestrictionSpec defines a rolebinding restriction.  Exactly one field must be non-nil.",
      "properties": {
        "grouprestriction": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.authorization.v1.GroupRestriction"
            }
          ],
          "description": "GroupRestriction matches against group subjects."
        },
        "serviceaccountrestriction": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.authorization.v1.ServiceAccountRestriction"
            }
          ],
          "description": "ServiceAccountRestriction matches against service-account subjects."
        },
        "userrestriction": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.authorization.v1.UserRestriction"
            }
          ],
          "description": "UserRestriction matches against user subjects."
        }
      },
      "required": [
        "userrestriction",
        "grouprestriction",
        "serviceaccountrestriction"
      ],
      "type": "object"
    },
    "com.github.openshift.api.authorization.v1.SelfSubjectRulesReviewSpec": {
      "description": "SelfSubjectRulesReviewSpec adds information about how to conduct the check",
      "properties": {
        "scopes": {
          "description": "Scopes to use for the evaluation.  Empty means \"use the unscoped (full) permissions of the user/groups\". Nil means \"use the scopes on this request\".",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "scopes"
      ],
      "type": "object"
    },
    "com.github.openshift.api.authorization.v1.ServiceAccountReference": {
      "description": "ServiceAccountReference specifies a service account and namespace by their names.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name is the name of the service account.",
          "type": "string"
        },
        "namespace": {
          "default": "",
          "description": "Namespace is the namespace of the service account.  Service accounts from inside the whitelisted namespaces are allowed to be bound to roles.  If Namespace is empty, then the namespace of the RoleBindingRestriction in which the ServiceAccountReference is embedded is used.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "com.github.openshift.api.authorization.v1.ServiceAccountRestriction": {
      "description": "ServiceAccountRestriction matches a service account by a string match on either the service-account name or the name of the service account's namespace.",
      "properties": {
        "namespaces": {
          "description": "Namespaces specifies a list of literal namespace names.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "serviceaccounts": {
          "description": "ServiceAccounts specifies a list of literal service-account names.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.authorization.v1.ServiceAccountReference"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "serviceaccounts",
        "namespaces"
      ],
      "type": "object"
    },
    "com.github.openshift.api.authorization.v1.SubjectRulesReviewSpec": {
      "description": "SubjectRulesReviewSpec adds information about how to conduct the check",
      "properties": {
        "groups": {
          "description": "Groups is optional.  Groups is the list of groups to which the User belongs.  At least one of User and Groups must be specified.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "scopes": {
          "description": "Scopes to use for the evaluation.  Empty means \"use the unscoped (full) permissions of the user/groups\".",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "user": {
          "default": "",
          "description": "User is optional.  At least one of User and Groups must be specified.",
          "type": "string"
        }
      },
      "required": [
        "user",
        "groups",
        "scopes"
      ],
      "type": "object"
    },
    "com.github.openshift.api.authorization.v1.SubjectRulesReviewStatus": {
      "description": "SubjectRulesReviewStatus is contains the result of a rules check",
      "properties": {
        "evaluationError": {
          "description": "EvaluationError can appear in combination with Rules.  It means some error happened during evaluation that may have prevented additional rules from being populated.",
          "type": "string"
        },
        "rules": {
          "description": "Rules is the list of rules (no particular sort) that are allowed for the subject",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.authorization.v1.PolicyRule"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "com.github.openshift.api.authorization.v1.UserRestriction": {
      "description": "UserRestriction matches a user either by a string match on the user name, a string match on the name of a group to which the user belongs, or a label selector applied to the user labels.",
      "properties": {
        "groups": {
          "description": "Groups specifies a list of literal group names.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "labels": {
          "description": "Selectors specifies a list of label selectors over user labels.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "users": {
          "description": "Users specifies a list of literal user names.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "users",
        "groups",
        "labels"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BinaryBuildSource": {
      "description": "BinaryBuildSource describes a binary file to be used for the Docker and Source build strategies, where the file will be extracted and used as the build source.",
      "properties": {
        "asFile": {
          "description": "asFile indicates that the provided binary input should be considered a single file within the build input. For example, specifying \"webapp.war\" would place the provided binary as `/webapp.war` for the builder. If left empty, the Docker and Source build strategies assume this file is a zip, tar, or tar.gz file and extract it as the source. The custom strategy receives this binary as standard input. This filename may not contain slashes or be '..' or '.'.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BitbucketWebHookCause": {
      "description": "BitbucketWebHookCause has information about a Bitbucket webhook that triggered a build.",
      "properties": {
        "revision": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SourceRevision"
            }
          ],
          "description": "Revision is the git source revision information of the trigger."
        },
        "secret": {
          "description": "Secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildCondition": {
      "description": "BuildCondition describes the state of a build at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "The last time the condition transitioned from one status to another."
        },
        "lastUpdateTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "The last time this condition was updated."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of build condition.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildConfigSpec": {
      "description": "BuildConfigSpec describes when and how builds are created",
      "properties": {
        "completionDeadlineSeconds": {
          "description": "completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer",
          "format": "int64",
          "type": "integer"
        },
        "failedBuildsHistoryLimit": {
          "description": "failedBuildsHistoryLimit is the number of old failed builds to retain. When a BuildConfig is created, the 5 most recent failed builds are retained unless this value is set. If removed after the BuildConfig has been created, all failed builds are retained.",
          "format": "int32",
          "type": "integer"
        },
        "mountTrustedCA": {
          "description": "mountTrustedCA bind mounts the cluster's trusted certificate authorities, as defined in the cluster's proxy configuration, into the build. This lets processes within a build trust components signed by custom PKI certificate authorities, such as private artifact repositories and HTTPS proxies.\n\nWhen this field is set to true, the contents of `/etc/pki/ca-trust` within the build are managed by the build container, and any changes to this directory or its subdirectories (for example - within a Dockerfile `RUN` instruction) are not persisted in the build's output image.",
          "type": "boolean"
        },
        "nodeSelector": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored.",
          "type": "object"
        },
        "output": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildOutput"
            }
          ],
          "default": {},
          "description": "output describes the container image the Strategy should produce."
        },
        "postCommit": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildPostCommitSpec"
            }
          ],
          "default": {},
          "description": "postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry."
        },
        "resources": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceRequirements"
            }
          ],
          "default": {},
          "description": "resources computes resource requirements to execute the build."
        },
        "revision": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SourceRevision"
            }
          ],
          "description": "revision is the information from the source for a specific repo snapshot. This is optional."
        },
        "runPolicy": {
          "description": "RunPolicy describes how the new build created from this build configuration will be scheduled for execution. This is optional, if not specified we default to \"Serial\".",
          "type": "string"
        },
        "serviceAccount": {
          "description": "serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount",
          "type": "string"
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildSource"
            }
          ],
          "default": {},
          "description": "source describes the SCM in use."
        },
        "strategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildStrategy"
            }
          ],
          "default": {},
          "description": "strategy defines how to perform a build."
        },
        "successfulBuildsHistoryLimit": {
          "description": "successfulBuildsHistoryLimit is the number of old successful builds to retain. When a BuildConfig is created, the 5 most recent successful builds are retained unless this value is set. If removed after the BuildConfig has been created, all successful builds are retained.",
          "format": "int32",
          "type": "integer"
        },
        "triggers": {
          "description": "triggers determine how new Builds can be launched from a BuildConfig. If no triggers are defined, a new build can only occur as a result of an explicit client build creation.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildTriggerPolicy"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "strategy"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildConfigStatus": {
      "description": "BuildConfigStatus contains current state of the build config object.",
      "properties": {
        "imageChangeTriggers": {
          "description": "ImageChangeTriggers captures the runtime state of any ImageChangeTrigger specified in the BuildConfigSpec, including the value reconciled by the OpenShift APIServer for the lastTriggeredImageID. There is a single entry in this array for each image change trigger in spec. Each trigger status references the ImageStreamTag that acts as the source of the trigger.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.ImageChangeTriggerStatus"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "lastVersion": {
          "default": 0,
          "description": "lastVersion is used to inform about number of last triggered build.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "lastVersion"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildOutput": {
      "description": "BuildOutput is input to a build strategy and describes the container image that the strategy should produce.",
      "properties": {
        "imageLabels": {
          "description": "imageLabels define a list of labels that are applied to the resulting image. If there are multiple labels with the same name then the last one in the list is used.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.ImageLabel"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "pushSecret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "PushSecret is the name of a Secret that would be used for setting up the authentication for executing the Docker push to authentication enabled Docker Registry (or Docker Hub)."
        },
        "to": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "to defines an optional location to push the output of this build to. Kind must be one of 'ImageStreamTag' or 'DockerImage'. This value will be used to look up a container image repository to push to. In the case of an ImageStreamTag, the ImageStreamTag will be looked for in the namespace of the build unless Namespace is specified."
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildPostCommitSpec": {
      "description": "A BuildPostCommitSpec holds a build post commit hook specification. The hook executes a command in a temporary container running the build output image, immediately after the last layer of the image is committed and before the image is pushed to a registry. The command is executed with the current working directory ($PWD) set to the image's WORKDIR.\n\nThe build will be marked as failed if the hook execution fails. It will fail if the script or command return a non-zero exit code, or if there is any other error related to starting the temporary container.\n\nThere are five different ways to configure the hook. As an example, all forms below are equivalent and will execute `rake test --verbose`.\n\n1. Shell script:\n\n\t   \"postCommit\": {\n\t     \"script\": \"rake test --verbose\",\n\t   }\n\n\tThe above is a convenient form which is equivalent to:\n\n\t   \"postCommit\": {\n\t     \"command\": [\"/bin/sh\", \"-ic\"],\n\t     \"args\":    [\"rake test --verbose\"]\n\t   }\n\n2. A command as the image entrypoint:\n\n\t   \"postCommit\": {\n\t     \"commit\": [\"rake\", \"test\", \"--verbose\"]\n\t   }\n\n\tCommand overrides the image entrypoint in the exec form, as documented in\n\tDocker: https://docs.docker.com/engine/reference/builder/#entrypoint.\n\n3. Pass arguments to the default entrypoint:\n\n\t       \"postCommit\": {\n\t\t\t      \"args\": [\"rake\", \"test\", \"--verbose\"]\n\t\t      }\n\n\t    This form is only useful if the image entrypoint can handle arguments.\n\n4. Shell script with arguments:\n\n\t   \"postCommit\": {\n\t     \"script\": \"rake test $1\",\n\t     \"args\":   [\"--verbose\"]\n\t   }\n\n\tThis form is useful if you need to pass arguments that would otherwise be\n\thard to quote properly in the shell script. In the script, $0 will be\n\t\"/bin/sh\" and $1, $2, etc, are the positional arguments from Args.\n\n5. Command with arguments:\n\n\t   \"postCommit\": {\n\t     \"command\": [\"rake\", \"test\"],\n\t     \"args\":    [\"--verbose\"]\n\t   }\n\n\tThis form is equivalent to appending the arguments to the Command slice.\n\nIt is invalid to provide both Script and Command simultaneously. If none of the fields are specified, the hook is not executed.",
      "properties": {
        "args": {
          "description": "args is a list of arguments that are provided to either Command, Script or the container image's default entrypoint. The arguments are placed immediately after the command to be run.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "command is the command to run. It may not be specified with Script. This might be needed if the image doesn't have `/bin/sh`, or if you do not want to use a shell. In all other cases, using Script might be more convenient.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "script": {
          "description": "script is a shell script to be run with `/bin/sh -ic`. It may not be specified with Command. Use Script when a shell script is appropriate to execute the post build hook, for example for running unit tests with `rake test`. If you need control over the image entrypoint, or if the image does not have `/bin/sh`, use Command and/or Args. The `-i` flag is needed to support CentOS and RHEL images that use Software Collections (SCL), in order to have the appropriate collections enabled in the shell. E.g., in the Ruby image, this is necessary to make `ruby`, `bundle` and other binaries available in the PATH.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildSource": {
      "description": "BuildSource is the SCM used for the build.",
      "properties": {
        "binary": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BinaryBuildSource"
            }
          ],
          "description": "binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy. For container image builds, this is the build context and an optional Dockerfile may be specified to override any Dockerfile in the build context. For Source builds, this is assumed to be an archive as described above. For Source and container image builds, if binary.asFile is set the build will receive a directory with a single file. contextDir may be used when an archive is provided. Custom builds will receive this binary as input on STDIN."
        },
        "configMaps": {
          "description": "configMaps represents a list of configMaps and their destinations that will be used for the build.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.ConfigMapBuildSource"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "contextDir": {
          "description": "contextDir specifies the sub-directory where the source code for the application exists. This allows to have buildable sources in directory other than root of repository.",
          "type": "string"
        },
        "dockerfile": {
          "description": "dockerfile is the raw contents of a Dockerfile which should be built. When this option is specified, the FROM may be modified based on your strategy base image and additional ENV stanzas from your strategy environment will be added after the FROM, but before the rest of your Dockerfile stanzas. The Dockerfile source type may be used with other options like git - in those cases the Git repo will have any innate Dockerfile replaced in the context dir.",
          "type": "string"
        },
        "git": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.GitBuildSource"
            }
          ],
          "description": "git contains optional information about git build source"
        },
        "images": {
          "description": "images describes a set of images to be used to provide source for the build",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.ImageSource"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "secrets": {
          "description": "secrets represents a list of secrets and their destinations that will be used only for the build.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SecretBuildSource"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "sourceSecret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "sourceSecret is the name of a Secret that would be used for setting up the authentication for cloning private repository. The secret contains valid credentials for remote repository, where the data's key represent the authentication method to be used and value is the base64 encoded credentials. Supported auth methods are: ssh-privatekey."
        },
        "type": {
          "description": "type of build input to accept",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildSpec": {
      "description": "BuildSpec has the information to represent a build and also additional information about a build",
      "properties": {
        "completionDeadlineSeconds": {
          "description": "completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer",
          "format": "int64",
          "type": "integer"
        },
        "mountTrustedCA": {
          "description": "mountTrustedCA bind mounts the cluster's trusted certificate authorities, as defined in the cluster's proxy configuration, into the build. This lets processes within a build trust components signed by custom PKI certificate authorities, such as private artifact repositories and HTTPS proxies.\n\nWhen this field is set to true, the contents of `/etc/pki/ca-trust` within the build are managed by the build container, and any changes to this directory or its subdirectories (for example - within a Dockerfile `RUN` instruction) are not persisted in the build's output image.",
          "type": "boolean"
        },
        "nodeSelector": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored.",
          "type": "object"
        },
        "output": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildOutput"
            }
          ],
          "default": {},
          "description": "output describes the container image the Strategy should produce."
        },
        "postCommit": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildPostCommitSpec"
            }
          ],
          "default": {},
          "description": "postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry."
        },
        "resources": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceRequirements"
            }
          ],
          "default": {},
          "description": "resources computes resource requirements to execute the build."
        },
        "revision": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SourceRevision"
            }
          ],
          "description": "revision is the information from the source for a specific repo snapshot. This is optional."
        },
        "serviceAccount": {
          "description": "serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount",
          "type": "string"
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildSource"
            }
          ],
          "default": {},
          "description": "source describes the SCM in use."
        },
        "strategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildStrategy"
            }
          ],
          "default": {},
          "description": "strategy defines how to perform a build."
        },
        "triggeredBy": {
          "description": "triggeredBy describes which triggers started the most recent update to the build configuration and contains information about those triggers.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildTriggerCause"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "strategy"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildStatus": {
      "description": "BuildStatus contains the status of a build",
      "properties": {
        "cancelled": {
          "description": "cancelled describes if a cancel event was triggered for the build.",
          "type": "boolean"
        },
        "completionTimestamp": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "completionTimestamp is a timestamp representing the server time when this Build was finished, whether that build failed or succeeded.  It reflects the time at which the Pod running the Build terminated. It is represented in RFC3339 form and is in UTC."
        },
        "conditions": {
          "description": "Conditions represents the latest available observations of a build's current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "config": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "config is an ObjectReference to the BuildConfig this Build is based on."
        },
        "duration": {
          "description": "duration contains time.Duration object describing build time.",
          "format": "int64",
          "type": "integer"
        },
        "logSnippet": {
          "description": "logSnippet is the last few lines of the build log.  This value is only set for builds that failed.",
          "type": "string"
        },
        "message": {
          "description": "message is a human-readable message indicating details about why the build has this status.",
          "type": "string"
        },
        "output": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildStatusOutput"
            }
          ],
          "default": {},
          "description": "output describes the container image the build has produced."
        },
        "outputDockerImageReference": {
          "description": "outputDockerImageReference contains a reference to the container image that will be built by this build. Its value is computed from Build.Spec.Output.To, and should include the registry address, so that it can be used to push and pull the image.",
          "type": "string"
        },
        "phase": {
          "default": "",
          "description": "phase is the point in the build lifecycle. Possible values are \"New\", \"Pending\", \"Running\", \"Complete\", \"Failed\", \"Error\", and \"Cancelled\".",
          "type": "string"
        },
        "reason": {
          "description": "reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
          "type": "string"
        },
        "stages": {
          "description": "stages contains details about each stage that occurs during the build including start time, duration (in milliseconds), and the steps that occured within each stage.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.StageInfo"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "startTimestamp": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "startTimestamp is a timestamp representing the server time when this Build started running in a Pod. It is represented in RFC3339 form and is in UTC."
        }
      },
      "required": [
        "phase"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildStatusOutput": {
      "description": "BuildStatusOutput contains the status of the built image.",
      "properties": {
        "to": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildStatusOutputTo"
            }
          ],
          "description": "to describes the status of the built image being pushed to a registry."
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildStatusOutputTo": {
      "description": "BuildStatusOutputTo describes the status of the built image with regards to image registry to which it was supposed to be pushed.",
      "properties": {
        "imageDigest": {
          "description": "imageDigest is the digest of the built container image. The digest uniquely identifies the image in the registry to which it was pushed.\n\nPlease note that this field may not always be set even if the push completes successfully - e.g. when the registry returns no digest or returns it in a format that the builder doesn't understand.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildStrategy": {
      "description": "BuildStrategy contains the details of how to perform a build.",
      "properties": {
        "customStrategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.CustomBuildStrategy"
            }
          ],
          "description": "customStrategy holds the parameters to the Custom build strategy"
        },
        "dockerStrategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.DockerBuildStrategy"
            }
          ],
          "description": "dockerStrategy holds the parameters to the container image build strategy."
        },
        "jenkinsPipelineStrategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.JenkinsPipelineBuildStrategy"
            }
          ],
          "description": "JenkinsPipelineStrategy holds the parameters to the Jenkins Pipeline build strategy. Deprecated: use OpenShift Pipelines"
        },
        "sourceStrategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SourceBuildStrategy"
            }
          ],
          "description": "sourceStrategy holds the parameters to the Source build strategy."
        },
        "type": {
          "description": "type is the kind of build strategy.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildTriggerCause": {
      "description": "BuildTriggerCause holds information about a triggered build. It is used for displaying build trigger data for each build and build configuration in oc describe. It is also used to describe which triggers led to the most recent update in the build configuration.",
      "properties": {
        "bitbucketWebHook": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BitbucketWebHookCause"
            }
          ],
          "description": "BitbucketWebHook represents data for a Bitbucket webhook that fired a specific build."
        },
        "genericWebHook": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.GenericWebHookCause"
            }
          ],
          "description": "genericWebHook holds data about a builds generic webhook trigger."
        },
        "githubWebHook": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.GitHubWebHookCause"
            }
          ],
          "description": "gitHubWebHook represents data for a GitHub webhook that fired a specific build."
        },
        "gitlabWebHook": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.GitLabWebHookCause"
            }
          ],
          "description": "GitLabWebHook represents data for a GitLab webhook that fired a specific build."
        },
        "imageChangeBuild": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.ImageChangeCause"
            }
          ],
          "description": "imageChangeBuild stores information about an imagechange event that triggered a new build."
        },
        "message": {
          "description": "message is used to store a human readable message for why the build was triggered. E.g.: \"Manually triggered by user\", \"Configuration change\",etc.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildTriggerPolicy": {
      "description": "BuildTriggerPolicy describes a policy for a single trigger that results in a new Build.",
      "properties": {
        "bitbucket": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.WebHookTrigger"
            }
          ],
          "description": "BitbucketWebHook contains the parameters for a Bitbucket webhook type of trigger"
        },
        "generic": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.WebHookTrigger"
            }
          ],
          "description": "generic contains the parameters for a Generic webhook type of trigger"
        },
        "github": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.WebHookTrigger"
            }
          ],
          "description": "github contains the parameters for a GitHub webhook type of trigger"
        },
        "gitlab": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.WebHookTrigger"
            }
          ],
          "description": "GitLabWebHook contains the parameters for a GitLab webhook type of trigger"
        },
        "imageChange": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.ImageChangeTrigger"
            }
          ],
          "description": "imageChange contains parameters for an ImageChange type of trigger"
        },
        "type": {
          "default": "",
          "description": "type is the type of build trigger. Valid values:\n\n- GitHub GitHubWebHookBuildTriggerType represents a trigger that launches builds on GitHub webhook invocations\n\n- Generic GenericWebHookBuildTriggerType represents a trigger that launches builds on generic webhook invocations\n\n- GitLab GitLabWebHookBuildTriggerType represents a trigger that launches builds on GitLab webhook invocations\n\n- Bitbucket BitbucketWebHookBuildTriggerType represents a trigger that launches builds on Bitbucket webhook invocations\n\n- ImageChange ImageChangeBuildTriggerType represents a trigger that launches builds on availability of a new version of an image\n\n- ConfigChange ConfigChangeBuildTriggerType will trigger a build on an initial build config creation WARNING: In the future the behavior will change to trigger a build on any config change",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildVolume": {
      "description": "BuildVolume describes a volume that is made available to build pods, such that it can be mounted into buildah's runtime environment. Only a subset of Kubernetes Volume sources are supported.",
      "properties": {
        "mounts": {
          "description": "mounts represents the location of the volume in the image build container",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildVolumeMount"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "destinationPath"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "destinationPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "name": {
          "default": "",
          "description": "name is a unique identifier for this BuildVolume. It must conform to the Kubernetes DNS label standard and be unique within the pod. Names that collide with those added by the build controller will result in a failed build with an error message detailing which name caused the error. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildVolumeSource"
            }
          ],
          "default": {},
          "description": "source represents the location and type of the mounted volume."
        }
      },
      "required": [
        "name",
        "source",
        "mounts"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildVolumeMount": {
      "description": "BuildVolumeMount describes the mounting of a Volume within buildah's runtime environment.",
      "properties": {
        "destinationPath": {
          "default": "",
          "description": "destinationPath is the path within the buildah runtime environment at which the volume should be mounted. The transient mount within the build image and the backing volume will both be mounted read only. Must be an absolute path, must not contain '..' or ':', and must not collide with a destination path generated by the builder process Paths that collide with those added by the build controller will result in a failed build with an error message detailing which path caused the error.",
          "type": "string"
        }
      },
      "required": [
        "destinationPath"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.BuildVolumeSource": {
      "description": "BuildVolumeSource represents the source of a volume to mount Only one of its supported types may be specified at any given time.",
      "properties": {
        "configMap": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapVolumeSource"
            }
          ],
          "description": "configMap represents a ConfigMap that should populate this volume"
        },
        "csi": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.CSIVolumeSource"
            }
          ],
          "description": "csi represents ephemeral storage provided by external CSI drivers which support this capability"
        },
        "secret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretVolumeSource"
            }
          ],
          "description": "secret represents a Secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
        },
        "type": {
          "default": "",
          "description": "type is the BuildVolumeSourceType for the volume source. Type must match the populated volume source. Valid types are: Secret, ConfigMap",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.ConfigMapBuildSource": {
      "description": "ConfigMapBuildSource describes a configmap and its destination directory that will be used only at the build time. The content of the configmap referenced here will be copied into the destination directory instead of mounting.",
      "properties": {
        "configMap": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "default": {},
          "description": "configMap is a reference to an existing configmap that you want to use in your build."
        },
        "destinationDir": {
          "description": "destinationDir is the directory where the files from the configmap should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. For the container image build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during container image build.",
          "type": "string"
        }
      },
      "required": [
        "configMap"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.CustomBuildStrategy": {
      "description": "CustomBuildStrategy defines input parameters specific to Custom build.",
      "properties": {
        "buildAPIVersion": {
          "description": "buildAPIVersion is the requested API version for the Build object serialized and passed to the custom builder",
          "type": "string"
        },
        "env": {
          "description": "env contains additional environment variables you want to pass into a builder container.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "exposeDockerSocket": {
          "description": "exposeDockerSocket will allow running Docker commands (and build container images) from inside the container.",
          "type": "boolean"
        },
        "forcePull": {
          "description": "forcePull describes if the controller should configure the build pod to always pull the images for the builder or only pull if it is not present locally",
          "type": "boolean"
        },
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled"
        },
        "pullSecret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries"
        },
        "secrets": {
          "description": "secrets is a list of additional secrets that will be included in the build pod",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SecretSpec"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "from"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.DockerBuildStrategy": {
      "description": "DockerBuildStrategy defines input parameters specific to container image build.",
      "properties": {
        "buildArgs": {
          "description": "buildArgs contains build arguments that will be resolved in the Dockerfile.  See https://docs.docker.com/engine/reference/builder/#/arg for more details. NOTE: Only the 'name' and 'value' fields are supported. Any settings on the 'valueFrom' field are ignored.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "dockerfilePath": {
          "description": "dockerfilePath is the path of the Dockerfile that will be used to build the container image, relative to the root of the context (contextDir). Defaults to `Dockerfile` if unset.",
          "type": "string"
        },
        "env": {
          "description": "env contains additional environment variables you want to pass into a builder container.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "forcePull": {
          "description": "forcePull describes if the builder should pull the images from registry prior to building.",
          "type": "boolean"
        },
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "from is a reference to an DockerImage, ImageStreamTag, or ImageStreamImage which overrides the FROM image in the Dockerfile for the build. If the Dockerfile uses multi-stage builds, this will replace the image in the last FROM directive of the file."
        },
        "imageOptimizationPolicy": {
          "description": "imageOptimizationPolicy describes what optimizations the system can use when building images to reduce the final size or time spent building the image. The default policy is 'None' which means the final build image will be equivalent to an image created by the container image build API. The experimental policy 'SkipLayers' will avoid commiting new layers in between each image step, and will fail if the Dockerfile cannot provide compatibility with the 'None' policy. An additional experimental policy 'SkipLayersAndWarn' is the same as 'SkipLayers' but simply warns if compatibility cannot be preserved.",
          "type": "string"
        },
        "noCache": {
          "description": "noCache if set to true indicates that the container image build must be executed with the --no-cache=true flag",
          "type": "boolean"
        },
        "pullSecret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries"
        },
        "volumes": {
          "description": "volumes is a list of input volumes that can be mounted into the builds runtime environment. Only a subset of Kubernetes Volume sources are supported by builds. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildVolume"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.DockerStrategyOptions": {
      "description": "DockerStrategyOptions contains extra strategy options for container image builds",
      "properties": {
        "buildArgs": {
          "description": "Args contains any build arguments that are to be passed to Docker.  See https://docs.docker.com/engine/reference/builder/#/arg for more details",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "noCache": {
          "description": "noCache overrides the docker-strategy noCache option in the build config",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.GenericWebHookCause": {
      "description": "GenericWebHookCause holds information about a generic WebHook that triggered a build.",
      "properties": {
        "revision": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SourceRevision"
            }
          ],
          "description": "revision is an optional field that stores the git source revision information of the generic webhook trigger when it is available."
        },
        "secret": {
          "description": "secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.GitBuildSource": {
      "description": "GitBuildSource defines the parameters of a Git SCM",
      "properties": {
        "httpProxy": {
          "description": "httpProxy is a proxy used to reach the git repository over http",
          "type": "string"
        },
        "httpsProxy": {
          "description": "httpsProxy is a proxy used to reach the git repository over https",
          "type": "string"
        },
        "noProxy": {
          "description": "noProxy is the list of domains for which the proxy should not be used",
          "type": "string"
        },
        "ref": {
          "description": "ref is the branch/tag/ref to build.",
          "type": "string"
        },
        "uri": {
          "default": "",
          "description": "uri points to the source that will be built. The structure of the source will depend on the type of build to run",
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.GitHubWebHookCause": {
      "description": "GitHubWebHookCause has information about a GitHub webhook that triggered a build.",
      "properties": {
        "revision": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SourceRevision"
            }
          ],
          "description": "revision is the git revision information of the trigger."
        },
        "secret": {
          "description": "secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.GitLabWebHookCause": {
      "description": "GitLabWebHookCause has information about a GitLab webhook that triggered a build.",
      "properties": {
        "revision": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SourceRevision"
            }
          ],
          "description": "Revision is the git source revision information of the trigger."
        },
        "secret": {
          "description": "Secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.GitSourceRevision": {
      "description": "GitSourceRevision is the commit information from a git source for a build",
      "properties": {
        "author": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SourceControlUser"
            }
          ],
          "default": {},
          "description": "author is the author of a specific commit"
        },
        "commit": {
          "description": "commit is the commit hash identifying a specific commit",
          "type": "string"
        },
        "committer": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SourceControlUser"
            }
          ],
          "default": {},
          "description": "committer is the committer of a specific commit"
        },
        "message": {
          "description": "message is the description of a specific commit",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.ImageChangeCause": {
      "description": "ImageChangeCause contains information about the image that triggered a build",
      "properties": {
        "fromRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "fromRef contains detailed information about an image that triggered a build."
        },
        "imageID": {
          "description": "imageID is the ID of the image that triggered a new build.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.ImageChangeTrigger": {
      "description": "ImageChangeTrigger allows builds to be triggered when an ImageStream changes",
      "properties": {
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "from is a reference to an ImageStreamTag that will trigger a build when updated It is optional. If no From is specified, the From image from the build strategy will be used. Only one ImageChangeTrigger with an empty From reference is allowed in a build configuration."
        },
        "lastTriggeredImageID": {
          "description": "lastTriggeredImageID is used internally by the ImageChangeController to save last used image ID for build This field is deprecated and will be removed in a future release. Deprecated",
          "type": "string"
        },
        "paused": {
          "description": "paused is true if this trigger is temporarily disabled. Optional.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.ImageChangeTriggerStatus": {
      "description": "ImageChangeTriggerStatus tracks the latest resolved status of the associated ImageChangeTrigger policy specified in the BuildConfigSpec.Triggers struct.",
      "properties": {
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.ImageStreamTagReference"
            }
          ],
          "default": {},
          "description": "from is the ImageStreamTag that is the source of the trigger."
        },
        "lastTriggerTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "lastTriggerTime is the last time this particular ImageStreamTag triggered a Build to start. This field is only updated when this trigger specifically started a Build."
        },
        "lastTriggeredImageID": {
          "description": "lastTriggeredImageID represents the sha/id of the ImageStreamTag when a Build for this BuildConfig was started. The lastTriggeredImageID is updated each time a Build for this BuildConfig is started, even if this ImageStreamTag is not the reason the Build is started.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.ImageLabel": {
      "description": "ImageLabel represents a label applied to the resulting image.",
      "properties": {
        "name": {
          "default": "",
          "description": "name defines the name of the label. It must have non-zero length.",
          "type": "string"
        },
        "value": {
          "description": "value defines the literal value of the label.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.ImageSource": {
      "description": "ImageSource is used to describe build source that will be extracted from an image or used during a multi stage build. A reference of type ImageStreamTag, ImageStreamImage or DockerImage may be used. A pull secret can be specified to pull the image from an external registry or override the default service account secret if pulling from the internal registry. Image sources can either be used to extract content from an image and place it into the build context along with the repository source, or used directly during a multi-stage container image build to allow content to be copied without overwriting the contents of the repository source (see the 'paths' and 'as' fields).",
      "properties": {
        "as": {
          "description": "A list of image names that this source will be used in place of during a multi-stage container image build. For instance, a Dockerfile that uses \"COPY --from=nginx:latest\" will first check for an image source that has \"nginx:latest\" in this field before attempting to pull directly. If the Dockerfile does not reference an image source it is ignored. This field and paths may both be set, in which case the contents will be used twice.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "from is a reference to an ImageStreamTag, ImageStreamImage, or DockerImage to copy source from."
        },
        "paths": {
          "description": "paths is a list of source and destination paths to copy from the image. This content will be copied into the build context prior to starting the build. If no paths are set, the build context will not be altered.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.ImageSourcePath"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "pullSecret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "pullSecret is a reference to a secret to be used to pull the image from a registry If the image is pulled from the OpenShift registry, this field does not need to be set."
        }
      },
      "required": [
        "from"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.ImageSourcePath": {
      "description": "ImageSourcePath describes a path to be copied from a source image and its destination within the build directory.",
      "properties": {
        "destinationDir": {
          "default": "",
          "description": "destinationDir is the relative directory within the build directory where files copied from the image are placed.",
          "type": "string"
        },
        "sourcePath": {
          "default": "",
          "description": "sourcePath is the absolute path of the file or directory inside the image to copy to the build directory.  If the source path ends in /. then the content of the directory will be copied, but the directory itself will not be created at the destination.",
          "type": "string"
        }
      },
      "required": [
        "sourcePath",
        "destinationDir"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.ImageStreamTagReference": {
      "description": "ImageStreamTagReference references the ImageStreamTag in an image change trigger by namespace and name.",
      "properties": {
        "name": {
          "description": "name is the name of the ImageStreamTag for an ImageChangeTrigger",
          "type": "string"
        },
        "namespace": {
          "description": "namespace is the namespace where the ImageStreamTag for an ImageChangeTrigger is located",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.JenkinsPipelineBuildStrategy": {
      "description": "JenkinsPipelineBuildStrategy holds parameters specific to a Jenkins Pipeline build. Deprecated: use OpenShift Pipelines",
      "properties": {
        "env": {
          "description": "env contains additional environment variables you want to pass into a build pipeline.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "jenkinsfile": {
          "description": "Jenkinsfile defines the optional raw contents of a Jenkinsfile which defines a Jenkins pipeline build.",
          "type": "string"
        },
        "jenkinsfilePath": {
          "description": "JenkinsfilePath is the optional path of the Jenkinsfile that will be used to configure the pipeline relative to the root of the context (contextDir). If both JenkinsfilePath & Jenkinsfile are both not specified, this defaults to Jenkinsfile in the root of the specified contextDir.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.SecretBuildSource": {
      "description": "SecretBuildSource describes a secret and its destination directory that will be used only at the build time. The content of the secret referenced here will be copied into the destination directory instead of mounting.",
      "properties": {
        "destinationDir": {
          "description": "destinationDir is the directory where the files from the secret should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. Later, when the script finishes, all files injected will be truncated to zero length. For the container image build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during container image build.",
          "type": "string"
        },
        "secret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "default": {},
          "description": "secret is a reference to an existing secret that you want to use in your build."
        }
      },
      "required": [
        "secret"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.SecretLocalReference": {
      "description": "SecretLocalReference contains information that points to the local secret being used",
      "properties": {
        "name": {
          "default": "",
          "description": "Name is the name of the resource in the same namespace being referenced",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.SecretSpec": {
      "description": "SecretSpec specifies a secret to be included in a build pod and its corresponding mount point",
      "properties": {
        "mountPath": {
          "default": "",
          "description": "mountPath is the path at which to mount the secret",
          "type": "string"
        },
        "secretSource": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "default": {},
          "description": "secretSource is a reference to the secret"
        }
      },
      "required": [
        "secretSource",
        "mountPath"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.SourceBuildStrategy": {
      "description": "SourceBuildStrategy defines input parameters specific to an Source build.",
      "properties": {
        "env": {
          "description": "env contains additional environment variables you want to pass into a builder container.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "forcePull": {
          "description": "forcePull describes if the builder should pull the images from registry prior to building.",
          "type": "boolean"
        },
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled"
        },
        "incremental": {
          "description": "incremental flag forces the Source build to do incremental builds if true.",
          "type": "boolean"
        },
        "pullSecret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries"
        },
        "scripts": {
          "description": "scripts is the location of Source scripts",
          "type": "string"
        },
        "volumes": {
          "description": "volumes is a list of input volumes that can be mounted into the builds runtime environment. Only a subset of Kubernetes Volume sources are supported by builds. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.BuildVolume"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "from"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.SourceControlUser": {
      "description": "SourceControlUser defines the identity of a user of source control",
      "properties": {
        "email": {
          "description": "email of the source control user",
          "type": "string"
        },
        "name": {
          "description": "name of the source control user",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.SourceRevision": {
      "description": "SourceRevision is the revision or commit information from the source for the build",
      "properties": {
        "git": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.GitSourceRevision"
            }
          ],
          "description": "Git contains information about git-based build source"
        },
        "type": {
          "default": "",
          "description": "type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "com.github.openshift.api.build.v1.SourceStrategyOptions": {
      "description": "SourceStrategyOptions contains extra strategy options for Source builds",
      "properties": {
        "incremental": {
          "description": "incremental overrides the source-strategy incremental option in the build config",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.StageInfo": {
      "description": "StageInfo contains details about a build stage.",
      "properties": {
        "durationMilliseconds": {
          "description": "durationMilliseconds identifies how long the stage took to complete in milliseconds. Note: the duration of a stage can exceed the sum of the duration of the steps within the stage as not all actions are accounted for in explicit build steps.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "name is a unique identifier for each build stage that occurs.",
          "type": "string"
        },
        "startTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "startTime is a timestamp representing the server time when this Stage started. It is represented in RFC3339 form and is in UTC."
        },
        "steps": {
          "description": "steps contains details about each step that occurs during a build stage including start time and duration in milliseconds.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.build.v1.StepInfo"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.StepInfo": {
      "description": "StepInfo contains details about a build step.",
      "properties": {
        "durationMilliseconds": {
          "description": "durationMilliseconds identifies how long the step took to complete in milliseconds.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "name is a unique identifier for each build step.",
          "type": "string"
        },
        "startTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "startTime is a timestamp representing the server time when this Step started. it is represented in RFC3339 form and is in UTC."
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.build.v1.WebHookTrigger": {
      "description": "WebHookTrigger is a trigger that gets invoked using a webhook type of post",
      "properties": {
        "allowEnv": {
          "description": "allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook.",
          "type": "boolean"
        },
        "secret": {
          "description": "secret used to validate requests. Deprecated: use SecretReference instead.",
          "type": "string"
        },
        "secretReference": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.build.v1.SecretLocalReference"
            }
          ],
          "description": "secretReference is a reference to a secret in the same namespace, containing the value to be validated when the webhook is invoked. The secret being referenced must contain a key named \"WebHookSecretKey\", the value of which will be checked against the value supplied in the webhook invocation."
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.image.v1.ImageBlobReferences": {
      "description": "ImageBlobReferences describes the blob references within an image.",
      "properties": {
        "config": {
          "description": "config, if set, is the blob that contains the image config. Some images do not have separate config blobs and this field will be set to nil if so.",
          "type": "string"
        },
        "imageMissing": {
          "default": false,
          "description": "imageMissing is true if the image is referenced by the image stream but the image object has been deleted from the API by an administrator. When this field is set, layers and config fields may be empty and callers that depend on the image metadata should consider the image to be unavailable for download or viewing.",
          "type": "boolean"
        },
        "layers": {
          "description": "layers is the list of blobs that compose this image, from base layer to top layer. All layers referenced by this array will be defined in the blobs map. Some images may have zero layers.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "manifests": {
          "description": "manifests is the list of other image names that this image points to. For a single architecture image, it is empty. For a multi-arch image, it consists of the digests of single architecture images, such images shouldn't have layers nor config.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.image.v1.ImageImportSpec": {
      "description": "ImageImportSpec describes a request to import a specific image.",
      "properties": {
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "From is the source of an image to import; only kind DockerImage is allowed"
        },
        "importPolicy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.image.v1.TagImportPolicy"
            }
          ],
          "default": {},
          "description": "ImportPolicy is the policy controlling how the image is imported"
        },
        "includeManifest": {
          "description": "IncludeManifest determines if the manifest for each image is returned in the response",
          "type": "boolean"
        },
        "referencePolicy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.image.v1.TagReferencePolicy"
            }
          ],
          "default": {},
          "description": "ReferencePolicy defines how other components should consume the image"
        },
        "to": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "To is a tag in the current image stream to assign the imported image to, if name is not specified the default tag from from.name will be used"
        }
      },
      "required": [
        "from"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.ImageImportStatus": {
      "description": "ImageImportStatus describes the result of an image import.",
      "properties": {
        "image": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.image.v1.Image"
            }
          ],
          "description": "Image is the metadata of that image, if the image was located"
        },
        "manifests": {
          "description": "Manifests holds sub-manifests metadata when importing a manifest list",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.image.v1.Image"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          ],
          "default": {},
          "description": "Status is the status of the image import, including errors encountered while retrieving the image"
        },
        "tag": {
          "description": "Tag is the tag this image was located under, if any",
          "type": "string"
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.ImageLayer": {
      "description": "ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.",
      "properties": {
        "mediaType": {
          "default": "",
          "description": "MediaType of the referenced object.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name of the layer as defined by the underlying store.",
          "type": "string"
        },
        "size": {
          "default": 0,
          "description": "Size of the layer in bytes as defined by the underlying store.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "size",
        "mediaType"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.ImageLayerData": {
      "description": "ImageLayerData contains metadata about an image layer.",
      "properties": {
        "mediaType": {
          "default": "",
          "description": "MediaType of the referenced object.",
          "type": "string"
        },
        "size": {
          "description": "Size of the layer in bytes as defined by the underlying store. This field is optional if the necessary information about size is not available.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "size",
        "mediaType"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.ImageLookupPolicy": {
      "description": "ImageLookupPolicy describes how an image stream can be used to override the image references used by pods, builds, and other resources in a namespace.",
      "properties": {
        "local": {
          "default": false,
          "description": "local will change the docker short image references (like \"mysql\" or \"php:latest\") on objects in this namespace to the image ID whenever they match this image stream, instead of reaching out to a remote registry. The name will be fully qualified to an image ID if found. The tag's referencePolicy is taken into account on the replaced value. Only works within the current namespace.",
          "type": "boolean"
        }
      },
      "required": [
        "local"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.ImageManifest": {
      "description": "ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.",
      "properties": {
        "architecture": {
          "default": "",
          "description": "Architecture specifies the supported CPU architecture, for example `amd64` or `ppc64le`.",
          "type": "string"
        },
        "digest": {
          "default": "",
          "description": "Digest is the unique identifier for the manifest. It refers to an Image object.",
          "type": "string"
        },
        "manifestSize": {
          "default": 0,
          "description": "ManifestSize represents the size of the raw object contents, in bytes.",
          "format": "int64",
          "type": "integer"
        },
        "mediaType": {
          "default": "",
          "description": "MediaType defines the type of the manifest, possible values are application/vnd.oci.image.manifest.v1+json, application/vnd.docker.distribution.manifest.v2+json or application/vnd.docker.distribution.manifest.v1+json.",
          "type": "string"
        },
        "os": {
          "default": "",
          "description": "OS specifies the operating system, for example `linux`.",
          "type": "string"
        },
        "variant": {
          "description": "Variant is an optional field repreenting a variant of the CPU, for example v6 to specify a particular CPU variant of the ARM CPU.",
          "type": "string"
        }
      },
      "required": [
        "digest",
        "mediaType",
        "manifestSize",
        "architecture",
        "os"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.ImageStreamImportSpec": {
      "description": "ImageStreamImportSpec defines what images should be imported.",
      "properties": {
        "images": {
          "description": "Images are a list of individual images to import.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.image.v1.ImageImportSpec"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "import": {
          "default": false,
          "description": "Import indicates whether to perform an import - if so, the specified tags are set on the spec and status of the image stream defined by the type meta.",
          "type": "boolean"
        },
        "repository": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.image.v1.RepositoryImportSpec"
            }
          ],
          "description": "Repository is an optional import of an entire container image repository. A maximum limit on the number of tags imported this way is imposed by the server."
        }
      },
      "required": [
        "import"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.ImageStreamImportStatus": {
      "description": "ImageStreamImportStatus contains information about the status of an image stream import.",
      "properties": {
        "images": {
          "description": "Images is set with the result of importing spec.images",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.image.v1.ImageImportStatus"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "import": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.image.v1.ImageStream"
            }
          ],
          "description": "Import is the image stream that was successfully updated or created when 'to' was set."
        },
        "repository": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.image.v1.RepositoryImportStatus"
            }
          ],
          "description": "Repository is set if spec.repository was set to the outcome of the import"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.image.v1.ImageStreamSpec": {
      "description": "ImageStreamSpec represents options for ImageStreams.",
      "properties": {
        "dockerImageRepository": {
          "description": "dockerImageRepository is optional, if specified this stream is backed by a container repository on this server Deprecated: This field is deprecated as of v3.7 and will be removed in a future release. Specify the source for the tags to be imported in each tag via the spec.tags.from reference instead.",
          "type": "string"
        },
        "lookupPolicy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.image.v1.ImageLookupPolicy"
            }
          ],
          "default": {},
          "description": "lookupPolicy controls how other resources reference images within this namespace."
        },
        "tags": {
          "description": "tags map arbitrary string values to specific image locators",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.image.v1.TagReference"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.image.v1.ImageStreamStatus": {
      "description": "ImageStreamStatus contains information about the state of this image stream.",
      "properties": {
        "dockerImageRepository": {
          "default": "",
          "description": "DockerImageRepository represents the effective location this stream may be accessed at. May be empty until the server determines where the repository is located",
          "type": "string"
        },
        "publicDockerImageRepository": {
          "description": "PublicDockerImageRepository represents the public location from where the image can be pulled outside the cluster. This field may be empty if the administrator has not exposed the integrated registry externally.",
          "type": "string"
        },
        "tags": {
          "description": "Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.image.v1.NamedTagEventList"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "tag",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "dockerImageRepository"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.NamedTagEventList": {
      "description": "NamedTagEventList relates a tag to its image history.",
      "properties": {
        "conditions": {
          "description": "Conditions is an array of conditions that apply to the tag event list.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.image.v1.TagEventCondition"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "items": {
          "description": "Standard object's metadata.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.image.v1.TagEvent"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "tag": {
          "default": "",
          "description": "Tag is the tag for which the history is recorded",
          "type": "string"
        }
      },
      "required": [
        "tag",
        "items"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.RepositoryImportSpec": {
      "description": "RepositoryImportSpec describes a request to import images from a container image repository.",
      "properties": {
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "From is the source for the image repository to import; only kind DockerImage and a name of a container image repository is allowed"
        },
        "importPolicy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.image.v1.TagImportPolicy"
            }
          ],
          "default": {},
          "description": "ImportPolicy is the policy controlling how the image is imported"
        },
        "includeManifest": {
          "description": "IncludeManifest determines if the manifest for each image is returned in the response",
          "type": "boolean"
        },
        "referencePolicy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.image.v1.TagReferencePolicy"
            }
          ],
          "default": {},
          "description": "ReferencePolicy defines how other components should consume the image"
        }
      },
      "required": [
        "from"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.RepositoryImportStatus": {
      "description": "RepositoryImportStatus describes the result of an image repository import",
      "properties": {
        "additionalTags": {
          "description": "AdditionalTags are tags that exist in the repository but were not imported because a maximum limit of automatic imports was applied.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "images": {
          "description": "Images is a list of images successfully retrieved by the import of the repository.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.image.v1.ImageImportStatus"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          ],
          "default": {},
          "description": "Status reflects whether any failure occurred during import"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.image.v1.SignatureCondition": {
      "description": "SignatureCondition describes an image signature condition of particular kind at particular probe time.",
      "properties": {
        "lastProbeTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time the condition was checked."
        },
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time the condition transit from one status to another."
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of signature condition, Complete or Failed.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.SignatureIssuer": {
      "description": "SignatureIssuer holds information about an issuer of signing certificate or key.",
      "properties": {
        "commonName": {
          "description": "Common name (e.g. openshift-signing-service).",
          "type": "string"
        },
        "organization": {
          "description": "Organization name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.image.v1.SignatureSubject": {
      "description": "SignatureSubject holds information about a person or entity who created the signature.",
      "properties": {
        "commonName": {
          "description": "Common name (e.g. openshift-signing-service).",
          "type": "string"
        },
        "organization": {
          "description": "Organization name.",
          "type": "string"
        },
        "publicKeyID": {
          "default": "",
          "description": "If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).",
          "type": "string"
        }
      },
      "required": [
        "publicKeyID"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.TagEvent": {
      "description": "TagEvent is used by ImageStreamStatus to keep a historical record of images associated with a tag.",
      "properties": {
        "created": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Created holds the time the TagEvent was created"
        },
        "dockerImageReference": {
          "default": "",
          "description": "DockerImageReference is the string that can be used to pull this image",
          "type": "string"
        },
        "generation": {
          "default": 0,
          "description": "Generation is the spec tag generation that resulted in this tag being updated",
          "format": "int64",
          "type": "integer"
        },
        "image": {
          "default": "",
          "description": "Image is the image",
          "type": "string"
        }
      },
      "required": [
        "created",
        "dockerImageReference",
        "image",
        "generation"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.TagEventCondition": {
      "description": "TagEventCondition contains condition information for a tag event.",
      "properties": {
        "generation": {
          "default": 0,
          "description": "Generation is the spec tag generation that this status corresponds to",
          "format": "int64",
          "type": "integer"
        },
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "LastTransitionTIme is the time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Message is a human readable description of the details about last transition, complementing reason.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is a brief machine readable explanation for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of tag event condition, currently only ImportSuccess",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status",
        "generation"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.TagImportPolicy": {
      "description": "TagImportPolicy controls how images related to this tag will be imported.",
      "properties": {
        "importMode": {
          "description": "ImportMode describes how to import an image manifest.",
          "type": "string"
        },
        "insecure": {
          "description": "Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.",
          "type": "boolean"
        },
        "scheduled": {
          "description": "Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.image.v1.TagReference": {
      "description": "TagReference specifies optional annotations for images using this tag and an optional reference to an ImageStreamTag, ImageStreamImage, or DockerImage this tag should track.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Optional; if specified, annotations that are applied to images retrieved via ImageStreamTags.",
          "type": "object"
        },
        "from": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "Optional; if specified, a reference to another image that this tag should point to. Valid values are ImageStreamTag, ImageStreamImage, and DockerImage.  ImageStreamTag references can only reference a tag within this same ImageStream."
        },
        "generation": {
          "description": "Generation is a counter that tracks mutations to the spec tag (user intent). When a tag reference is changed the generation is set to match the current stream generation (which is incremented every time spec is changed). Other processes in the system like the image importer observe that the generation of spec tag is newer than the generation recorded in the status and use that as a trigger to import the newest remote tag. To trigger a new import, clients may set this value to zero which will reset the generation to the latest stream generation. Legacy clients will send this value as nil which will be merged with the current tag generation.",
          "format": "int64",
          "type": "integer"
        },
        "importPolicy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.image.v1.TagImportPolicy"
            }
          ],
          "default": {},
          "description": "ImportPolicy is information that controls how images may be imported by the server."
        },
        "name": {
          "default": "",
          "description": "Name of the tag",
          "type": "string"
        },
        "reference": {
          "description": "Reference states if the tag will be imported. Default value is false, which means the tag will be imported.",
          "type": "boolean"
        },
        "referencePolicy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.image.v1.TagReferencePolicy"
            }
          ],
          "default": {},
          "description": "ReferencePolicy defines how other components should consume the image."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.openshift.api.image.v1.TagReferencePolicy": {
      "description": "TagReferencePolicy describes how pull-specs for images in this image stream tag are generated when image change triggers in deployment configs or builds are resolved. This allows the image stream author to control how images are accessed.",
      "properties": {
        "type": {
          "default": "",
          "description": "Type determines how the image pull spec should be transformed when the image stream tag is used in deployment config triggers or new builds. The default value is `Source`, indicating the original location of the image should be used (if imported). The user may also specify `Local`, indicating that the pull spec should point to the integrated container image registry and leverage the registry's ability to proxy the pull to an upstream registry. `Local` allows the credentials used to pull this image to be managed from the image stream's namespace, so others on the platform can access a remote image but have no access to the remote secret. It also allows the image layers to be mirrored into the local registry which the images can still be pulled even if the upstream registry is unavailable.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "com.github.openshift.api.oauth.v1.ClusterRoleScopeRestriction": {
      "description": "ClusterRoleScopeRestriction describes restrictions on cluster role scopes",
      "properties": {
        "allowEscalation": {
          "default": false,
          "description": "AllowEscalation indicates whether you can request roles and their escalating resources",
          "type": "boolean"
        },
        "namespaces": {
          "description": "Namespaces is the list of namespaces that can be referenced.  * means any of them (including *)",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "roleNames": {
          "description": "RoleNames is the list of cluster roles that can referenced.  * means anything",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "roleNames",
        "namespaces",
        "allowEscalation"
      ],
      "type": "object"
    },
    "com.github.openshift.api.oauth.v1.ScopeRestriction": {
      "description": "ScopeRestriction describe one restriction on scopes.  Exactly one option must be non-nil.",
      "properties": {
        "clusterRole": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.oauth.v1.ClusterRoleScopeRestriction"
            }
          ],
          "description": "ClusterRole describes a set of restrictions for cluster role scoping."
        },
        "literals": {
          "description": "ExactValues means the scope has to match a particular set of strings exactly",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.project.v1.ProjectSpec": {
      "description": "ProjectSpec describes the attributes on a Project",
      "properties": {
        "finalizers": {
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.project.v1.ProjectStatus": {
      "description": "ProjectStatus is information about the current status of a Project",
      "properties": {
        "conditions": {
          "description": "Represents the latest available observations of the project current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NamespaceCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "Phase is the current lifecycle phase of the project\n\nPossible enum values:\n - `\"Active\"` means the namespace is available for use in the system\n - `\"Terminating\"` means the namespace is undergoing graceful termination",
          "enum": [
            "Active",
            "Terminating"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.quota.v1.ClusterResourceQuotaSelector": {
      "description": "ClusterResourceQuotaSelector is used to select projects.  At least one of LabelSelector or AnnotationSelector must present.  If only one is present, it is the only selection criteria.  If both are specified, the project must match both restrictions.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "AnnotationSelector is used to select projects by annotation.",
          "type": "object"
        },
        "labels": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "LabelSelector is used to select projects by label."
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.quota.v1.ClusterResourceQuotaSpec": {
      "description": "ClusterResourceQuotaSpec defines the desired quota restrictions",
      "properties": {
        "quota": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaSpec"
            }
          ],
          "default": {},
          "description": "Quota defines the desired quota"
        },
        "selector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.quota.v1.ClusterResourceQuotaSelector"
            }
          ],
          "default": {},
          "description": "Selector is the selector used to match projects. It should only select active projects on the scale of dozens (though it can select many more less active projects).  These projects will contend on object creation through this resource."
        }
      },
      "required": [
        "selector",
        "quota"
      ],
      "type": "object"
    },
    "com.github.openshift.api.quota.v1.ClusterResourceQuotaStatus": {
      "description": "ClusterResourceQuotaStatus defines the actual enforced quota and its current usage",
      "properties": {
        "namespaces": {
          "description": "Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconciliation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.quota.v1.ResourceQuotaStatusByNamespace"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "total": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaStatus"
            }
          ],
          "default": {},
          "description": "Total defines the actual enforced quota and its current usage across all projects"
        }
      },
      "required": [
        "total"
      ],
      "type": "object"
    },
    "com.github.openshift.api.quota.v1.ResourceQuotaStatusByNamespace": {
      "description": "ResourceQuotaStatusByNamespace gives status for a particular project",
      "properties": {
        "namespace": {
          "default": "",
          "description": "Namespace the project this status applies to",
          "type": "string"
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaStatus"
            }
          ],
          "default": {},
          "description": "Status indicates how many resources have been consumed by this project"
        }
      },
      "required": [
        "namespace",
        "status"
      ],
      "type": "object"
    },
    "com.github.openshift.api.route.v1.LocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "properties": {
        "name": {
          "description": "name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "com.github.openshift.api.route.v1.RouteHTTPHeader": {
      "description": "RouteHTTPHeader specifies configuration for setting or deleting an HTTP header.",
      "properties": {
        "action": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.route.v1.RouteHTTPHeaderActionUnion"
            }
          ],
          "default": {},
          "description": "action specifies actions to perform on headers, such as setting or deleting headers."
        },
        "name": {
          "default": "",
          "description": "name specifies the name of a header on which to perform an action. Its value must be a valid HTTP header name as defined in RFC 2616 section 4.2. The name must consist only of alphanumeric and the following special characters, \"-!#$%&'*+.^_`\". The following header names are reserved and may not be modified via this API: Strict-Transport-Security, Proxy, Cookie, Set-Cookie. It must be no more than 255 characters in length. Header name must be unique.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "action"
      ],
      "type": "object"
    },
    "com.github.openshift.api.route.v1.RouteHTTPHeaderActionUnion": {
      "description": "RouteHTTPHeaderActionUnion specifies an action to take on an HTTP header.",
      "properties": {
        "set": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.route.v1.RouteSetHTTPHeader"
            }
          ],
          "description": "set defines the HTTP header that should be set: added if it doesn't exist or replaced if it does. This field is required when type is Set and forbidden otherwise."
        },
        "type": {
          "default": "",
          "description": "type defines the type of the action to be applied on the header. Possible values are Set or Delete. Set allows you to set HTTP request and response headers. Delete allows you to delete HTTP request and response headers.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "set": "Set"
          }
        }
      ]
    },
    "com.github.openshift.api.route.v1.RouteHTTPHeaderActions": {
      "description": "RouteHTTPHeaderActions defines configuration for actions on HTTP request and response headers.",
      "properties": {
        "request": {
          "description": "request is a list of HTTP request headers to modify. Currently, actions may define to either `Set` or `Delete` headers values. Actions defined here will modify the request headers of all requests made through a route. These actions are applied to a specific Route defined within a cluster i.e. connections made through a route. Currently, actions may define to either `Set` or `Delete` headers values. Route actions will be executed after IngressController actions for request headers. Actions are applied in sequence as defined in this list. A maximum of 20 request header actions may be configured. You can use this field to specify HTTP request headers that should be set or deleted when forwarding connections from the client to your application. Sample fetchers allowed are \"req.hdr\" and \"ssl_c_der\". Converters allowed are \"lower\" and \"base64\". Example header values: \"%[req.hdr(X-target),lower]\", \"%{+Q}[ssl_c_der,base64]\". Any request header configuration applied directly via a Route resource using this API will override header configuration for a header of the same name applied via spec.httpHeaders.actions on the IngressController or route annotation. Note: This field cannot be used if your route uses TLS passthrough.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.route.v1.RouteHTTPHeader"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "response": {
          "description": "response is a list of HTTP response headers to modify. Currently, actions may define to either `Set` or `Delete` headers values. Actions defined here will modify the response headers of all requests made through a route. These actions are applied to a specific Route defined within a cluster i.e. connections made through a route. Route actions will be executed before IngressController actions for response headers. Actions are applied in sequence as defined in this list. A maximum of 20 response header actions may be configured. You can use this field to specify HTTP response headers that should be set or deleted when forwarding responses from your application to the client. Sample fetchers allowed are \"res.hdr\" and \"ssl_c_der\". Converters allowed are \"lower\" and \"base64\". Example header values: \"%[res.hdr(X-target),lower]\", \"%{+Q}[ssl_c_der,base64]\". Note: This field cannot be used if your route uses TLS passthrough.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.route.v1.RouteHTTPHeader"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.route.v1.RouteHTTPHeaders": {
      "description": "RouteHTTPHeaders defines policy for HTTP headers.",
      "properties": {
        "actions": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.route.v1.RouteHTTPHeaderActions"
            }
          ],
          "default": {},
          "description": "actions specifies options for modifying headers and their values. Note that this option only applies to cleartext HTTP connections and to secure HTTP connections for which the ingress controller terminates encryption (that is, edge-terminated or reencrypt connections).  Headers cannot be modified for TLS passthrough connections. Setting the HSTS (`Strict-Transport-Security`) header is not supported via actions. `Strict-Transport-Security` may only be configured using the \"haproxy.router.openshift.io/hsts_header\" route annotation, and only in accordance with the policy specified in Ingress.Spec.RequiredHSTSPolicies. In case of HTTP request headers, the actions specified in spec.httpHeaders.actions on the Route will be executed after the actions specified in the IngressController's spec.httpHeaders.actions field. In case of HTTP response headers, the actions specified in spec.httpHeaders.actions on the IngressController will be executed after the actions specified in the Route's spec.httpHeaders.actions field. The headers set via this API will not appear in access logs. Any actions defined here are applied after any actions related to the following other fields: cache-control, spec.clientTLS, spec.httpHeaders.forwardedHeaderPolicy, spec.httpHeaders.uniqueId, and spec.httpHeaders.headerNameCaseAdjustments. The following header names are reserved and may not be modified via this API: Strict-Transport-Security, Proxy, Cookie, Set-Cookie. Note that the total size of all net added headers *after* interpolating dynamic values must not exceed the value of spec.tuningOptions.headerBufferMaxRewriteBytes on the IngressController. Please refer to the documentation for that API field for more details."
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.route.v1.RouteIngress": {
      "description": "RouteIngress holds information about the places where a route is exposed.",
      "properties": {
        "conditions": {
          "description": "Conditions is the state of the route, may be empty.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.route.v1.RouteIngressCondition"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "host": {
          "description": "Host is the host string under which the route is exposed; this value is required",
          "type": "string"
        },
        "routerCanonicalHostname": {
          "description": "CanonicalHostname is the external host name for the router that can be used as a CNAME for the host requested for this route. This value is optional and may not be set in all cases.",
          "type": "string"
        },
        "routerName": {
          "description": "Name is a name chosen by the router to identify itself; this value is required",
          "type": "string"
        },
        "wildcardPolicy": {
          "description": "Wildcard policy is the wildcard policy that was allowed where this route is exposed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.route.v1.RouteIngressCondition": {
      "description": "RouteIngressCondition contains details for the current condition of this route on a particular router.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "RFC 3339 date and time when this condition last transitioned"
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition, and is usually a machine and human readable constant",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type is the type of the condition. Currently only Admitted or UnservableInFutureVersions.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "com.github.openshift.api.route.v1.RoutePort": {
      "description": "RoutePort defines a port mapping from a router to an endpoint in the service endpoints.",
      "properties": {
        "targetPort": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "The target port on pods selected by the service this route points to. If this is a string, it will be looked up as a named port in the target endpoints port list. Required"
        }
      },
      "required": [
        "targetPort"
      ],
      "type": "object"
    },
    "com.github.openshift.api.route.v1.RouteSetHTTPHeader": {
      "description": "RouteSetHTTPHeader specifies what value needs to be set on an HTTP header.",
      "properties": {
        "value": {
          "default": "",
          "description": "value specifies a header value. Dynamic values can be added. The value will be interpreted as an HAProxy format string as defined in http://cbonte.github.io/haproxy-dconv/2.6/configuration.html#8.2.6 and may use HAProxy's %[] syntax and otherwise must be a valid HTTP header value as defined in https://datatracker.ietf.org/doc/html/rfc7230#section-3.2. The value of this field must be no more than 16384 characters in length. Note that the total size of all net added headers *after* interpolating dynamic values must not exceed the value of spec.tuningOptions.headerBufferMaxRewriteBytes on the IngressController.",
          "type": "string"
        }
      },
      "required": [
        "value"
      ],
      "type": "object"
    },
    "com.github.openshift.api.route.v1.RouteSpec": {
      "description": "RouteSpec describes the hostname or path the route exposes, any security information, and one to four backends (services) the route points to. Requests are distributed among the backends depending on the weights assigned to each backend. When using roundrobin scheduling the portion of requests that go to each backend is the backend weight divided by the sum of all of the backend weights. When the backend has more than one endpoint the requests that end up on the backend are roundrobin distributed among the endpoints. Weights are between 0 and 256 with default 100. Weight 0 causes no requests to the backend. If all weights are zero the route will be considered to have no backends and return a standard 503 response.\n\nThe `tls` field is optional and allows specific certificates or behavior for the route. Routers typically configure a default certificate on a wildcard domain to terminate routes without explicit certificates, but custom hostnames usually must choose passthrough (send traffic directly to the backend via the TLS Server-Name- Indication field) or provide a certificate.",
      "properties": {
        "alternateBackends": {
          "description": "alternateBackends allows up to 3 additional backends to be assigned to the route. Only the Service kind is allowed, and it will be defaulted to Service. Use the weight field in RouteTargetReference object to specify relative preference.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.route.v1.RouteTargetReference"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "host": {
          "description": "host is an alias/DNS that points to the service. Optional. If not specified a route name will typically be automatically chosen. Must follow DNS952 subdomain conventions.",
          "type": "string"
        },
        "httpHeaders": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.route.v1.RouteHTTPHeaders"
            }
          ],
          "description": "httpHeaders defines policy for HTTP headers."
        },
        "path": {
          "description": "path that the router watches for, to route traffic for to the service. Optional",
          "type": "string"
        },
        "port": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.route.v1.RoutePort"
            }
          ],
          "description": "If specified, the port to be used by the router. Most routers will use all endpoints exposed by the service by default - set this value to instruct routers which port to use."
        },
        "subdomain": {
          "description": "subdomain is a DNS subdomain that is requested within the ingress controller's domain (as a subdomain). If host is set this field is ignored. An ingress controller may choose to ignore this suggested name, in which case the controller will report the assigned name in the status.ingress array or refuse to admit the route. If this value is set and the server does not support this field host will be populated automatically. Otherwise host is left empty. The field may have multiple parts separated by a dot, but not all ingress controllers may honor the request. This field may not be changed after creation except by a user with the update routes/custom-host permission.\n\nExample: subdomain `frontend` automatically receives the router subdomain `apps.mycluster.com` to have a full hostname `frontend.apps.mycluster.com`.",
          "type": "string"
        },
        "tls": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.route.v1.TLSConfig"
            }
          ],
          "description": "The tls field provides the ability to configure certificates and termination for the route."
        },
        "to": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.route.v1.RouteTargetReference"
            }
          ],
          "default": {},
          "description": "to is an object the route should use as the primary backend. Only the Service kind is allowed, and it will be defaulted to Service. If the weight field (0-256 default 100) is set to zero, no traffic will be sent to this backend."
        },
        "wildcardPolicy": {
          "description": "Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.",
          "type": "string"
        }
      },
      "required": [
        "to"
      ],
      "type": "object"
    },
    "com.github.openshift.api.route.v1.RouteStatus": {
      "description": "RouteStatus provides relevant info about the status of a route, including which routers acknowledge it.",
      "properties": {
        "ingress": {
          "description": "ingress describes the places where the route may be exposed. The list of ingress points may contain duplicate Host or RouterName values. Routes are considered live once they are `Ready`",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.route.v1.RouteIngress"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.route.v1.RouteTargetReference": {
      "description": "RouteTargetReference specifies the target that resolve into endpoints. Only the 'Service' kind is allowed. Use 'weight' field to emphasize one over others.",
      "properties": {
        "kind": {
          "default": "",
          "description": "The kind of target that the route is referring to. Currently, only 'Service' is allowed",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name of the service/target that is being referred to. e.g. name of the service",
          "type": "string"
        },
        "weight": {
          "description": "weight as an integer between 0 and 256, default 100, that specifies the target's relative weight against other target reference objects. 0 suppresses requests to this backend.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "com.github.openshift.api.route.v1.TLSConfig": {
      "description": "TLSConfig defines config used to secure a route and provide termination",
      "properties": {
        "caCertificate": {
          "description": "caCertificate provides the cert authority certificate contents",
          "type": "string"
        },
        "certificate": {
          "description": "certificate provides certificate contents. This should be a single serving certificate, not a certificate chain. Do not include a CA certificate.",
          "type": "string"
        },
        "destinationCACertificate": {
          "description": "destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.",
          "type": "string"
        },
        "externalCertificate": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.route.v1.LocalObjectReference"
            }
          ],
          "description": "externalCertificate provides certificate contents as a secret reference. This should be a single serving certificate, not a certificate chain. Do not include a CA certificate. The secret referenced should be present in the same namespace as that of the Route. Forbidden when `certificate` is set."
        },
        "insecureEdgeTerminationPolicy": {
          "description": "insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.\n\nIf a route does not specify insecureEdgeTerminationPolicy, then the default behavior is \"None\".\n\n* Allow - traffic is sent to the server on the insecure port (edge/reencrypt terminations only).\n\n* None - no traffic is allowed on the insecure port (default).\n\n* Redirect - clients are redirected to the secure port.",
          "type": "string"
        },
        "key": {
          "description": "key provides key file contents",
          "type": "string"
        },
        "termination": {
          "default": "",
          "description": "termination indicates termination type.\n\n* edge - TLS termination is done by the router and http is used to communicate with the backend (default) * passthrough - Traffic is sent straight to the destination without the router providing TLS termination * reencrypt - TLS termination is done by the router and https is used to communicate with the backend\n\nNote: passthrough termination is incompatible with httpHeader actions",
          "type": "string"
        }
      },
      "required": [
        "termination"
      ],
      "type": "object"
    },
    "com.github.openshift.api.security.v1.AllowedFlexVolume": {
      "description": "AllowedFlexVolume represents a single Flexvolume that is allowed to be used.",
      "properties": {
        "driver": {
          "default": "",
          "description": "Driver is the name of the Flexvolume driver.",
          "type": "string"
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "com.github.openshift.api.security.v1.FSGroupStrategyOptions": {
      "description": "FSGroupStrategyOptions defines the strategy type and options used to create the strategy.",
      "properties": {
        "ranges": {
          "description": "Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.security.v1.IDRange"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "type": {
          "description": "Type is the strategy that will dictate what FSGroup is used in the SecurityContext.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.security.v1.IDRange": {
      "description": "IDRange provides a min/max of an allowed range of IDs.",
      "properties": {
        "max": {
          "description": "Max is the end of the range, inclusive.",
          "format": "int64",
          "type": "integer"
        },
        "min": {
          "description": "Min is the start of the range, inclusive.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicyReviewSpec": {
      "description": "PodSecurityPolicyReviewSpec defines specification for PodSecurityPolicyReview",
      "properties": {
        "serviceAccountNames": {
          "description": "serviceAccountNames is an optional set of ServiceAccounts to run the check with. If serviceAccountNames is empty, the template.spec.serviceAccountName is used, unless it's empty, in which case \"default\" is used instead. If serviceAccountNames is specified, template.spec.serviceAccountName is ignored.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "default": {},
          "description": "template is the PodTemplateSpec to check. The template.spec.serviceAccountName field is used if serviceAccountNames is empty, unless the template.spec.serviceAccountName is empty, in which case \"default\" is used. If serviceAccountNames is specified, template.spec.serviceAccountName is ignored."
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicyReviewStatus": {
      "description": "PodSecurityPolicyReviewStatus represents the status of PodSecurityPolicyReview.",
      "properties": {
        "allowedServiceAccounts": {
          "description": "allowedServiceAccounts returns the list of service accounts in *this* namespace that have the power to create the PodTemplateSpec.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.security.v1.ServiceAccountPodSecurityPolicyReviewStatus"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "allowedServiceAccounts"
      ],
      "type": "object"
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySelfSubjectReviewSpec": {
      "description": "PodSecurityPolicySelfSubjectReviewSpec contains specification for PodSecurityPolicySelfSubjectReview.",
      "properties": {
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "default": {},
          "description": "template is the PodTemplateSpec to check."
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewSpec": {
      "description": "PodSecurityPolicySubjectReviewSpec defines specification for PodSecurityPolicySubjectReview",
      "properties": {
        "groups": {
          "description": "groups is the groups you're testing for.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "default": {},
          "description": "template is the PodTemplateSpec to check. If template.spec.serviceAccountName is empty it will not be defaulted. If its non-empty, it will be checked."
        },
        "user": {
          "description": "user is the user you're testing for. If you specify \"user\" but not \"group\", then is it interpreted as \"What if user were not a member of any groups. If user and groups are empty, then the check is performed using *only* the serviceAccountName in the template.",
          "type": "string"
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewStatus": {
      "description": "PodSecurityPolicySubjectReviewStatus contains information/status for PodSecurityPolicySubjectReview.",
      "properties": {
        "allowedBy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "allowedBy is a reference to the rule that allows the PodTemplateSpec. A rule can be a SecurityContextConstraint or a PodSecurityPolicy A `nil`, indicates that it was denied."
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available.",
          "type": "string"
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "default": {},
          "description": "template is the PodTemplateSpec after the defaulting is applied."
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.security.v1.RunAsUserStrategyOptions": {
      "description": "RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.",
      "properties": {
        "type": {
          "description": "Type is the strategy that will dictate what RunAsUser is used in the SecurityContext.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the user id that containers must run as.  Required for the MustRunAs strategy if not using namespace/service account allocated uids.",
          "format": "int64",
          "type": "integer"
        },
        "uidRangeMax": {
          "description": "UIDRangeMax defines the max value for a strategy that allocates by range.",
          "format": "int64",
          "type": "integer"
        },
        "uidRangeMin": {
          "description": "UIDRangeMin defines the min value for a strategy that allocates by range.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.security.v1.SELinuxContextStrategyOptions": {
      "description": "SELinuxContextStrategyOptions defines the strategy type and any options used to create the strategy.",
      "properties": {
        "seLinuxOptions": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SELinuxOptions"
            }
          ],
          "description": "seLinuxOptions required to run as; required for MustRunAs"
        },
        "type": {
          "description": "Type is the strategy that will dictate what SELinux context is used in the SecurityContext.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.security.v1.ServiceAccountPodSecurityPolicyReviewStatus": {
      "description": "ServiceAccountPodSecurityPolicyReviewStatus represents ServiceAccount name and related review status",
      "properties": {
        "allowedBy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "allowedBy is a reference to the rule that allows the PodTemplateSpec. A rule can be a SecurityContextConstraint or a PodSecurityPolicy A `nil`, indicates that it was denied."
        },
        "name": {
          "default": "",
          "description": "name contains the allowed and the denied ServiceAccount name",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available.",
          "type": "string"
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "default": {},
          "description": "template is the PodTemplateSpec after the defaulting is applied."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.openshift.api.security.v1.SupplementalGroupsStrategyOptions": {
      "description": "SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.",
      "properties": {
        "ranges": {
          "description": "Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.security.v1.IDRange"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "type": {
          "description": "Type is the strategy that will dictate what supplemental groups is used in the SecurityContext.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.template.v1.BrokerTemplateInstanceSpec": {
      "description": "BrokerTemplateInstanceSpec describes the state of a BrokerTemplateInstance.",
      "properties": {
        "bindingIDs": {
          "description": "bindingids is a list of 'binding_id's provided during successive bind calls to the template service broker.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "secret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "secret is a reference to a Secret object residing in a namespace, containing the necessary template parameters."
        },
        "templateInstance": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "templateinstance is a reference to a TemplateInstance object residing in a namespace."
        }
      },
      "required": [
        "templateInstance",
        "secret"
      ],
      "type": "object"
    },
    "com.github.openshift.api.template.v1.Parameter": {
      "description": "Parameter defines a name/value variable that is to be processed during the Template to Config transformation.",
      "properties": {
        "description": {
          "description": "Description of a parameter. Optional.",
          "type": "string"
        },
        "displayName": {
          "description": "Optional: The name that will show in UI instead of parameter 'Name'",
          "type": "string"
        },
        "from": {
          "description": "From is an input value for the generator. Optional.",
          "type": "string"
        },
        "generate": {
          "description": "generate specifies the generator to be used to generate random string from an input value specified by From field. The result string is stored into Value field. If empty, no generator is being used, leaving the result Value untouched. Optional.\n\nThe only supported generator is \"expression\", which accepts a \"from\" value in the form of a simple regular expression containing the range expression \"[a-zA-Z0-9]\", and the length expression \"a{length}\".\n\nExamples:\n\nfrom             | value ----------------------------- \"test[0-9]{1}x\"  | \"test7x\" \"[0-1]{8}\"       | \"01001100\" \"0x[A-F0-9]{4}\"  | \"0xB3AF\" \"[a-zA-Z0-9]{8}\" | \"hW4yQU5i\"",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name must be set and it can be referenced in Template Items using ${PARAMETER_NAME}. Required.",
          "type": "string"
        },
        "required": {
          "description": "Optional: Indicates the parameter must have a value.  Defaults to false.",
          "type": "boolean"
        },
        "value": {
          "description": "Value holds the Parameter data. If specified, the generator will be ignored. The value replaces all occurrences of the Parameter ${Name} expression during the Template to Config transformation. Optional.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.openshift.api.template.v1.TemplateInstanceCondition": {
      "description": "TemplateInstanceCondition contains condition information for a TemplateInstance.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "LastTransitionTime is the last time a condition status transitioned from one state to another."
        },
        "message": {
          "default": "",
          "description": "Message is a human readable description of the details of the last transition, complementing reason.",
          "type": "string"
        },
        "reason": {
          "default": "",
          "description": "Reason is a brief machine readable explanation for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False or Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of the condition, currently Ready or InstantiateFailure.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status",
        "lastTransitionTime",
        "reason",
        "message"
      ],
      "type": "object"
    },
    "com.github.openshift.api.template.v1.TemplateInstanceObject": {
      "description": "TemplateInstanceObject references an object created by a TemplateInstance.",
      "properties": {
        "ref": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "default": {},
          "description": "ref is a reference to the created object.  When used under .spec, only name and namespace are used; these can contain references to parameters which will be substituted following the usual rules."
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.template.v1.TemplateInstanceRequester": {
      "description": "TemplateInstanceRequester holds the identity of an agent requesting a template instantiation.",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array"
          },
          "description": "extra holds additional information provided by the authenticator.",
          "type": "object"
        },
        "groups": {
          "description": "groups represent the groups this user is a part of.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "uid": {
          "description": "uid is a unique value that identifies this user across time; if this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "username uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.openshift.api.template.v1.TemplateInstanceSpec": {
      "description": "TemplateInstanceSpec describes the desired state of a TemplateInstance.",
      "properties": {
        "requester": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.template.v1.TemplateInstanceRequester"
            }
          ],
          "description": "requester holds the identity of the agent requesting the template instantiation."
        },
        "secret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "secret is a reference to a Secret object containing the necessary template parameters."
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.openshift.api.template.v1.Template"
            }
          ],
          "default": {},
          "description": "template is a full copy of the template for instantiation."
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "com.github.openshift.api.template.v1.TemplateInstanceStatus": {
      "description": "TemplateInstanceStatus describes the current state of a TemplateInstance.",
      "properties": {
        "conditions": {
          "description": "conditions represent the latest available observations of a TemplateInstance's current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.template.v1.TemplateInstanceCondition"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "objects": {
          "description": "Objects references the objects created by the TemplateInstance.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.openshift.api.template.v1.TemplateInstanceObject"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.operator-framework.api.pkg.lib.version.OperatorVersion": {
      "description": "OperatorVersion is a wrapper around semver.Version which supports correct marshaling to YAML and JSON.",
      "format": "semver",
      "type": "string"
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.APIResourceReference": {
      "description": "APIResourceReference is a reference to a Kubernetes resource type that the referrer utilizes.",
      "properties": {
        "kind": {
          "default": "",
          "description": "Kind of the referenced resource type.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Plural name of the referenced resource type (CustomResourceDefinition.Spec.Names[].Plural). Empty string if the referenced resource type is not a custom resource.",
          "type": "string"
        },
        "version": {
          "default": "",
          "description": "API Version of the referenced resource type.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "kind",
        "version"
      ],
      "type": "object"
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.APIServiceDefinitions": {
      "description": "APIServiceDefinitions declares all of the extension apis managed or required by an operator being ran by ClusterServiceVersion.",
      "properties": {
        "owned": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.APIServiceDescription"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "required": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.APIServiceDescription"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.APIServiceDescription": {
      "description": "APIServiceDescription provides details to OLM about apis provided via aggregation",
      "properties": {
        "actionDescriptors": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.ActionDescriptor"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "containerPort": {
          "format": "int32",
          "type": "integer"
        },
        "deploymentName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "group": {
          "default": "",
          "type": "string"
        },
        "kind": {
          "default": "",
          "type": "string"
        },
        "name": {
          "default": "",
          "type": "string"
        },
        "resources": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.APIResourceReference"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "specDescriptors": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.SpecDescriptor"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "statusDescriptors": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.StatusDescriptor"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "version": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "name",
        "group",
        "version",
        "kind"
      ],
      "type": "object"
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.ActionDescriptor": {
      "description": "ActionDescriptor describes a declarative action that can be performed on a custom resource instance",
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "path": {
          "default": "",
          "type": "string"
        },
        "value": {
          "format": "byte",
          "type": "string"
        },
        "x-descriptors": {
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.CRDDescription": {
      "description": "CRDDescription provides details to OLM about the CRDs",
      "properties": {
        "actionDescriptors": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.ActionDescriptor"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "kind": {
          "default": "",
          "type": "string"
        },
        "name": {
          "default": "",
          "type": "string"
        },
        "resources": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.APIResourceReference"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "specDescriptors": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.SpecDescriptor"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "statusDescriptors": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.StatusDescriptor"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "version": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "name",
        "version",
        "kind"
      ],
      "type": "object"
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.CustomResourceDefinitions": {
      "description": "CustomResourceDefinitions declares all of the CRDs managed or required by an operator being ran by ClusterServiceVersion.\n\nIf the CRD is present in the Owned list, it is implicitly required.",
      "properties": {
        "owned": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.CRDDescription"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "required": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.CRDDescription"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.InstallMode": {
      "description": "InstallMode associates an InstallModeType with a flag representing if the CSV supports it",
      "properties": {
        "supported": {
          "default": false,
          "type": "boolean"
        },
        "type": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "type",
        "supported"
      ],
      "type": "object"
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.SpecDescriptor": {
      "description": "SpecDescriptor describes a field in a spec block of a CRD so that OLM can consume it",
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "path": {
          "default": "",
          "type": "string"
        },
        "value": {
          "format": "byte",
          "type": "string"
        },
        "x-descriptors": {
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.StatusDescriptor": {
      "description": "StatusDescriptor describes a field in a status block of a CRD so that OLM can consume it",
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "path": {
          "default": "",
          "type": "string"
        },
        "value": {
          "format": "byte",
          "type": "string"
        },
        "x-descriptors": {
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.AppLink": {
      "description": "AppLink defines a link to an application",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.CSVDescription": {
      "description": "CSVDescription defines a description of a CSV",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "type": "object",
          "x-kubernetes-list-type": "map"
        },
        "apiservicedefinitions": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.APIServiceDefinitions"
            }
          ],
          "default": {}
        },
        "customresourcedefinitions": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.CustomResourceDefinitions"
            }
          ],
          "default": {}
        },
        "description": {
          "description": "LongDescription is the CSV's description",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the CSV's display name",
          "type": "string"
        },
        "icon": {
          "description": "Icon is the CSV's base64 encoded icon",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Icon"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "installModes": {
          "description": "InstallModes specify supported installation types",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.operators.v1alpha1.InstallMode"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "keywords": {
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "links": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.AppLink"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "maintainers": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Maintainer"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "maturity": {
          "type": "string"
        },
        "minKubeVersion": {
          "description": "Minimum Kubernetes version for operator installation",
          "type": "string"
        },
        "nativeApis": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionKind"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "provider": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.AppLink"
            }
          ],
          "default": {},
          "description": "Provider is the CSV's provider"
        },
        "relatedImages": {
          "description": "List of related images",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.operator-framework.api.pkg.lib.version.OperatorVersion"
            }
          ],
          "description": "Version is the CSV's semantic version"
        }
      },
      "type": "object"
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.ChannelEntry": {
      "description": "ChannelEntry defines a member of a package channel.",
      "properties": {
        "deprecation": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Deprecation"
            }
          ],
          "description": "Deprecation is an optional field which contains information if the channel entry is deprecated."
        },
        "name": {
          "default": "",
          "description": "Name is the name of the bundle for this entry.",
          "type": "string"
        },
        "version": {
          "description": "Version is the version of the bundle for this entry.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Deprecation": {
      "description": "Deprecation conveys information regarding a deprecated resource.",
      "properties": {
        "message": {
          "default": "",
          "description": "Message is a human readable message describing the deprecation.",
          "type": "string"
        }
      },
      "required": [
        "message"
      ],
      "type": "object"
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Icon": {
      "description": "Icon defines a base64 encoded icon and media type",
      "properties": {
        "base64data": {
          "type": "string"
        },
        "mediatype": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Maintainer": {
      "description": "Maintainer defines a project maintainer",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageChannel": {
      "description": "PackageChannel defines a single channel under a package, pointing to a version of that package.",
      "properties": {
        "currentCSV": {
          "default": "",
          "description": "CurrentCSV defines a reference to the CSV holding the version of this package currently for the channel.",
          "type": "string"
        },
        "currentCSVDesc": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.CSVDescription"
            }
          ],
          "default": {},
          "description": "CurrentCSVSpec holds the spec of the current CSV"
        },
        "deprecation": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Deprecation"
            }
          ],
          "description": "Deprecation is an optional field which contains information if the channel is deprecated."
        },
        "entries": {
          "description": "Entries lists all CSVs in the channel, with their upgrade edges.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.ChannelEntry"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the channel, e.g. `alpha` or `stable`",
          "type": "string"
        }
      },
      "required": [
        "name",
        "currentCSV",
        "entries"
      ],
      "type": "object"
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageManifestSpec": {
      "description": "PackageManifestSpec defines the desired state of PackageManifest",
      "type": "object"
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageManifestStatus": {
      "description": "PackageManifestStatus represents the current status of the PackageManifest",
      "properties": {
        "catalogSource": {
          "default": "",
          "description": "CatalogSource is the name of the CatalogSource this package belongs to",
          "type": "string"
        },
        "catalogSourceDisplayName": {
          "default": "",
          "type": "string"
        },
        "catalogSourceNamespace": {
          "default": "",
          "description": "CatalogSourceNamespace is the namespace of the owning CatalogSource",
          "type": "string"
        },
        "catalogSourcePublisher": {
          "default": "",
          "type": "string"
        },
        "channels": {
          "description": "Channels are the declared channels for the package, ala `stable` or `alpha`.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageChannel"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "defaultChannel": {
          "default": "",
          "description": "DefaultChannel is, if specified, the name of the default channel for the package. The default channel will be installed if no other channel is explicitly given. If the package has a single channel, then that channel is implicitly the default.",
          "type": "string"
        },
        "deprecation": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Deprecation"
            }
          ],
          "description": "Deprecation is an optional field which contains information if the package is deprecated."
        },
        "packageName": {
          "default": "",
          "description": "PackageName is the name of the overall package, ala `etcd`.",
          "type": "string"
        },
        "provider": {
          "allOf": [
            {
              "$ref": "#/components/schemas/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.AppLink"
            }
          ],
          "default": {},
          "description": "Provider is the provider of the PackageManifest's default CSV"
        }
      },
      "required": [
        "catalogSource",
        "catalogSourceDisplayName",
        "catalogSourcePublisher",
        "catalogSourceNamespace",
        "packageName",
        "channels",
        "defaultChannel"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.AuditAnnotation": {
      "description": "AuditAnnotation describes how to produce an audit annotation for an API request.",
      "properties": {
        "key": {
          "default": "",
          "description": "key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.\n\nThe key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: \"{ValidatingAdmissionPolicy name}/{key}\".\n\nIf an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.\n\nRequired.",
          "type": "string"
        },
        "valueExpression": {
          "default": "",
          "description": "valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.\n\nIf multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.\n\nRequired.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "valueExpression"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ExpressionWarning": {
      "description": "ExpressionWarning is a warning information that targets a specific expression.",
      "properties": {
        "fieldRef": {
          "default": "",
          "description": "The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is \"spec.validations[0].expression\"",
          "type": "string"
        },
        "warning": {
          "default": "",
          "description": "The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.",
          "type": "string"
        }
      },
      "required": [
        "fieldRef",
        "warning"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.MatchCondition": {
      "description": "MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.",
      "properties": {
        "expression": {
          "default": "",
          "description": "Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\nDocumentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/\n\nRequired.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\nRequired.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "expression"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.MatchResources": {
      "description": "MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)",
      "properties": {
        "excludeResourceRules": {
          "description": "ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.NamedRuleWithOperations"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"MatchResources\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.\n\nDefaults to \"Equivalent\"\n\nPossible enum values:\n - `\"Equivalent\"` means requests should be sent to the webhook if they modify a resource listed in rules via another API group or version.\n - `\"Exact\"` means requests should only be sent to the webhook if they exactly match a given rule.",
          "enum": [
            "Equivalent",
            "Exact"
          ],
          "type": "string"
        },
        "namespaceSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the policy on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything."
        },
        "objectSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything."
        },
        "resourceRules": {
          "description": "ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.NamedRuleWithOperations"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhook": {
      "description": "MutatingWebhook describes an admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "clientConfig": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.WebhookClientConfig"
            }
          ],
          "default": {},
          "description": "ClientConfig defines how to communicate with the hook. Required"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.\n\nPossible enum values:\n - `\"Fail\"` means that an error calling the webhook causes the admission to fail.\n - `\"Ignore\"` means that an error calling the webhook is ignored.",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "matchConditions": {
          "description": "MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the webhook is called.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the error is ignored and the webhook is skipped",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.MatchCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\"\n\nPossible enum values:\n - `\"Equivalent\"` means requests should be sent to the webhook if they modify a resource listed in rules via another API group or version.\n - `\"Exact\"` means requests should only be sent to the webhook if they exactly match a given rule.",
          "enum": [
            "Equivalent",
            "Exact"
          ],
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
          "type": "string"
        },
        "namespaceSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything."
        },
        "objectSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything."
        },
        "reinvocationPolicy": {
          "description": "reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\".\n\nNever: the webhook will not be called more than once in a single admission evaluation.\n\nIfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.\n\nDefaults to \"Never\".\n\nPossible enum values:\n - `\"IfNeeded\"` indicates that the webhook may be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call.\n - `\"Never\"` indicates that the webhook must not be called more than once in a single admission evaluation.",
          "enum": [
            "IfNeeded",
            "Never"
          ],
          "type": "string"
        },
        "rules": {
          "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.RuleWithOperations"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "sideEffects": {
          "description": "SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.\n\nPossible enum values:\n - `\"None\"` means that calling the webhook will have no side effects.\n - `\"NoneOnDryRun\"` means that calling the webhook will possibly have side effects, but if the request being reviewed has the dry-run attribute, the side effects will be suppressed.\n - `\"Some\"` means that calling the webhook will possibly have side effects. If a request with the dry-run attribute would trigger a call to this webhook, the request will instead fail.\n - `\"Unknown\"` means that no information is known about the side effects of calling the webhook. If a request with the dry-run attribute would trigger a call to this webhook, the request will instead fail.",
          "enum": [
            "None",
            "NoneOnDryRun",
            "Some",
            "Unknown"
          ],
          "type": "string"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "clientConfig",
        "sideEffects",
        "admissionReviewVersions"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.NamedRuleWithOperations": {
      "description": "NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "apiVersions": {
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "operations": {
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "default": "",
            "enum": [
              "*",
              "CONNECT",
              "CREATE",
              "DELETE",
              "UPDATE"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "scope": {
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.admissionregistration.v1.ParamKind": {
      "description": "ParamKind is a tuple of Group Kind and Version.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion is the API group version the resources belong to. In format of \"group/version\". Required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the API kind the resources belong to. Required.",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.admissionregistration.v1.ParamRef": {
      "description": "ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.",
      "properties": {
        "name": {
          "description": "name is the name of the resource being referenced.\n\nOne of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.\n\nA single parameter used for all admission requests can be configured by setting the `name` field, leaving `selector` blank, and setting namespace if `paramKind` is namespace-scoped.",
          "type": "string"
        },
        "namespace": {
          "description": "namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.\n\nA per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.\n\n- If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.\n\n- If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.",
          "type": "string"
        },
        "parameterNotFoundAction": {
          "description": "`parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.\n\nAllowed values are `Allow` or `Deny`\n\nRequired",
          "type": "string"
        },
        "selector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind.\n\nIf multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together.\n\nOne of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset."
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.admissionregistration.v1.RuleWithOperations": {
      "description": "RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "apiVersions": {
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "operations": {
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "default": "",
            "enum": [
              "*",
              "CONNECT",
              "CREATE",
              "DELETE",
              "UPDATE"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "scope": {
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "properties": {
        "name": {
          "default": "",
          "description": "`name` is the name of the service. Required",
          "type": "string"
        },
        "namespace": {
          "default": "",
          "description": "`namespace` is the namespace of the service. Required",
          "type": "string"
        },
        "path": {
          "description": "`path` is an optional URL path which will be sent in any request to this service.",
          "type": "string"
        },
        "port": {
          "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.TypeChecking": {
      "description": "TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy",
      "properties": {
        "expressionWarnings": {
          "description": "The type checking warnings for each expression.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.ExpressionWarning"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingSpec": {
      "description": "ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.",
      "properties": {
        "matchResources": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.MatchResources"
            }
          ],
          "description": "MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required."
        },
        "paramRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.ParamRef"
            }
          ],
          "description": "paramRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied. If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param."
        },
        "policyName": {
          "description": "PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.",
          "type": "string"
        },
        "validationActions": {
          "description": "validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.\n\nFailures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.\n\nvalidationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.\n\nThe supported actions values are:\n\n\"Deny\" specifies that a validation failure results in a denied request.\n\n\"Warn\" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.\n\n\"Audit\" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `\"validation.policy.admission.k8s.io/validation_failure\": \"[{\"message\": \"Invalid value\", {\"policy\": \"policy.example.com\", {\"binding\": \"policybinding.example.com\", {\"expressionIndex\": \"1\", {\"validationActions\": [\"Audit\"]}]\"`\n\nClients should expect to handle additional values by ignoring any values not recognized.\n\n\"Deny\" and \"Warn\" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.\n\nRequired.",
          "items": {
            "default": "",
            "enum": [
              "Audit",
              "Deny",
              "Warn"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicySpec": {
      "description": "ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.",
      "properties": {
        "auditAnnotations": {
          "description": "auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.AuditAnnotation"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "failurePolicy": {
          "description": "failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.\n\nA policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.\n\nfailurePolicy does not define how validations that evaluate to false are handled.\n\nWhen failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.\n\nAllowed values are Ignore or Fail. Defaults to Fail.\n\nPossible enum values:\n - `\"Fail\"` means that an error calling the webhook causes the admission to fail.\n - `\"Ignore\"` means that an error calling the webhook is ignored.",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "matchConditions": {
          "description": "MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nIf a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the policy is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the policy is skipped",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.MatchCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "matchConstraints": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.MatchResources"
            }
          ],
          "description": "MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required."
        },
        "paramKind": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.ParamKind"
            }
          ],
          "description": "ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null."
        },
        "validations": {
          "description": "Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.Validation"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "variables": {
          "description": "Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy.\n\nThe expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.Variable"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyStatus": {
      "description": "ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.",
      "properties": {
        "conditions": {
          "description": "The conditions represent the latest available observations of a policy's current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "The generation observed by the controller.",
          "format": "int64",
          "type": "integer"
        },
        "typeChecking": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.TypeChecking"
            }
          ],
          "description": "The results of type checking for each expression. Presence of this field indicates the completion of the type checking."
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhook": {
      "description": "ValidatingWebhook describes an admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "clientConfig": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.WebhookClientConfig"
            }
          ],
          "default": {},
          "description": "ClientConfig defines how to communicate with the hook. Required"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.\n\nPossible enum values:\n - `\"Fail\"` means that an error calling the webhook causes the admission to fail.\n - `\"Ignore\"` means that an error calling the webhook is ignored.",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "matchConditions": {
          "description": "MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the webhook is called.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the error is ignored and the webhook is skipped",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.MatchCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\"\n\nPossible enum values:\n - `\"Equivalent\"` means requests should be sent to the webhook if they modify a resource listed in rules via another API group or version.\n - `\"Exact\"` means requests should only be sent to the webhook if they exactly match a given rule.",
          "enum": [
            "Equivalent",
            "Exact"
          ],
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
          "type": "string"
        },
        "namespaceSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything."
        },
        "objectSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything."
        },
        "rules": {
          "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.RuleWithOperations"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "sideEffects": {
          "description": "SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.\n\nPossible enum values:\n - `\"None\"` means that calling the webhook will have no side effects.\n - `\"NoneOnDryRun\"` means that calling the webhook will possibly have side effects, but if the request being reviewed has the dry-run attribute, the side effects will be suppressed.\n - `\"Some\"` means that calling the webhook will possibly have side effects. If a request with the dry-run attribute would trigger a call to this webhook, the request will instead fail.\n - `\"Unknown\"` means that no information is known about the side effects of calling the webhook. If a request with the dry-run attribute would trigger a call to this webhook, the request will instead fail.",
          "enum": [
            "None",
            "NoneOnDryRun",
            "Some",
            "Unknown"
          ],
          "type": "string"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "clientConfig",
        "sideEffects",
        "admissionReviewVersions"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.Validation": {
      "description": "Validation specifies the CEL expression which is used to apply the validation.",
      "properties": {
        "expression": {
          "default": "",
          "description": "Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:\n\n- 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.\n  For example, a variable named 'foo' can be accessed as 'variables.foo'.\n- 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n- 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:\n\t  \"true\", \"false\", \"null\", \"in\", \"as\", \"break\", \"const\", \"continue\", \"else\", \"for\", \"function\", \"if\",\n\t  \"import\", \"let\", \"loop\", \"package\", \"namespace\", \"return\".\nExamples:\n  - Expression accessing a property named \"namespace\": {\"Expression\": \"object.__namespace__ > 0\"}\n  - Expression accessing a property named \"x-prop\": {\"Expression\": \"object.x__dash__prop > 0\"}\n  - Expression accessing a property named \"redact__d\": {\"Expression\": \"object.redact__underscores__d > 0\"}\n\nEquality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:\n  - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and\n    non-intersecting elements in `Y` are appended, retaining their partial order.\n  - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values\n    are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with\n    non-intersecting keys are appended, retaining their partial order.\nRequired.",
          "type": "string"
        },
        "message": {
          "description": "Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is \"failed rule: {Rule}\". e.g. \"must be a URL with the host matching spec.host\" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is \"failed Expression: {Expression}\".",
          "type": "string"
        },
        "messageExpression": {
          "description": "messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: \"object.x must be less than max (\"+string(params.max)+\")\"",
          "type": "string"
        },
        "reason": {
          "description": "Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: \"Unauthorized\", \"Forbidden\", \"Invalid\", \"RequestEntityTooLarge\". If not set, StatusReasonInvalid is used in the response to the client.",
          "type": "string"
        }
      },
      "required": [
        "expression"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.Variable": {
      "description": "Variable is the definition of a variable that is used for composition. A variable is defined as a named expression.",
      "properties": {
        "expression": {
          "default": "",
          "description": "Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is \"foo\", the variable will be available as `variables.foo`",
          "type": "string"
        }
      },
      "required": [
        "name",
        "expression"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.admissionregistration.v1.WebhookClientConfig": {
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook",
      "properties": {
        "caBundle": {
          "description": "`caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1.ServiceReference"
            }
          ],
          "description": "`service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`."
        },
        "url": {
          "description": "`url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.AuditAnnotation": {
      "description": "AuditAnnotation describes how to produce an audit annotation for an API request.",
      "properties": {
        "key": {
          "default": "",
          "description": "key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.\n\nThe key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: \"{ValidatingAdmissionPolicy name}/{key}\".\n\nIf an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.\n\nRequired.",
          "type": "string"
        },
        "valueExpression": {
          "default": "",
          "description": "valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.\n\nIf multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.\n\nRequired.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "valueExpression"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.ExpressionWarning": {
      "description": "ExpressionWarning is a warning information that targets a specific expression.",
      "properties": {
        "fieldRef": {
          "default": "",
          "description": "The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is \"spec.validations[0].expression\"",
          "type": "string"
        },
        "warning": {
          "default": "",
          "description": "The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.",
          "type": "string"
        }
      },
      "required": [
        "fieldRef",
        "warning"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.MatchCondition": {
      "description": "MatchCondition represents a condition which must be fulfilled for a request to be sent to a webhook.",
      "properties": {
        "expression": {
          "default": "",
          "description": "Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\nDocumentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/\n\nRequired.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\nRequired.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "expression"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.MatchResources": {
      "description": "MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)",
      "properties": {
        "excludeResourceRules": {
          "description": "ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"MatchResources\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.\n\nDefaults to \"Equivalent\"",
          "type": "string"
        },
        "namespaceSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the policy on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything."
        },
        "objectSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything."
        },
        "resourceRules": {
          "description": "ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations": {
      "description": "NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "apiVersions": {
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "operations": {
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "default": "",
            "enum": [
              "*",
              "CONNECT",
              "CREATE",
              "DELETE",
              "UPDATE"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "scope": {
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.admissionregistration.v1beta1.ParamKind": {
      "description": "ParamKind is a tuple of Group Kind and Version.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion is the API group version the resources belong to. In format of \"group/version\". Required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the API kind the resources belong to. Required.",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.admissionregistration.v1beta1.ParamRef": {
      "description": "ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.",
      "properties": {
        "name": {
          "description": "name is the name of the resource being referenced.\n\nOne of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.\n\nA single parameter used for all admission requests can be configured by setting the `name` field, leaving `selector` blank, and setting namespace if `paramKind` is namespace-scoped.",
          "type": "string"
        },
        "namespace": {
          "description": "namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.\n\nA per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.\n\n- If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.\n\n- If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.",
          "type": "string"
        },
        "parameterNotFoundAction": {
          "description": "`parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.\n\nAllowed values are `Allow` or `Deny`\n\nRequired",
          "type": "string"
        },
        "selector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind.\n\nIf multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together.\n\nOne of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset."
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.admissionregistration.v1beta1.TypeChecking": {
      "description": "TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy",
      "properties": {
        "expressionWarnings": {
          "description": "The type checking warnings for each expression.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.ExpressionWarning"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingSpec": {
      "description": "ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.",
      "properties": {
        "matchResources": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.MatchResources"
            }
          ],
          "description": "MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required."
        },
        "paramRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.ParamRef"
            }
          ],
          "description": "paramRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied. If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param."
        },
        "policyName": {
          "description": "PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.",
          "type": "string"
        },
        "validationActions": {
          "description": "validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.\n\nFailures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.\n\nvalidationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.\n\nThe supported actions values are:\n\n\"Deny\" specifies that a validation failure results in a denied request.\n\n\"Warn\" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.\n\n\"Audit\" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `\"validation.policy.admission.k8s.io/validation_failure\": \"[{\"message\": \"Invalid value\", {\"policy\": \"policy.example.com\", {\"binding\": \"policybinding.example.com\", {\"expressionIndex\": \"1\", {\"validationActions\": [\"Audit\"]}]\"`\n\nClients should expect to handle additional values by ignoring any values not recognized.\n\n\"Deny\" and \"Warn\" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.\n\nRequired.",
          "items": {
            "default": "",
            "enum": [
              "Audit",
              "Deny",
              "Warn"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicySpec": {
      "description": "ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.",
      "properties": {
        "auditAnnotations": {
          "description": "auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.AuditAnnotation"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "failurePolicy": {
          "description": "failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.\n\nA policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.\n\nfailurePolicy does not define how validations that evaluate to false are handled.\n\nWhen failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.\n\nAllowed values are Ignore or Fail. Defaults to Fail.",
          "type": "string"
        },
        "matchConditions": {
          "description": "MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nIf a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the policy is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the policy is skipped",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.MatchCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "matchConstraints": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.MatchResources"
            }
          ],
          "description": "MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required."
        },
        "paramKind": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.ParamKind"
            }
          ],
          "description": "ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null."
        },
        "validations": {
          "description": "Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.Validation"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "variables": {
          "description": "Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy.\n\nThe expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.Variable"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyStatus": {
      "description": "ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.",
      "properties": {
        "conditions": {
          "description": "The conditions represent the latest available observations of a policy's current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "The generation observed by the controller.",
          "format": "int64",
          "type": "integer"
        },
        "typeChecking": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.admissionregistration.v1beta1.TypeChecking"
            }
          ],
          "description": "The results of type checking for each expression. Presence of this field indicates the completion of the type checking."
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.Validation": {
      "description": "Validation specifies the CEL expression which is used to apply the validation.",
      "properties": {
        "expression": {
          "default": "",
          "description": "Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:\n\n- 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.\n  For example, a variable named 'foo' can be accessed as 'variables.foo'.\n- 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n- 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:\n\t  \"true\", \"false\", \"null\", \"in\", \"as\", \"break\", \"const\", \"continue\", \"else\", \"for\", \"function\", \"if\",\n\t  \"import\", \"let\", \"loop\", \"package\", \"namespace\", \"return\".\nExamples:\n  - Expression accessing a property named \"namespace\": {\"Expression\": \"object.__namespace__ > 0\"}\n  - Expression accessing a property named \"x-prop\": {\"Expression\": \"object.x__dash__prop > 0\"}\n  - Expression accessing a property named \"redact__d\": {\"Expression\": \"object.redact__underscores__d > 0\"}\n\nEquality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:\n  - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and\n    non-intersecting elements in `Y` are appended, retaining their partial order.\n  - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values\n    are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with\n    non-intersecting keys are appended, retaining their partial order.\nRequired.",
          "type": "string"
        },
        "message": {
          "description": "Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is \"failed rule: {Rule}\". e.g. \"must be a URL with the host matching spec.host\" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is \"failed Expression: {Expression}\".",
          "type": "string"
        },
        "messageExpression": {
          "description": "messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: \"object.x must be less than max (\"+string(params.max)+\")\"",
          "type": "string"
        },
        "reason": {
          "description": "Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: \"Unauthorized\", \"Forbidden\", \"Invalid\", \"RequestEntityTooLarge\". If not set, StatusReasonInvalid is used in the response to the client.",
          "type": "string"
        }
      },
      "required": [
        "expression"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.Variable": {
      "description": "Variable is the definition of a variable that is used for composition. A variable is defined as a named expression.",
      "properties": {
        "expression": {
          "default": "",
          "description": "Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is \"foo\", the variable will be available as `variables.foo`",
          "type": "string"
        }
      },
      "required": [
        "name",
        "expression"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.apps.v1.DaemonSetCondition": {
      "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of DaemonSet condition.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetSpec": {
      "description": "DaemonSetSpec is the specification of a daemon set.",
      "properties": {
        "minReadySeconds": {
          "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
          "format": "int32",
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "default": {},
          "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). The only allowed template.spec.restartPolicy value is \"Always\". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template"
        },
        "updateStrategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.apps.v1.DaemonSetUpdateStrategy"
            }
          ],
          "default": {},
          "description": "An update strategy to replace existing DaemonSet pods with new pods."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetStatus": {
      "description": "DaemonSetStatus represents the current status of a daemon set.",
      "properties": {
        "collisionCount": {
          "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "Represents the latest available observations of a DaemonSet's current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.apps.v1.DaemonSetCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentNumberScheduled": {
          "default": 0,
          "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "format": "int32",
          "type": "integer"
        },
        "desiredNumberScheduled": {
          "default": 0,
          "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "format": "int32",
          "type": "integer"
        },
        "numberAvailable": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "format": "int32",
          "type": "integer"
        },
        "numberMisscheduled": {
          "default": 0,
          "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "format": "int32",
          "type": "integer"
        },
        "numberReady": {
          "default": 0,
          "description": "numberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.",
          "format": "int32",
          "type": "integer"
        },
        "numberUnavailable": {
          "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "The most recent generation observed by the daemon set controller.",
          "format": "int64",
          "type": "integer"
        },
        "updatedNumberScheduled": {
          "description": "The total number of nodes that are running updated daemon pod",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "currentNumberScheduled",
        "numberMisscheduled",
        "desiredNumberScheduled",
        "numberReady"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetUpdateStrategy": {
      "description": "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.",
      "properties": {
        "rollingUpdate": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.apps.v1.RollingUpdateDaemonSet"
            }
          ],
          "description": "Rolling update config params. Present only if type = \"RollingUpdate\"."
        },
        "type": {
          "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.\n\nPossible enum values:\n - `\"OnDelete\"` Replace the old daemons only when it's killed\n - `\"RollingUpdate\"` Replace the old daemons by new ones using rolling update i.e replace them on each node one after the other.",
          "enum": [
            "OnDelete",
            "RollingUpdate"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentCondition": {
      "description": "DeploymentCondition describes the state of a deployment at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time the condition transitioned from one status to another."
        },
        "lastUpdateTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "The last time this condition was updated."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of deployment condition.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentSpec": {
      "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "format": "int32",
          "type": "integer"
        },
        "paused": {
          "description": "Indicates that the deployment is paused.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
          "format": "int32",
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels."
        },
        "strategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.apps.v1.DeploymentStrategy"
            }
          ],
          "default": {},
          "description": "The deployment strategy to use to replace existing pods with new ones.",
          "x-kubernetes-patch-strategy": "retainKeys"
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "default": {},
          "description": "Template describes the pods that will be created. The only allowed template.spec.restartPolicy value is \"Always\"."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentStatus": {
      "description": "DeploymentStatus is the most recently observed status of the Deployment.",
      "properties": {
        "availableReplicas": {
          "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
          "format": "int32",
          "type": "integer"
        },
        "collisionCount": {
          "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "Represents the latest available observations of a deployment's current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.apps.v1.DeploymentCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "The generation observed by the deployment controller.",
          "format": "int64",
          "type": "integer"
        },
        "readyReplicas": {
          "description": "readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
          "format": "int32",
          "type": "integer"
        },
        "unavailableReplicas": {
          "description": "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
          "format": "int32",
          "type": "integer"
        },
        "updatedReplicas": {
          "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentStrategy": {
      "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
      "properties": {
        "rollingUpdate": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.apps.v1.RollingUpdateDeployment"
            }
          ],
          "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate."
        },
        "type": {
          "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n\nPossible enum values:\n - `\"Recreate\"` Kill all existing pods before creating new ones.\n - `\"RollingUpdate\"` Replace the old ReplicaSets by new one using rolling update i.e gradually scale down the old ReplicaSets and scale up the new one.",
          "enum": [
            "Recreate",
            "RollingUpdate"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSetCondition": {
      "description": "ReplicaSetCondition describes the state of a replica set at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "The last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of replica set condition.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSetSpec": {
      "description": "ReplicaSetSpec is the specification of a ReplicaSet.",
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "default": {},
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template"
        }
      },
      "required": [
        "selector"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSetStatus": {
      "description": "ReplicaSetStatus represents the current status of a ReplicaSet.",
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replica set.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "Represents the latest available observations of a replica set's current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.apps.v1.ReplicaSetCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.",
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.",
          "format": "int64",
          "type": "integer"
        },
        "readyReplicas": {
          "description": "readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "default": 0,
          "description": "Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateDaemonSet": {
      "description": "Spec to control the desired behavior of daemon set rolling update.",
      "properties": {
        "maxSurge": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption."
        },
        "maxUnavailable": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update."
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateDeployment": {
      "description": "Spec to control the desired behavior of rolling update.",
      "properties": {
        "maxSurge": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods."
        },
        "maxUnavailable": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods."
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy": {
      "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
      "properties": {
        "maxUnavailable": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable."
        },
        "partition": {
          "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetCondition": {
      "description": "StatefulSetCondition describes the state of a statefulset at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of statefulset condition.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetOrdinals": {
      "description": "StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.",
      "properties": {
        "start": {
          "default": 0,
          "description": "start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:\n  [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).\nIf unset, defaults to 0. Replica indices will be in the range:\n  [0, .spec.replicas).",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy": {
      "description": "StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.",
      "properties": {
        "whenDeleted": {
          "description": "WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.",
          "type": "string"
        },
        "whenScaled": {
          "description": "WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetSpec": {
      "description": "A StatefulSetSpec is the specification of a StatefulSet.",
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "format": "int32",
          "type": "integer"
        },
        "ordinals": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.apps.v1.StatefulSetOrdinals"
            }
          ],
          "description": "ordinals controls the numbering of replica indices in a StatefulSet. The default ordinals behavior assigns a \"0\" index to the first replica and increments the index by one for each additional replica requested."
        },
        "persistentVolumeClaimRetentionPolicy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy"
            }
          ],
          "description": "persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims created from volumeClaimTemplates. By default, all persistent volume claims are created as needed and retained until manually deleted. This policy allows the lifecycle to be altered, for example by deleting persistent volume claims when their stateful set is deleted, or when their pod is scaled down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is beta."
        },
        "podManagementPolicy": {
          "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.\n\nPossible enum values:\n - `\"OrderedReady\"` will create pods in strictly increasing order on scale up and strictly decreasing order on scale down, progressing only when the previous pod is ready or terminated. At most one pod will be changed at any time.\n - `\"Parallel\"` will create and delete pods as soon as the stateful set replica count is changed, and will not wait for pods to be ready or complete termination.",
          "enum": [
            "OrderedReady",
            "Parallel"
          ],
          "type": "string"
        },
        "replicas": {
          "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
          "format": "int32",
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
        },
        "serviceName": {
          "default": "",
          "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
          "type": "string"
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "default": {},
          "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet. Each pod will be named with the format <statefulsetname>-<podindex>. For example, a pod in a StatefulSet named \"web\" with index number \"3\" would be named \"web-3\". The only allowed template.spec.restartPolicy value is \"Always\"."
        },
        "updateStrategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.apps.v1.StatefulSetUpdateStrategy"
            }
          ],
          "default": {},
          "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template."
        },
        "volumeClaimTemplates": {
          "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "selector",
        "template",
        "serviceName"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetStatus": {
      "description": "StatefulSetStatus represents the current state of a StatefulSet.",
      "properties": {
        "availableReplicas": {
          "default": 0,
          "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.",
          "format": "int32",
          "type": "integer"
        },
        "collisionCount": {
          "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "Represents the latest available observations of a statefulset's current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.apps.v1.StatefulSetCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentReplicas": {
          "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
          "format": "int32",
          "type": "integer"
        },
        "currentRevision": {
          "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
          "type": "string"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
          "format": "int64",
          "type": "integer"
        },
        "readyReplicas": {
          "description": "readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "default": 0,
          "description": "replicas is the number of Pods created by the StatefulSet controller.",
          "format": "int32",
          "type": "integer"
        },
        "updateRevision": {
          "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
          "type": "string"
        },
        "updatedReplicas": {
          "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetUpdateStrategy": {
      "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
      "properties": {
        "rollingUpdate": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy"
            }
          ],
          "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType."
        },
        "type": {
          "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.\n\nPossible enum values:\n - `\"OnDelete\"` triggers the legacy behavior. Version tracking and ordered rolling restarts are disabled. Pods are recreated from the StatefulSetSpec when they are manually deleted. When a scale operation is performed with this strategy,specification version indicated by the StatefulSet's currentRevision.\n - `\"RollingUpdate\"` indicates that update will be applied to all Pods in the StatefulSet with respect to the StatefulSet ordering constraints. When a scale operation is performed with this strategy, new Pods will be created from the specification version indicated by the StatefulSet's updateRevision.",
          "enum": [
            "OnDelete",
            "RollingUpdate"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1.BoundObjectReference": {
      "description": "BoundObjectReference is a reference to an object that a token is bound to.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. Valid kinds are 'Pod' and 'Secret'.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1.SelfSubjectReviewStatus": {
      "description": "SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.",
      "properties": {
        "userInfo": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.authentication.v1.UserInfo"
            }
          ],
          "default": {},
          "description": "User attributes of the user making this request."
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenRequestSpec": {
      "description": "TokenRequestSpec contains client provided parameters of a token request.",
      "properties": {
        "audiences": {
          "description": "Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "boundObjectRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.authentication.v1.BoundObjectReference"
            }
          ],
          "description": "BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation."
        },
        "expirationSeconds": {
          "description": "ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "audiences"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenRequestStatus": {
      "description": "TokenRequestStatus is the result of a token request.",
      "properties": {
        "expirationTimestamp": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "ExpirationTimestamp is the time of expiration of the returned token."
        },
        "token": {
          "default": "",
          "description": "Token is the opaque bearer token.",
          "type": "string"
        }
      },
      "required": [
        "token",
        "expirationTimestamp"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenReviewSpec": {
      "description": "TokenReviewSpec is a description of the token authentication request.",
      "properties": {
        "audiences": {
          "description": "Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "token": {
          "description": "Token is the opaque bearer token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenReviewStatus": {
      "description": "TokenReviewStatus is the result of the token authentication request.",
      "properties": {
        "audiences": {
          "description": "Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "authenticated": {
          "description": "Authenticated indicates that the token was associated with a known user.",
          "type": "boolean"
        },
        "error": {
          "description": "Error indicates that the token couldn't be checked",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.authentication.v1.UserInfo"
            }
          ],
          "default": {},
          "description": "User is the UserInfo associated with the provided token."
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1.UserInfo": {
      "description": "UserInfo holds the information about the user needed to implement the user.Info interface.",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array"
          },
          "description": "Any additional information provided by the authenticator.",
          "type": "object"
        },
        "groups": {
          "description": "The names of groups this user is a part of.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.FieldSelectorAttributes": {
      "description": "FieldSelectorAttributes indicates a field limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.",
      "properties": {
        "rawSelector": {
          "description": "rawSelector is the serialization of a field selector that would be included in a query parameter. Webhook implementations are encouraged to ignore rawSelector. The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present.",
          "type": "string"
        },
        "requirements": {
          "description": "requirements is the parsed interpretation of a field selector. All requirements must be met for a resource instance to match the selector. Webhook implementations should handle requirements, but how to handle them is up to the webhook. Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements are not understood.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldSelectorRequirement"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.LabelSelectorAttributes": {
      "description": "LabelSelectorAttributes indicates a label limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.",
      "properties": {
        "rawSelector": {
          "description": "rawSelector is the serialization of a field selector that would be included in a query parameter. Webhook implementations are encouraged to ignore rawSelector. The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present.",
          "type": "string"
        },
        "requirements": {
          "description": "requirements is the parsed interpretation of a label selector. All requirements must be met for a resource instance to match the selector. Webhook implementations should handle requirements, but how to handle them is up to the webhook. Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements are not understood.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.NonResourceAttributes": {
      "description": "NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface",
      "properties": {
        "path": {
          "description": "Path is the URL path of the request",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the standard HTTP verb",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.NonResourceRule": {
      "description": "NonResourceRule holds information that describes a rule for the non-resource",
      "properties": {
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  \"*\" means all.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "verbs": {
          "description": "Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  \"*\" means all.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1.ResourceAttributes": {
      "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
      "properties": {
        "fieldSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.authorization.v1.FieldSelectorAttributes"
            }
          ],
          "description": "fieldSelector describes the limitation on access based on field.  It can only limit access, not broaden it.\n\nThis field  is alpha-level. To use this field, you must enable the `AuthorizeWithSelectors` feature gate (disabled by default)."
        },
        "group": {
          "description": "Group is the API Group of the Resource.  \"*\" means all.",
          "type": "string"
        },
        "labelSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.authorization.v1.LabelSelectorAttributes"
            }
          ],
          "description": "labelSelector describes the limitation on access based on labels.  It can only limit access, not broaden it.\n\nThis field  is alpha-level. To use this field, you must enable the `AuthorizeWithSelectors` feature gate (disabled by default)."
        },
        "name": {
          "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types.  \"*\" means all.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is one of the existing resource types.  \"\" means none.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "type": "string"
        },
        "version": {
          "description": "Version is the API Version of the Resource.  \"*\" means all.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.ResourceRule": {
      "description": "ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  \"*\" means all.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  \"*\" means all.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  \"*\" means all in the specified apiGroups.\n \"*/foo\" represents the subresource 'foo' for all resources in the specified apiGroups.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "verbs": {
          "description": "Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec": {
      "description": "SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
      "properties": {
        "nonResourceAttributes": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.authorization.v1.NonResourceAttributes"
            }
          ],
          "description": "NonResourceAttributes describes information for a non-resource access request"
        },
        "resourceAttributes": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.authorization.v1.ResourceAttributes"
            }
          ],
          "description": "ResourceAuthorizationAttributes describes information for a resource access request"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec": {
      "description": "SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.",
      "properties": {
        "namespace": {
          "description": "Namespace to evaluate rules for. Required.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SubjectAccessReviewSpec": {
      "description": "SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array"
          },
          "description": "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.",
          "type": "object"
        },
        "groups": {
          "description": "Groups is the groups you're testing for.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "nonResourceAttributes": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.authorization.v1.NonResourceAttributes"
            }
          ],
          "description": "NonResourceAttributes describes information for a non-resource access request"
        },
        "resourceAttributes": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.authorization.v1.ResourceAttributes"
            }
          ],
          "description": "ResourceAuthorizationAttributes describes information for a resource access request"
        },
        "uid": {
          "description": "UID information about the requesting user.",
          "type": "string"
        },
        "user": {
          "description": "User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SubjectAccessReviewStatus": {
      "description": "SubjectAccessReviewStatus",
      "properties": {
        "allowed": {
          "default": false,
          "description": "Allowed is required. True if the action would be allowed, false otherwise.",
          "type": "boolean"
        },
        "denied": {
          "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is optional.  It indicates why a request was allowed or denied.",
          "type": "string"
        }
      },
      "required": [
        "allowed"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SubjectRulesReviewStatus": {
      "description": "SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.",
      "properties": {
        "evaluationError": {
          "description": "EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.",
          "type": "string"
        },
        "incomplete": {
          "default": false,
          "description": "Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.",
          "type": "boolean"
        },
        "nonResourceRules": {
          "description": "NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.authorization.v1.NonResourceRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resourceRules": {
          "description": "ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.authorization.v1.ResourceRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "resourceRules",
        "nonResourceRules",
        "incomplete"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.CrossVersionObjectReference": {
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
      "properties": {
        "apiVersion": {
          "description": "apiVersion is the API version of the referent",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec": {
      "description": "specification of a horizontal pod autoscaler.",
      "properties": {
        "maxReplicas": {
          "default": 0,
          "description": "maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.",
          "format": "int32",
          "type": "integer"
        },
        "minReplicas": {
          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.",
          "format": "int32",
          "type": "integer"
        },
        "scaleTargetRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.CrossVersionObjectReference"
            }
          ],
          "default": {},
          "description": "reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource."
        },
        "targetCPUUtilizationPercentage": {
          "description": "targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "scaleTargetRef",
        "maxReplicas"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus": {
      "description": "current status of a horizontal pod autoscaler",
      "properties": {
        "currentCPUUtilizationPercentage": {
          "description": "currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.",
          "format": "int32",
          "type": "integer"
        },
        "currentReplicas": {
          "default": 0,
          "description": "currentReplicas is the current number of replicas of pods managed by this autoscaler.",
          "format": "int32",
          "type": "integer"
        },
        "desiredReplicas": {
          "default": 0,
          "description": "desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.",
          "format": "int32",
          "type": "integer"
        },
        "lastScaleTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed."
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed by this autoscaler.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "currentReplicas",
        "desiredReplicas"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.ScaleSpec": {
      "description": "ScaleSpec describes the attributes of a scale subresource.",
      "properties": {
        "replicas": {
          "description": "replicas is the desired number of instances for the scaled object.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.ScaleStatus": {
      "description": "ScaleStatus represents the current status of a scale subresource.",
      "properties": {
        "replicas": {
          "default": 0,
          "description": "replicas is the actual number of observed instances of the scaled object.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "description": "selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
          "type": "string"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.ContainerResourceMetricSource": {
      "description": "ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
      "properties": {
        "container": {
          "default": "",
          "description": "container is the name of the container in the pods of the scaling target",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name is the name of the resource in question.",
          "type": "string"
        },
        "target": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricTarget"
            }
          ],
          "default": {},
          "description": "target specifies the target value for the given metric"
        }
      },
      "required": [
        "name",
        "target",
        "container"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.ContainerResourceMetricStatus": {
      "description": "ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
      "properties": {
        "container": {
          "default": "",
          "description": "container is the name of the container in the pods of the scaling target",
          "type": "string"
        },
        "current": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricValueStatus"
            }
          ],
          "default": {},
          "description": "current contains the current value for the given metric"
        },
        "name": {
          "default": "",
          "description": "name is the name of the resource in question.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "current",
        "container"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.CrossVersionObjectReference": {
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
      "properties": {
        "apiVersion": {
          "description": "apiVersion is the API version of the referent",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.ExternalMetricSource": {
      "description": "ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
      "properties": {
        "metric": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricIdentifier"
            }
          ],
          "default": {},
          "description": "metric identifies the target metric by name and selector"
        },
        "target": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricTarget"
            }
          ],
          "default": {},
          "description": "target specifies the target value for the given metric"
        }
      },
      "required": [
        "metric",
        "target"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.ExternalMetricStatus": {
      "description": "ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.",
      "properties": {
        "current": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricValueStatus"
            }
          ],
          "default": {},
          "description": "current contains the current value for the given metric"
        },
        "metric": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricIdentifier"
            }
          ],
          "default": {},
          "description": "metric identifies the target metric by name and selector"
        }
      },
      "required": [
        "metric",
        "current"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.HPAScalingPolicy": {
      "description": "HPAScalingPolicy is a single policy which must hold true for a specified past interval.",
      "properties": {
        "periodSeconds": {
          "default": 0,
          "description": "periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "default": "",
          "description": "type is used to specify the scaling policy.",
          "type": "string"
        },
        "value": {
          "default": 0,
          "description": "value contains the amount of change which is permitted by the policy. It must be greater than zero",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "type",
        "value",
        "periodSeconds"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.HPAScalingRules": {
      "description": "HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.",
      "properties": {
        "policies": {
          "description": "policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.HPAScalingPolicy"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "selectPolicy": {
          "description": "selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.",
          "type": "string"
        },
        "stabilizationWindowSeconds": {
          "description": "stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerBehavior": {
      "description": "HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).",
      "properties": {
        "scaleDown": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.HPAScalingRules"
            }
          ],
          "description": "scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used)."
        },
        "scaleUp": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.HPAScalingRules"
            }
          ],
          "description": "scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:\n  * increase no more than 4 pods per 60 seconds\n  * double the number of pods per 60 seconds\nNo stabilization is used."
        }
      },
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerCondition": {
      "description": "HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another"
        },
        "message": {
          "description": "message is a human-readable explanation containing details about the transition",
          "type": "string"
        },
        "reason": {
          "description": "reason is the reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "status is the status of the condition (True, False, Unknown)",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "type describes the current condition",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerSpec": {
      "description": "HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.",
      "properties": {
        "behavior": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerBehavior"
            }
          ],
          "description": "behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used."
        },
        "maxReplicas": {
          "default": 0,
          "description": "maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.",
          "format": "int32",
          "type": "integer"
        },
        "metrics": {
          "description": "metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricSpec"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "minReplicas": {
          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.",
          "format": "int32",
          "type": "integer"
        },
        "scaleTargetRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
            }
          ],
          "default": {},
          "description": "scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count."
        }
      },
      "required": [
        "scaleTargetRef",
        "maxReplicas"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerStatus": {
      "description": "HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.",
      "properties": {
        "conditions": {
          "description": "conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentMetrics": {
          "description": "currentMetrics is the last read state of the metrics used by this autoscaler.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricStatus"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "currentReplicas": {
          "description": "currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.",
          "format": "int32",
          "type": "integer"
        },
        "desiredReplicas": {
          "default": 0,
          "description": "desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.",
          "format": "int32",
          "type": "integer"
        },
        "lastScaleTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed."
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed by this autoscaler.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "desiredReplicas"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.MetricIdentifier": {
      "description": "MetricIdentifier defines the name and optionally selector for a metric",
      "properties": {
        "name": {
          "default": "",
          "description": "name is the name of the given metric",
          "type": "string"
        },
        "selector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.MetricSpec": {
      "description": "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
      "properties": {
        "containerResource": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.ContainerResourceMetricSource"
            }
          ],
          "description": "containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag."
        },
        "external": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.ExternalMetricSource"
            }
          ],
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster)."
        },
        "object": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.ObjectMetricSource"
            }
          ],
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object)."
        },
        "pods": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.PodsMetricSource"
            }
          ],
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value."
        },
        "resource": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.ResourceMetricSource"
            }
          ],
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source."
        },
        "type": {
          "default": "",
          "description": "type is the type of metric source.  It should be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.MetricStatus": {
      "description": "MetricStatus describes the last-read state of a single metric.",
      "properties": {
        "containerResource": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.ContainerResourceMetricStatus"
            }
          ],
          "description": "container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source."
        },
        "external": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.ExternalMetricStatus"
            }
          ],
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster)."
        },
        "object": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.ObjectMetricStatus"
            }
          ],
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object)."
        },
        "pods": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.PodsMetricStatus"
            }
          ],
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value."
        },
        "resource": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.ResourceMetricStatus"
            }
          ],
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source."
        },
        "type": {
          "default": "",
          "description": "type is the type of metric source.  It will be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.MetricTarget": {
      "description": "MetricTarget defines the target value, average value, or average utilization of a specific metric",
      "properties": {
        "averageUtilization": {
          "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
          "format": "int32",
          "type": "integer"
        },
        "averageValue": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
            }
          ],
          "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)"
        },
        "type": {
          "default": "",
          "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
          "type": "string"
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
            }
          ],
          "description": "value is the target value of the metric (as a quantity)."
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.MetricValueStatus": {
      "description": "MetricValueStatus holds the current value for a metric",
      "properties": {
        "averageUtilization": {
          "description": "currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.",
          "format": "int32",
          "type": "integer"
        },
        "averageValue": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
            }
          ],
          "description": "averageValue is the current value of the average of the metric across all relevant pods (as a quantity)"
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
            }
          ],
          "description": "value is the current value of the metric (as a quantity)."
        }
      },
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.ObjectMetricSource": {
      "description": "ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "properties": {
        "describedObject": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
            }
          ],
          "default": {},
          "description": "describedObject specifies the descriptions of a object,such as kind,name apiVersion"
        },
        "metric": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricIdentifier"
            }
          ],
          "default": {},
          "description": "metric identifies the target metric by name and selector"
        },
        "target": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricTarget"
            }
          ],
          "default": {},
          "description": "target specifies the target value for the given metric"
        }
      },
      "required": [
        "describedObject",
        "target",
        "metric"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.ObjectMetricStatus": {
      "description": "ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "properties": {
        "current": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricValueStatus"
            }
          ],
          "default": {},
          "description": "current contains the current value for the given metric"
        },
        "describedObject": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
            }
          ],
          "default": {},
          "description": "DescribedObject specifies the descriptions of a object,such as kind,name apiVersion"
        },
        "metric": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricIdentifier"
            }
          ],
          "default": {},
          "description": "metric identifies the target metric by name and selector"
        }
      },
      "required": [
        "metric",
        "current",
        "describedObject"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.PodsMetricSource": {
      "description": "PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.",
      "properties": {
        "metric": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricIdentifier"
            }
          ],
          "default": {},
          "description": "metric identifies the target metric by name and selector"
        },
        "target": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricTarget"
            }
          ],
          "default": {},
          "description": "target specifies the target value for the given metric"
        }
      },
      "required": [
        "metric",
        "target"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.PodsMetricStatus": {
      "description": "PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).",
      "properties": {
        "current": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricValueStatus"
            }
          ],
          "default": {},
          "description": "current contains the current value for the given metric"
        },
        "metric": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricIdentifier"
            }
          ],
          "default": {},
          "description": "metric identifies the target metric by name and selector"
        }
      },
      "required": [
        "metric",
        "current"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.ResourceMetricSource": {
      "description": "ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
      "properties": {
        "name": {
          "default": "",
          "description": "name is the name of the resource in question.",
          "type": "string"
        },
        "target": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricTarget"
            }
          ],
          "default": {},
          "description": "target specifies the target value for the given metric"
        }
      },
      "required": [
        "name",
        "target"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2.ResourceMetricStatus": {
      "description": "ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
      "properties": {
        "current": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.autoscaling.v2.MetricValueStatus"
            }
          ],
          "default": {},
          "description": "current contains the current value for the given metric"
        },
        "name": {
          "default": "",
          "description": "name is the name of the resource in question.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "current"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.CronJobSpec": {
      "description": "CronJobSpec describes how the job execution will look like and when it will actually run.",
      "properties": {
        "concurrencyPolicy": {
          "description": "Specifies how to treat concurrent executions of a Job. Valid values are:\n\n- \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one\n\nPossible enum values:\n - `\"Allow\"` allows CronJobs to run concurrently.\n - `\"Forbid\"` forbids concurrent runs, skipping next run if previous hasn't finished yet.\n - `\"Replace\"` cancels currently running job and replaces it with a new one.",
          "enum": [
            "Allow",
            "Forbid",
            "Replace"
          ],
          "type": "string"
        },
        "failedJobsHistoryLimit": {
          "description": "The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.",
          "format": "int32",
          "type": "integer"
        },
        "jobTemplate": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobTemplateSpec"
            }
          ],
          "default": {},
          "description": "Specifies the job that will be created when executing a CronJob."
        },
        "schedule": {
          "default": "",
          "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
          "type": "string"
        },
        "startingDeadlineSeconds": {
          "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.",
          "format": "int64",
          "type": "integer"
        },
        "successfulJobsHistoryLimit": {
          "description": "The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.",
          "format": "int32",
          "type": "integer"
        },
        "suspend": {
          "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.",
          "type": "boolean"
        },
        "timeZone": {
          "description": "The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones",
          "type": "string"
        }
      },
      "required": [
        "schedule",
        "jobTemplate"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.CronJobStatus": {
      "description": "CronJobStatus represents the current state of a cron job.",
      "properties": {
        "active": {
          "description": "A list of pointers to currently running jobs.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "lastScheduleTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Information when was the last time the job was successfully scheduled."
        },
        "lastSuccessfulTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Information when was the last time the job successfully completed."
        }
      },
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobCondition": {
      "description": "JobCondition describes current state of a job.",
      "properties": {
        "lastProbeTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time the condition was checked."
        },
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time the condition transit from one status to another."
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of job condition, Complete or Failed.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobSpec": {
      "description": "JobSpec describes how the job execution will look like.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.",
          "format": "int64",
          "type": "integer"
        },
        "backoffLimit": {
          "description": "Specifies the number of retries before marking this job failed. Defaults to 6",
          "format": "int32",
          "type": "integer"
        },
        "backoffLimitPerIndex": {
          "description": "Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).",
          "format": "int32",
          "type": "integer"
        },
        "completionMode": {
          "description": "completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.\n\n`NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.\n\n`Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.\n\nMore completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.\n\nPossible enum values:\n - `\"Indexed\"` is a Job completion mode. In this mode, the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1). The Job is considered complete when a Pod completes for each completion index.\n - `\"NonIndexed\"` is a Job completion mode. In this mode, the Job is considered complete when there have been .spec.completions successfully completed Pods. Pod completions are homologous to each other.",
          "enum": [
            "Indexed",
            "NonIndexed"
          ],
          "type": "string"
        },
        "completions": {
          "description": "Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "format": "int32",
          "type": "integer"
        },
        "managedBy": {
          "description": "ManagedBy field indicates the controller that manages a Job. The k8s Job controller reconciles jobs which don't have this field at all or the field value is the reserved string `kubernetes.io/job-controller`, but skips reconciling Jobs with a custom value for this field. The value must be a valid domain-prefixed path (e.g. acme.io/foo) - all characters before the first \"/\" must be a valid subdomain as defined by RFC 1123. All characters trailing the first \"/\" must be valid HTTP Path characters as defined by RFC 3986. The value cannot exceed 63 characters. This field is immutable.\n\nThis field is alpha-level. The job controller accepts setting the field when the feature gate JobManagedBy is enabled (disabled by default).",
          "type": "string"
        },
        "manualSelector": {
          "description": "manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector",
          "type": "boolean"
        },
        "maxFailedIndexes": {
          "description": "Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).",
          "format": "int32",
          "type": "integer"
        },
        "parallelism": {
          "description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "format": "int32",
          "type": "integer"
        },
        "podFailurePolicy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.batch.v1.PodFailurePolicy"
            }
          ],
          "description": "Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure."
        },
        "podReplacementPolicy": {
          "description": "podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods\n  when they are terminating (has a metadata.deletionTimestamp) or failed.\n- Failed means to wait until a previously created Pod is fully terminated (has phase\n  Failed or Succeeded) before creating a replacement Pod.\n\nWhen using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.\n\nPossible enum values:\n - `\"Failed\"` means to wait until a previously created Pod is fully terminated (has phase Failed or Succeeded) before creating a replacement Pod.\n - `\"TerminatingOrFailed\"` means that we recreate pods when they are terminating (has a metadata.deletionTimestamp) or failed.",
          "enum": [
            "Failed",
            "TerminatingOrFailed"
          ],
          "type": "string"
        },
        "selector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
        },
        "successPolicy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.batch.v1.SuccessPolicy"
            }
          ],
          "description": "successPolicy specifies the policy when the Job can be declared as succeeded. If empty, the default behavior applies - the Job is declared as succeeded only when the number of succeeded pods equals to the completions. When the field is specified, it must be immutable and works only for the Indexed Jobs. Once the Job meets the SuccessPolicy, the lingering pods are terminated.\n\nThis field is beta-level. To use this field, you must enable the `JobSuccessPolicy` feature gate (enabled by default)."
        },
        "suspend": {
          "description": "suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.",
          "type": "boolean"
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "default": {},
          "description": "Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are \"Never\" or \"OnFailure\". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/"
        },
        "ttlSecondsAfterFinished": {
          "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobStatus": {
      "description": "JobStatus represents the current state of a Job.",
      "properties": {
        "active": {
          "description": "The number of pending and running pods which are not terminating (without a deletionTimestamp). The value is zero for finished jobs.",
          "format": "int32",
          "type": "integer"
        },
        "completedIndexes": {
          "description": "completedIndexes holds the completed indexes when .spec.completionMode = \"Indexed\" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\".",
          "type": "string"
        },
        "completionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is set when the job finishes successfully, and only then. The value cannot be updated or removed. The value indicates the same or later point in time as the startTime field."
        },
        "conditions": {
          "description": "The latest available observations of an object's current state. When a Job fails, one of the conditions will have type \"Failed\" and status true. When a Job is suspended, one of the conditions will have type \"Suspended\" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type \"Complete\" and status true.\n\nA job is considered finished when it is in a terminal condition, either \"Complete\" or \"Failed\". A Job cannot have both the \"Complete\" and \"Failed\" conditions. Additionally, it cannot be in the \"Complete\" and \"FailureTarget\" conditions. The \"Complete\", \"Failed\" and \"FailureTarget\" conditions cannot be disabled.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "failed": {
          "description": "The number of pods which reached phase Failed. The value increases monotonically.",
          "format": "int32",
          "type": "integer"
        },
        "failedIndexes": {
          "description": "FailedIndexes holds the failed indexes when spec.backoffLimitPerIndex is set. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\". The set of failed indexes cannot overlap with the set of completed indexes.\n\nThis field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).",
          "type": "string"
        },
        "ready": {
          "description": "The number of active pods which have a Ready condition and are not terminating (without a deletionTimestamp).",
          "format": "int32",
          "type": "integer"
        },
        "startTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.\n\nOnce set, the field can only be removed when the job is suspended. The field cannot be modified while the job is unsuspended or finished."
        },
        "succeeded": {
          "description": "The number of pods which reached phase Succeeded. The value increases monotonically for a given spec. However, it may decrease in reaction to scale down of elastic indexed jobs.",
          "format": "int32",
          "type": "integer"
        },
        "terminating": {
          "description": "The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).\n\nThis field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).",
          "format": "int32",
          "type": "integer"
        },
        "uncountedTerminatedPods": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.batch.v1.UncountedTerminatedPods"
            }
          ],
          "description": "uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.\n\nThe job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:\n\n1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding\n    counter.\n\nOld jobs might not be tracked using this field, in which case the field remains null. The structure is empty for finished jobs."
        }
      },
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobTemplateSpec": {
      "description": "JobTemplateSpec describes the data a Job should have when created from a template",
      "properties": {
        "metadata": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
            }
          ],
          "default": {},
          "description": "Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobSpec"
            }
          ],
          "default": {},
          "description": "Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "type": "object"
    },
    "io.k8s.api.batch.v1.PodFailurePolicy": {
      "description": "PodFailurePolicy describes how failed pods influence the backoffLimit.",
      "properties": {
        "rules": {
          "description": "A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.PodFailurePolicyRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement": {
      "description": "PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.",
      "properties": {
        "containerName": {
          "description": "Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.",
          "type": "string"
        },
        "operator": {
          "default": "",
          "description": "Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:\n\n- In: the requirement is satisfied if at least one container exit code\n  (might be multiple if there are multiple containers not restricted\n  by the 'containerName' field) is in the set of specified values.\n- NotIn: the requirement is satisfied if at least one container exit code\n  (might be multiple if there are multiple containers not restricted\n  by the 'containerName' field) is not in the set of specified values.\nAdditional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.\n\nPossible enum values:\n - `\"In\"`\n - `\"NotIn\"`",
          "enum": [
            "In",
            "NotIn"
          ],
          "type": "string"
        },
        "values": {
          "description": "Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.",
          "items": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "required": [
        "operator",
        "values"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern": {
      "description": "PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.",
      "properties": {
        "status": {
          "default": "",
          "description": "Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.PodFailurePolicyRule": {
      "description": "PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.",
      "properties": {
        "action": {
          "default": "",
          "description": "Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:\n\n- FailJob: indicates that the pod's job is marked as Failed and all\n  running pods are terminated.\n- FailIndex: indicates that the pod's index is marked as Failed and will\n  not be restarted.\n  This value is beta-level. It can be used when the\n  `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).\n- Ignore: indicates that the counter towards the .backoffLimit is not\n  incremented and a replacement pod is created.\n- Count: indicates that the pod is handled in the default way - the\n  counter towards the .backoffLimit is incremented.\nAdditional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.\n\nPossible enum values:\n - `\"Count\"` This is an action which might be taken on a pod failure - the pod failure is handled in the default way - the counter towards .backoffLimit, represented by the job's .status.failed field, is incremented.\n - `\"FailIndex\"` This is an action which might be taken on a pod failure - mark the Job's index as failed to avoid restarts within this index. This action can only be used when backoffLimitPerIndex is set. This value is beta-level.\n - `\"FailJob\"` This is an action which might be taken on a pod failure - mark the pod's job as Failed and terminate all running pods.\n - `\"Ignore\"` This is an action which might be taken on a pod failure - the counter towards .backoffLimit, represented by the job's .status.failed field, is not incremented and a replacement pod is created.",
          "enum": [
            "Count",
            "FailIndex",
            "FailJob",
            "Ignore"
          ],
          "type": "string"
        },
        "onExitCodes": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement"
            }
          ],
          "description": "Represents the requirement on the container exit codes."
        },
        "onPodConditions": {
          "description": "Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "action"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.SuccessPolicy": {
      "description": "SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.",
      "properties": {
        "rules": {
          "description": "rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded >= .spec.completions`. Once any of the rules are met, the \"SucceededCriteriaMet\" condition is added, and the lingering pods are removed. The terminal state for such a Job has the \"Complete\" condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.SuccessPolicyRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.SuccessPolicyRule": {
      "description": "SuccessPolicyRule describes rule for declaring a Job as succeeded. Each rule must have at least one of the \"succeededIndexes\" or \"succeededCount\" specified.",
      "properties": {
        "succeededCount": {
          "description": "succeededCount specifies the minimal required size of the actual set of the succeeded indexes for the Job. When succeededCount is used along with succeededIndexes, the check is constrained only to the set of indexes specified by succeededIndexes. For example, given that succeededIndexes is \"1-4\", succeededCount is \"3\", and completed indexes are \"1\", \"3\", and \"5\", the Job isn't declared as succeeded because only \"1\" and \"3\" indexes are considered in that rules. When this field is null, this doesn't default to any value and is never evaluated at any time. When specified it needs to be a positive integer.",
          "format": "int32",
          "type": "integer"
        },
        "succeededIndexes": {
          "description": "succeededIndexes specifies the set of indexes which need to be contained in the actual set of the succeeded indexes for the Job. The list of indexes must be within 0 to \".spec.completions-1\" and must not contain duplicates. At least one element is required. The indexes are represented as intervals separated by commas. The intervals can be a decimal integer or a pair of decimal integers separated by a hyphen. The number are listed in represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\". When this field is null, this field doesn't default to any value and is never evaluated at any time.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.batch.v1.UncountedTerminatedPods": {
      "description": "UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.",
      "properties": {
        "failed": {
          "description": "failed holds UIDs of failed Pods.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "succeeded": {
          "description": "succeeded holds UIDs of succeeded Pods.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "type": "object"
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestCondition": {
      "description": "CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time."
        },
        "lastUpdateTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "lastUpdateTime is the time of the last update to this condition"
        },
        "message": {
          "description": "message contains a human readable message with details about the request state",
          "type": "string"
        },
        "reason": {
          "description": "reason indicates a brief reason for the request state",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be \"False\" or \"Unknown\".",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "type of the condition. Known conditions are \"Approved\", \"Denied\", and \"Failed\".\n\nAn \"Approved\" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.\n\nA \"Denied\" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.\n\nA \"Failed\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.\n\nApproved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.\n\nOnly one condition of a given type is allowed.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestSpec": {
      "description": "CertificateSigningRequestSpec contains the certificate request.",
      "properties": {
        "expirationSeconds": {
          "description": "expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.\n\nThe v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.\n\nCertificate signers may not honor this field for various reasons:\n\n  1. Old signer that is unaware of the field (such as the in-tree\n     implementations prior to v1.22)\n  2. Signer whose configured maximum is shorter than the requested duration\n  3. Signer whose configured minimum is longer than the requested duration\n\nThe minimum valid value for expirationSeconds is 600, i.e. 10 minutes.",
          "format": "int32",
          "type": "integer"
        },
        "extra": {
          "additionalProperties": {
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array"
          },
          "description": "extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "object"
        },
        "groups": {
          "description": "groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "request": {
          "description": "request contains an x509 certificate signing request encoded in a \"CERTIFICATE REQUEST\" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.",
          "format": "byte",
          "type": "string",
          "x-kubernetes-list-type": "atomic"
        },
        "signerName": {
          "default": "",
          "description": "signerName indicates the requested signer, and is a qualified name.\n\nList/watch requests for CertificateSigningRequests can filter on this field using a \"spec.signerName=NAME\" fieldSelector.\n\nWell-known Kubernetes signers are:\n 1. \"kubernetes.io/kube-apiserver-client\": issues client certificates that can be used to authenticate to kube-apiserver.\n  Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the \"csrsigning\" controller in kube-controller-manager.\n 2. \"kubernetes.io/kube-apiserver-client-kubelet\": issues client certificates that kubelets use to authenticate to kube-apiserver.\n  Requests for this signer can be auto-approved by the \"csrapproving\" controller in kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n 3. \"kubernetes.io/kubelet-serving\" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.\n  Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n\nMore details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers\n\nCustom signerNames can also be specified. The signer defines:\n 1. Trust distribution: how trust (CA bundles) are distributed.\n 2. Permitted subjects: and behavior when a disallowed subject is requested.\n 3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.\n 4. Required, permitted, or forbidden key usages / extended key usages.\n 5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.\n 6. Whether or not requests for CA certificates are allowed.",
          "type": "string"
        },
        "uid": {
          "description": "uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "string"
        },
        "usages": {
          "description": "usages specifies a set of key usages requested in the issued certificate.\n\nRequests for TLS client certificates typically request: \"digital signature\", \"key encipherment\", \"client auth\".\n\nRequests for TLS serving certificates typically request: \"key encipherment\", \"digital signature\", \"server auth\".\n\nValid values are:\n \"signing\", \"digital signature\", \"content commitment\",\n \"key encipherment\", \"key agreement\", \"data encipherment\",\n \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\",\n \"server auth\", \"client auth\",\n \"code signing\", \"email protection\", \"s/mime\",\n \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\",\n \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
          "items": {
            "default": "",
            "enum": [
              "any",
              "cert sign",
              "client auth",
              "code signing",
              "content commitment",
              "crl sign",
              "data encipherment",
              "decipher only",
              "digital signature",
              "email protection",
              "encipher only",
              "ipsec end system",
              "ipsec tunnel",
              "ipsec user",
              "key agreement",
              "key encipherment",
              "microsoft sgc",
              "netscape sgc",
              "ocsp signing",
              "s/mime",
              "server auth",
              "signing",
              "timestamping"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "username": {
          "description": "username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "string"
        }
      },
      "required": [
        "request",
        "signerName"
      ],
      "type": "object"
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestStatus": {
      "description": "CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.",
      "properties": {
        "certificate": {
          "description": "certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.\n\nIf the certificate signing request is denied, a condition of type \"Denied\" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type \"Failed\" is added and this field remains empty.\n\nValidation requirements:\n 1. certificate must contain one or more PEM blocks.\n 2. All PEM blocks must have the \"CERTIFICATE\" label, contain no headers, and the encoded data\n  must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.\n 3. Non-PEM content may appear before or after the \"CERTIFICATE\" PEM blocks and is unvalidated,\n  to allow for explanatory text as described in section 5.2 of RFC7468.\n\nIf more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.\n\nThe certificate is encoded in PEM format.\n\nWhen serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:\n\n    base64(\n    -----BEGIN CERTIFICATE-----\n    ...\n    -----END CERTIFICATE-----\n    )",
          "format": "byte",
          "type": "string",
          "x-kubernetes-list-type": "atomic"
        },
        "conditions": {
          "description": "conditions applied to the request. Known conditions are \"Approved\", \"Denied\", and \"Failed\".",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.certificates.v1.CertificateSigningRequestCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object"
    },
    "io.k8s.api.coordination.v1.LeaseSpec": {
      "description": "LeaseSpec is a specification of a Lease.",
      "properties": {
        "acquireTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
            }
          ],
          "description": "acquireTime is a time when the current lease was acquired."
        },
        "holderIdentity": {
          "description": "holderIdentity contains the identity of the holder of a current lease. If Coordinated Leader Election is used, the holder identity must be equal to the elected LeaseCandidate.metadata.name field.",
          "type": "string"
        },
        "leaseDurationSeconds": {
          "description": "leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measured against the time of last observed renewTime.",
          "format": "int32",
          "type": "integer"
        },
        "leaseTransitions": {
          "description": "leaseTransitions is the number of transitions of a lease between holders.",
          "format": "int32",
          "type": "integer"
        },
        "preferredHolder": {
          "description": "PreferredHolder signals to a lease holder that the lease has a more optimal holder and should be given up. This field can only be set if Strategy is also set.",
          "type": "string"
        },
        "renewTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
            }
          ],
          "description": "renewTime is a time when the current holder of a lease has last updated the lease."
        },
        "strategy": {
          "description": "Strategy indicates the strategy for picking the leader for coordinated leader election. If the field is not specified, there is no active coordination for this lease. (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
          "format": "int32",
          "type": "integer"
        },
        "readOnly": {
          "description": "readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "boolean"
        },
        "volumeID": {
          "default": "",
          "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Affinity": {
      "description": "Affinity is a group of affinity scheduling rules.",
      "properties": {
        "nodeAffinity": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeAffinity"
            }
          ],
          "description": "Describes node affinity scheduling rules for the pod."
        },
        "podAffinity": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodAffinity"
            }
          ],
          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
        },
        "podAntiAffinity": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodAntiAffinity"
            }
          ],
          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AppArmorProfile": {
      "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
      "properties": {
        "localhostProfile": {
          "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.\n\nPossible enum values:\n - `\"Localhost\"` indicates that a profile pre-loaded on the node should be used.\n - `\"RuntimeDefault\"` indicates that the container runtime's default AppArmor profile should be used.\n - `\"Unconfined\"` indicates that no AppArmor profile should be enforced.",
          "enum": [
            "Localhost",
            "RuntimeDefault",
            "Unconfined"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "localhostProfile": "LocalhostProfile"
          }
        }
      ]
    },
    "io.k8s.api.core.v1.AttachedVolume": {
      "description": "AttachedVolume describes a volume attached to a node",
      "properties": {
        "devicePath": {
          "default": "",
          "description": "DevicePath represents the device path where the volume should be available",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name of the attached volume",
          "type": "string"
        }
      },
      "required": [
        "name",
        "devicePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureDiskVolumeSource": {
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
      "properties": {
        "cachingMode": {
          "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.\n\nPossible enum values:\n - `\"None\"`\n - `\"ReadOnly\"`\n - `\"ReadWrite\"`",
          "enum": [
            "None",
            "ReadOnly",
            "ReadWrite"
          ],
          "type": "string"
        },
        "diskName": {
          "default": "",
          "description": "diskName is the Name of the data disk in the blob storage",
          "type": "string"
        },
        "diskURI": {
          "default": "",
          "description": "diskURI is the URI of data disk in the blob storage",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "kind": {
          "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared\n\nPossible enum values:\n - `\"Dedicated\"`\n - `\"Managed\"`\n - `\"Shared\"`",
          "enum": [
            "Dedicated",
            "Managed",
            "Shared"
          ],
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        }
      },
      "required": [
        "diskName",
        "diskURI"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFilePersistentVolumeSource": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "properties": {
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "default": "",
          "description": "secretName is the name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "secretNamespace": {
          "description": "secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod",
          "type": "string"
        },
        "shareName": {
          "default": "",
          "description": "shareName is the azure Share Name",
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFileVolumeSource": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "properties": {
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "default": "",
          "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "shareName": {
          "default": "",
          "description": "shareName is the azure share Name",
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CSIPersistentVolumeSource": {
      "description": "Represents storage that is managed by an external CSI volume driver (Beta feature)",
      "properties": {
        "controllerExpandSecretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretReference"
            }
          ],
          "description": "controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "controllerPublishSecretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretReference"
            }
          ],
          "description": "controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "driver": {
          "default": "",
          "description": "driver is the name of the driver to use for this volume. Required.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\".",
          "type": "string"
        },
        "nodeExpandSecretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretReference"
            }
          ],
          "description": "nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "nodePublishSecretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretReference"
            }
          ],
          "description": "nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "nodeStageSecretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretReference"
            }
          ],
          "description": "nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "readOnly": {
          "description": "readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "volumeAttributes of the volume to publish.",
          "type": "object"
        },
        "volumeHandle": {
          "default": "",
          "description": "volumeHandle is the unique volume name returned by the CSI volume plugin\u2019s CreateVolume to refer to the volume on all subsequent calls. Required.",
          "type": "string"
        }
      },
      "required": [
        "driver",
        "volumeHandle"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CSIVolumeSource": {
      "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
      "properties": {
        "driver": {
          "default": "",
          "description": "driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed."
        },
        "readOnly": {
          "description": "readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
          "type": "object"
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Capabilities": {
      "description": "Adds and removes POSIX capabilities from running containers.",
      "properties": {
        "add": {
          "description": "Added capabilities",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "drop": {
          "description": "Removed capabilities",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSPersistentVolumeSource": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "path": {
          "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretReference"
            }
          ],
          "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        },
        "user": {
          "description": "user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSVolumeSource": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        },
        "user": {
          "description": "user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderPersistentVolumeSource": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretReference"
            }
          ],
          "description": "secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack."
        },
        "volumeID": {
          "default": "",
          "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderVolumeSource": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "secretRef is optional: points to a secret object containing parameters used to connect to OpenStack."
        },
        "volumeID": {
          "default": "",
          "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ClaimSource": {
      "description": "ClaimSource describes a reference to a ResourceClaim.\n\nExactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.",
      "properties": {
        "resourceClaimName": {
          "description": "ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.",
          "type": "string"
        },
        "resourceClaimTemplateName": {
          "description": "ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.\n\nThe template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.\n\nThis field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ClientIPConfig": {
      "description": "ClientIPConfig represents the configurations of Client IP based session affinity.",
      "properties": {
        "timeoutSeconds": {
          "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ClusterTrustBundleProjection": {
      "description": "ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.",
      "properties": {
        "labelSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "Select all ClusterTrustBundles that match this label selector.  Only has effect if signerName is set.  Mutually-exclusive with name.  If unset, interpreted as \"match nothing\".  If set but empty, interpreted as \"match everything\"."
        },
        "name": {
          "description": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.",
          "type": "string"
        },
        "optional": {
          "description": "If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.",
          "type": "boolean"
        },
        "path": {
          "default": "",
          "description": "Relative path from the volume root to write the bundle.",
          "type": "string"
        },
        "signerName": {
          "description": "Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ComponentCondition": {
      "description": "Information about the condition of a component.",
      "properties": {
        "error": {
          "description": "Condition error code for a component. For example, a health check error code.",
          "type": "string"
        },
        "message": {
          "description": "Message about the condition for a component. For example, information about a health check.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of condition for a component. Valid value: \"Healthy\"",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapEnvSource": {
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapKeySelector": {
      "description": "Selects a key from a ConfigMap.",
      "properties": {
        "key": {
          "default": "",
          "description": "The key to select.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ConfigMapNodeConfigSource": {
      "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration",
      "properties": {
        "kubeletConfigKey": {
          "default": "",
          "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.",
          "type": "string"
        },
        "namespace": {
          "default": "",
          "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.",
          "type": "string"
        },
        "resourceVersion": {
          "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "name",
        "kubeletConfigKey"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapProjection": {
      "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
      "properties": {
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.KeyToPath"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapVolumeSource": {
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.KeyToPath"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Container": {
      "description": "A single application container that you want to run within a pod.",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvFromSource"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "image": {
          "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
          "enum": [
            "Always",
            "IfNotPresent",
            "Never"
          ],
          "type": "string"
        },
        "lifecycle": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.Lifecycle"
            }
          ],
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated."
        },
        "livenessProbe": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
            }
          ],
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "name": {
          "default": "",
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerPort"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
            }
          ],
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "resizePolicy": {
          "description": "Resources resize policy for the container.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerResizePolicy"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceRequirements"
            }
          ],
          "default": {},
          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        },
        "restartPolicy": {
          "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
          "type": "string"
        },
        "securityContext": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecurityContext"
            }
          ],
          "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"
        },
        "startupProbe": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
            }
          ],
          "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
          "enum": [
            "FallbackToLogsOnError",
            "File"
          ],
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeDevice"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeMount"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerImage": {
      "description": "Describe a container image",
      "properties": {
        "names": {
          "description": "Names by which this image is known. e.g. [\"kubernetes.example/hyperkube:v1.0.7\", \"cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7\"]",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "sizeBytes": {
          "description": "The size of the image in bytes.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerPort": {
      "description": "ContainerPort represents a network port in a single container.",
      "properties": {
        "containerPort": {
          "default": 0,
          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
          "format": "int32",
          "type": "integer"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.",
          "type": "string"
        },
        "hostPort": {
          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
          "type": "string"
        },
        "protocol": {
          "default": "TCP",
          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "required": [
        "containerPort"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerResizePolicy": {
      "description": "ContainerResizePolicy represents resource resize policy for the container.",
      "properties": {
        "resourceName": {
          "default": "",
          "description": "Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.",
          "type": "string"
        },
        "restartPolicy": {
          "default": "",
          "description": "Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.",
          "type": "string"
        }
      },
      "required": [
        "resourceName",
        "restartPolicy"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerState": {
      "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
      "properties": {
        "running": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerStateRunning"
            }
          ],
          "description": "Details about a running container"
        },
        "terminated": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerStateTerminated"
            }
          ],
          "description": "Details about a terminated container"
        },
        "waiting": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerStateWaiting"
            }
          ],
          "description": "Details about a waiting container"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateRunning": {
      "description": "ContainerStateRunning is a running state of a container.",
      "properties": {
        "startedAt": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Time at which the container was last (re-)started"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateTerminated": {
      "description": "ContainerStateTerminated is a terminated state of a container.",
      "properties": {
        "containerID": {
          "description": "Container's ID in the format '<type>://<container_id>'",
          "type": "string"
        },
        "exitCode": {
          "default": 0,
          "description": "Exit status from the last termination of the container",
          "format": "int32",
          "type": "integer"
        },
        "finishedAt": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Time at which the container last terminated"
        },
        "message": {
          "description": "Message regarding the last termination of the container",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason from the last termination of the container",
          "type": "string"
        },
        "signal": {
          "description": "Signal from the last termination of the container",
          "format": "int32",
          "type": "integer"
        },
        "startedAt": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Time at which previous execution of the container started"
        }
      },
      "required": [
        "exitCode"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateWaiting": {
      "description": "ContainerStateWaiting is a waiting state of a container.",
      "properties": {
        "message": {
          "description": "Message regarding why the container is not yet running.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason the container is not yet running.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStatus": {
      "description": "ContainerStatus contains details for the current status of this container.",
      "properties": {
        "allocatedResources": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.",
          "type": "object"
        },
        "allocatedResourcesStatus": {
          "description": "AllocatedResourcesStatus represents the status of various resources allocated for this Pod.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceStatus"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "containerID": {
          "description": "ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example \"containerd\").",
          "type": "string"
        },
        "image": {
          "default": "",
          "description": "Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.",
          "type": "string"
        },
        "imageID": {
          "default": "",
          "description": "ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.",
          "type": "string"
        },
        "lastState": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerState"
            }
          ],
          "default": {},
          "description": "LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0."
        },
        "name": {
          "default": "",
          "description": "Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.",
          "type": "string"
        },
        "ready": {
          "default": false,
          "description": "Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).\n\nThe value is typically used to determine whether a container is ready to accept traffic.",
          "type": "boolean"
        },
        "resources": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceRequirements"
            }
          ],
          "description": "Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized."
        },
        "restartCount": {
          "default": 0,
          "description": "RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.",
          "format": "int32",
          "type": "integer"
        },
        "started": {
          "description": "Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.",
          "type": "boolean"
        },
        "state": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerState"
            }
          ],
          "default": {},
          "description": "State holds details about the container's current condition."
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerUser"
            }
          ],
          "description": "User represents user identity information initially attached to the first process of the container"
        },
        "volumeMounts": {
          "description": "Status of volume mounts.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeMountStatus"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "mountPath"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "name",
        "ready",
        "restartCount",
        "image",
        "imageID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerUser": {
      "description": "ContainerUser represents user identity information",
      "properties": {
        "linux": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LinuxContainerUser"
            }
          ],
          "description": "Linux holds user identity information initially attached to the first process of the containers in Linux. Note that the actual running identity can be changed if the process has enough privilege to do so."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.DaemonEndpoint": {
      "description": "DaemonEndpoint contains information about a single Daemon endpoint.",
      "properties": {
        "Port": {
          "default": 0,
          "description": "Port number of the given endpoint.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "Port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIProjection": {
      "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
      "properties": {
        "items": {
          "description": "Items is a list of DownwardAPIVolume file",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.DownwardAPIVolumeFile"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "properties": {
        "fieldRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectFieldSelector"
            }
          ],
          "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported."
        },
        "mode": {
          "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "default": "",
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
          "type": "string"
        },
        "resourceFieldRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceFieldSelector"
            }
          ],
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported."
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "Items is a list of downward API volume file",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.DownwardAPIVolumeFile"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EmptyDirVolumeSource": {
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
      "properties": {
        "medium": {
          "description": "medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "type": "string"
        },
        "sizeLimit": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
            }
          ],
          "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EndpointAddress": {
      "description": "EndpointAddress is a tuple that describes single IP address.",
      "properties": {
        "hostname": {
          "description": "The Hostname of this endpoint",
          "type": "string"
        },
        "ip": {
          "default": "",
          "description": "The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).",
          "type": "string"
        },
        "nodeName": {
          "description": "Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.",
          "type": "string"
        },
        "targetRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "Reference to object providing the endpoint."
        }
      },
      "required": [
        "ip"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.EndpointPort": {
      "description": "EndpointPort is a tuple that describes a single port.",
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.",
          "type": "string"
        },
        "name": {
          "description": "The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.",
          "type": "string"
        },
        "port": {
          "default": 0,
          "description": "The port number of the endpoint.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.EndpointSubset": {
      "description": "EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n\n\t{\n\t  Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n\t  Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n\t}\n\nThe resulting set of endpoints can be viewed as:\n\n\ta: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n\tb: [ 10.10.1.1:309, 10.10.2.2:309 ]",
      "properties": {
        "addresses": {
          "description": "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointAddress"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "notReadyAddresses": {
          "description": "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointAddress"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "ports": {
          "description": "Port numbers available on the related IP addresses.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointPort"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvFromSource": {
      "description": "EnvFromSource represents the source of a set of ConfigMaps",
      "properties": {
        "configMapRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapEnvSource"
            }
          ],
          "description": "The ConfigMap to select from"
        },
        "prefix": {
          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretEnvSource"
            }
          ],
          "description": "The Secret to select from"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVar": {
      "description": "EnvVar represents an environment variable present in a Container.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "value": {
          "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
          "type": "string"
        },
        "valueFrom": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVarSource"
            }
          ],
          "description": "Source for the environment variable's value. Cannot be used if value is not empty."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVarSource": {
      "description": "EnvVarSource represents a source for the value of an EnvVar.",
      "properties": {
        "configMapKeyRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapKeySelector"
            }
          ],
          "description": "Selects a key of a ConfigMap."
        },
        "fieldRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectFieldSelector"
            }
          ],
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs."
        },
        "resourceFieldRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceFieldSelector"
            }
          ],
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
        },
        "secretKeyRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretKeySelector"
            }
          ],
          "description": "Selects a key of a secret in the pod's namespace"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EphemeralContainer": {
      "description": "An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.\n\nTo add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvFromSource"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "image": {
          "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
          "enum": [
            "Always",
            "IfNotPresent",
            "Never"
          ],
          "type": "string"
        },
        "lifecycle": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.Lifecycle"
            }
          ],
          "description": "Lifecycle is not allowed for ephemeral containers."
        },
        "livenessProbe": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
            }
          ],
          "description": "Probes are not allowed for ephemeral containers."
        },
        "name": {
          "default": "",
          "description": "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.",
          "type": "string"
        },
        "ports": {
          "description": "Ports are not allowed for ephemeral containers.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerPort"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
            }
          ],
          "description": "Probes are not allowed for ephemeral containers."
        },
        "resizePolicy": {
          "description": "Resources resize policy for the container.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerResizePolicy"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceRequirements"
            }
          ],
          "default": {},
          "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod."
        },
        "restartPolicy": {
          "description": "Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.",
          "type": "string"
        },
        "securityContext": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecurityContext"
            }
          ],
          "description": "Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext."
        },
        "startupProbe": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
            }
          ],
          "description": "Probes are not allowed for ephemeral containers."
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "targetContainerName": {
          "description": "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.",
          "type": "string"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
          "enum": [
            "FallbackToLogsOnError",
            "File"
          ],
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeDevice"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeMount"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EphemeralVolumeSource": {
      "description": "Represents an ephemeral volume that is handled by a normal storage driver.",
      "properties": {
        "volumeClaimTemplate": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
            }
          ],
          "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\nRequired, must not be nil."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EventSeries": {
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
      "properties": {
        "count": {
          "description": "Number of occurrences in this series up to the last heartbeat time",
          "format": "int32",
          "type": "integer"
        },
        "lastObservedTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
            }
          ],
          "description": "Time of the last occurrence observed"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EventSource": {
      "description": "EventSource contains information for an event.",
      "properties": {
        "component": {
          "description": "Component from which the event is generated.",
          "type": "string"
        },
        "host": {
          "description": "Node name on which the event is generated.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ExecAction": {
      "description": "ExecAction describes a \"run in container\" action.",
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FCVolumeSource": {
      "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "lun": {
          "description": "lun is Optional: FC target lun number",
          "format": "int32",
          "type": "integer"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "targetWWNs": {
          "description": "targetWWNs is Optional: FC target worldwide names (WWNs)",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "wwids": {
          "description": "wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexPersistentVolumeSource": {
      "description": "FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.",
      "properties": {
        "driver": {
          "default": "",
          "description": "driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "options is Optional: this field holds extra command options if any.",
          "type": "object"
        },
        "readOnly": {
          "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretReference"
            }
          ],
          "description": "secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexVolumeSource": {
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
      "properties": {
        "driver": {
          "default": "",
          "description": "driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "options is Optional: this field holds extra command options if any.",
          "type": "object"
        },
        "readOnly": {
          "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlockerVolumeSource": {
      "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "datasetName": {
          "description": "datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
          "type": "string"
        },
        "datasetUUID": {
          "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "format": "int32",
          "type": "integer"
        },
        "pdName": {
          "default": "",
          "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "boolean"
        }
      },
      "required": [
        "pdName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GRPCAction": {
      "properties": {
        "port": {
          "default": 0,
          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
          "format": "int32",
          "type": "integer"
        },
        "service": {
          "default": "",
          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GitRepoVolumeSource": {
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
      "properties": {
        "directory": {
          "description": "directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
          "type": "string"
        },
        "repository": {
          "default": "",
          "description": "repository is the URL",
          "type": "string"
        },
        "revision": {
          "description": "revision is the commit hash for the specified revision.",
          "type": "string"
        }
      },
      "required": [
        "repository"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsPersistentVolumeSource": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "default": "",
          "description": "endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "endpointsNamespace": {
          "description": "endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "default": "",
          "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsVolumeSource": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "default": "",
          "description": "endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "default": "",
          "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPGetAction": {
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.HTTPHeader"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "type": "string"
        },
        "port": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host. Defaults to HTTP.\n\nPossible enum values:\n - `\"HTTP\"` means that the scheme used will be http://\n - `\"HTTPS\"` means that the scheme used will be https://",
          "enum": [
            "HTTP",
            "HTTPS"
          ],
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPHeader": {
      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
      "properties": {
        "name": {
          "default": "",
          "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "The header field value",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HostAlias": {
      "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
      "properties": {
        "hostnames": {
          "description": "Hostnames for the above IP address.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "ip": {
          "description": "IP address of the host file entry.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.HostIP": {
      "description": "HostIP represents a single IP address allocated to the host.",
      "properties": {
        "ip": {
          "default": "",
          "description": "IP is the IP address assigned to the host",
          "type": "string"
        }
      },
      "required": [
        "ip"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HostPathVolumeSource": {
      "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "default": "",
          "description": "path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        },
        "type": {
          "description": "type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n\nPossible enum values:\n - `\"\"` For backwards compatible, leave it empty if unset\n - `\"BlockDevice\"` A block device must exist at the given path\n - `\"CharDevice\"` A character device must exist at the given path\n - `\"Directory\"` A directory must exist at the given path\n - `\"DirectoryOrCreate\"` If nothing exists at the given path, an empty directory will be created there as needed with file mode 0755, having the same group and ownership with Kubelet.\n - `\"File\"` A file must exist at the given path\n - `\"FileOrCreate\"` If nothing exists at the given path, an empty file will be created there as needed with file mode 0644, having the same group and ownership with Kubelet.\n - `\"Socket\"` A UNIX socket must exist at the given path",
          "enum": [
            "",
            "BlockDevice",
            "CharDevice",
            "Directory",
            "DirectoryOrCreate",
            "File",
            "FileOrCreate",
            "Socket"
          ],
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIPersistentVolumeSource": {
      "description": "ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "default": "",
          "description": "iqn is Target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "default": "default",
          "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "default": 0,
          "description": "lun is iSCSI Target Lun number.",
          "format": "int32",
          "type": "integer"
        },
        "portals": {
          "description": "portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretReference"
            }
          ],
          "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication"
        },
        "targetPortal": {
          "default": "",
          "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIVolumeSource": {
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "default": "",
          "description": "iqn is the target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "default": 0,
          "description": "lun represents iSCSI Target Lun number.",
          "format": "int32",
          "type": "integer"
        },
        "portals": {
          "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication"
        },
        "targetPortal": {
          "default": "",
          "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ImageVolumeSource": {
      "description": "ImageVolumeSource represents a image volume resource.",
      "properties": {
        "pullPolicy": {
          "description": "Policy for pulling OCI objects. Possible values are: Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present. IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
          "enum": [
            "Always",
            "IfNotPresent",
            "Never"
          ],
          "type": "string"
        },
        "reference": {
          "description": "Required: Image or artifact reference to be used. Behaves in the same way as pod.spec.containers[*].image. Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.KeyToPath": {
      "description": "Maps a string key to a path within a volume.",
      "properties": {
        "key": {
          "default": "",
          "description": "key is the key to project.",
          "type": "string"
        },
        "mode": {
          "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "default": "",
          "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Lifecycle": {
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "properties": {
        "postStart": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LifecycleHandler"
            }
          ],
          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
        },
        "preStop": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LifecycleHandler"
            }
          ],
          "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LifecycleHandler": {
      "description": "LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.",
      "properties": {
        "exec": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ExecAction"
            }
          ],
          "description": "Exec specifies the action to take."
        },
        "httpGet": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.HTTPGetAction"
            }
          ],
          "description": "HTTPGet specifies the http request to perform."
        },
        "sleep": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SleepAction"
            }
          ],
          "description": "Sleep represents the duration that the container should sleep before being terminated."
        },
        "tcpSocket": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.TCPSocketAction"
            }
          ],
          "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LimitRangeItem": {
      "description": "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.",
      "properties": {
        "default": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Default resource requirement limit value by resource name if resource limit is omitted.",
          "type": "object"
        },
        "defaultRequest": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.",
          "type": "object"
        },
        "max": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Max usage constraints on this kind by resource name.",
          "type": "object"
        },
        "maxLimitRequestRatio": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.",
          "type": "object"
        },
        "min": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Min usage constraints on this kind by resource name.",
          "type": "object"
        },
        "type": {
          "default": "",
          "description": "Type of resource that this limit applies to.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.LimitRangeSpec": {
      "description": "LimitRangeSpec defines a min/max usage limit for resources that match on kind.",
      "properties": {
        "limits": {
          "description": "Limits is the list of LimitRangeItem objects that are enforced.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRangeItem"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "limits"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.LinuxContainerUser": {
      "description": "LinuxContainerUser represents user identity information in Linux containers",
      "properties": {
        "gid": {
          "default": 0,
          "description": "GID is the primary gid initially attached to the first process in the container",
          "format": "int64",
          "type": "integer"
        },
        "supplementalGroups": {
          "description": "SupplementalGroups are the supplemental groups initially attached to the first process in the container",
          "items": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "uid": {
          "default": 0,
          "description": "UID is the primary uid initially attached to the first process in the container",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "uid",
        "gid"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.LoadBalancerIngress": {
      "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
      "properties": {
        "hostname": {
          "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
          "type": "string"
        },
        "ip": {
          "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
          "type": "string"
        },
        "ipMode": {
          "description": "IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified. Setting this to \"VIP\" indicates that traffic is delivered to the node with the destination set to the load-balancer's IP and port. Setting this to \"Proxy\" indicates that traffic is delivered to the node or pod with the destination set to the node's IP and node port or the pod's IP and port. Service implementations may use this information to adjust traffic routing.",
          "type": "string"
        },
        "ports": {
          "description": "Ports is a list of records of service ports If used, every port defined in the service should have an entry in it",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PortStatus"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LoadBalancerStatus": {
      "description": "LoadBalancerStatus represents the status of a load-balancer.",
      "properties": {
        "ingress": {
          "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LoadBalancerIngress"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.LocalVolumeSource": {
      "description": "Local represents directly-attached storage with node affinity (Beta feature)",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a filesystem if unspecified.",
          "type": "string"
        },
        "path": {
          "default": "",
          "description": "path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ModifyVolumeStatus": {
      "description": "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation",
      "properties": {
        "status": {
          "default": "",
          "description": "status is the status of the ControllerModifyVolume operation. It can be in any of following states:\n - Pending\n   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as\n   the specified VolumeAttributesClass not existing.\n - InProgress\n   InProgress indicates that the volume is being modified.\n - Infeasible\n  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To\n\t  resolve the error, a valid VolumeAttributesClass needs to be specified.\nNote: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.\n\nPossible enum values:\n - `\"InProgress\"` InProgress indicates that the volume is being modified\n - `\"Infeasible\"` Infeasible indicates that the request has been rejected as invalid by the CSI driver. To resolve the error, a valid VolumeAttributesClass needs to be specified\n - `\"Pending\"` Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as the specified VolumeAttributesClass not existing",
          "enum": [
            "InProgress",
            "Infeasible",
            "Pending"
          ],
          "type": "string"
        },
        "targetVolumeAttributesClassName": {
          "description": "targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled",
          "type": "string"
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NFSVolumeSource": {
      "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "default": "",
          "description": "path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "boolean"
        },
        "server": {
          "default": "",
          "description": "server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        }
      },
      "required": [
        "server",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NamespaceCondition": {
      "description": "NamespaceCondition contains details about state of namespace.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of namespace controller condition.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NamespaceSpec": {
      "description": "NamespaceSpec describes the attributes on a Namespace.",
      "properties": {
        "finalizers": {
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NamespaceStatus": {
      "description": "NamespaceStatus is information about the current status of a Namespace.",
      "properties": {
        "conditions": {
          "description": "Represents the latest available observations of a namespace's current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NamespaceCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\n\nPossible enum values:\n - `\"Active\"` means the namespace is available for use in the system\n - `\"Terminating\"` means the namespace is undergoing graceful termination",
          "enum": [
            "Active",
            "Terminating"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeAddress": {
      "description": "NodeAddress contains information for the node's address.",
      "properties": {
        "address": {
          "default": "",
          "description": "The node address.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Node address type, one of Hostname, ExternalIP or InternalIP.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "address"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeAffinity": {
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PreferredSchedulingTerm"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSelector"
            }
          ],
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeCondition": {
      "description": "NodeCondition contains condition information for a node.",
      "properties": {
        "lastHeartbeatTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time we got an update on a given condition."
        },
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time the condition transit from one status to another."
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of node condition.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeConfigSource": {
      "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22",
      "properties": {
        "configMap": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapNodeConfigSource"
            }
          ],
          "description": "ConfigMap is a reference to a Node's ConfigMap"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeConfigStatus": {
      "description": "NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.",
      "properties": {
        "active": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeConfigSource"
            }
          ],
          "description": "Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error."
        },
        "assigned": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeConfigSource"
            }
          ],
          "description": "Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned."
        },
        "error": {
          "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.",
          "type": "string"
        },
        "lastKnownGood": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeConfigSource"
            }
          ],
          "description": "LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeDaemonEndpoints": {
      "description": "NodeDaemonEndpoints lists ports opened by daemons running on the Node.",
      "properties": {
        "kubeletEndpoint": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.DaemonEndpoint"
            }
          ],
          "default": {},
          "description": "Endpoint on which Kubelet is listening."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeFeatures": {
      "description": "NodeFeatures describes the set of features implemented by the CRI implementation. The features contained in the NodeFeatures should depend only on the cri implementation independent of runtime handlers.",
      "properties": {
        "supplementalGroupsPolicy": {
          "description": "SupplementalGroupsPolicy is set to true if the runtime supports SupplementalGroupsPolicy and ContainerUser.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeRuntimeHandler": {
      "description": "NodeRuntimeHandler is a set of runtime handler information.",
      "properties": {
        "features": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeRuntimeHandlerFeatures"
            }
          ],
          "description": "Supported features."
        },
        "name": {
          "default": "",
          "description": "Runtime handler name. Empty for the default runtime handler.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeRuntimeHandlerFeatures": {
      "description": "NodeRuntimeHandlerFeatures is a set of features implemented by the runtime handler.",
      "properties": {
        "recursiveReadOnlyMounts": {
          "description": "RecursiveReadOnlyMounts is set to true if the runtime handler supports RecursiveReadOnlyMounts.",
          "type": "boolean"
        },
        "userNamespaces": {
          "description": "UserNamespaces is set to true if the runtime handler supports UserNamespaces, including for volumes.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelector": {
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSelectorTerm"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "nodeSelectorTerms"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.NodeSelectorRequirement": {
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "default": "",
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "default": "",
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n\nPossible enum values:\n - `\"DoesNotExist\"`\n - `\"Exists\"`\n - `\"Gt\"`\n - `\"In\"`\n - `\"Lt\"`\n - `\"NotIn\"`",
          "enum": [
            "DoesNotExist",
            "Exists",
            "Gt",
            "In",
            "Lt",
            "NotIn"
          ],
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelectorTerm": {
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSelectorRequirement"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSelectorRequirement"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.NodeSpec": {
      "description": "NodeSpec describes the attributes that a node is created with.",
      "properties": {
        "configSource": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeConfigSource"
            }
          ],
          "description": "Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed."
        },
        "externalID": {
          "description": "Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966",
          "type": "string"
        },
        "podCIDR": {
          "description": "PodCIDR represents the pod IP range assigned to the node.",
          "type": "string"
        },
        "podCIDRs": {
          "description": "podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set",
          "x-kubernetes-patch-strategy": "merge"
        },
        "providerID": {
          "description": "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>",
          "type": "string"
        },
        "taints": {
          "description": "If specified, the node's taints.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Taint"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "unschedulable": {
          "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeStatus": {
      "description": "NodeStatus is information about the current status of a node.",
      "properties": {
        "addresses": {
          "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeAddress"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "allocatable": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.",
          "type": "object"
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/reference/node/node-status/#capacity",
          "type": "object"
        },
        "conditions": {
          "description": "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "config": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeConfigStatus"
            }
          ],
          "description": "Status of the config assigned to the node via the dynamic Kubelet config feature."
        },
        "daemonEndpoints": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeDaemonEndpoints"
            }
          ],
          "default": {},
          "description": "Endpoints of daemons running on the Node."
        },
        "features": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeFeatures"
            }
          ],
          "description": "Features describes the set of features implemented by the CRI implementation."
        },
        "images": {
          "description": "List of container images on this node",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerImage"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "nodeInfo": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSystemInfo"
            }
          ],
          "default": {},
          "description": "Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info"
        },
        "phase": {
          "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.\n\nPossible enum values:\n - `\"Pending\"` means the node has been created/added by the system, but not configured.\n - `\"Running\"` means the node has been configured and has Kubernetes components running.\n - `\"Terminated\"` means the node has been removed from the cluster.",
          "enum": [
            "Pending",
            "Running",
            "Terminated"
          ],
          "type": "string"
        },
        "runtimeHandlers": {
          "description": "The available runtime handlers.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeRuntimeHandler"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "volumesAttached": {
          "description": "List of volumes that are attached to the node.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.AttachedVolume"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "volumesInUse": {
          "description": "List of attachable volumes in use (mounted) by the node.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSystemInfo": {
      "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
      "properties": {
        "architecture": {
          "default": "",
          "description": "The Architecture reported by the node",
          "type": "string"
        },
        "bootID": {
          "default": "",
          "description": "Boot ID reported by the node.",
          "type": "string"
        },
        "containerRuntimeVersion": {
          "default": "",
          "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).",
          "type": "string"
        },
        "kernelVersion": {
          "default": "",
          "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
          "type": "string"
        },
        "kubeProxyVersion": {
          "default": "",
          "description": "Deprecated: KubeProxy Version reported by the node.",
          "type": "string"
        },
        "kubeletVersion": {
          "default": "",
          "description": "Kubelet Version reported by the node.",
          "type": "string"
        },
        "machineID": {
          "default": "",
          "description": "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html",
          "type": "string"
        },
        "operatingSystem": {
          "default": "",
          "description": "The Operating System reported by the node",
          "type": "string"
        },
        "osImage": {
          "default": "",
          "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).",
          "type": "string"
        },
        "systemUUID": {
          "default": "",
          "description": "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid",
          "type": "string"
        }
      },
      "required": [
        "machineID",
        "systemUUID",
        "bootID",
        "kernelVersion",
        "osImage",
        "containerRuntimeVersion",
        "kubeletVersion",
        "kubeProxyVersion",
        "operatingSystem",
        "architecture"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ObjectFieldSelector": {
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
          "type": "string"
        },
        "fieldPath": {
          "default": "",
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      },
      "required": [
        "fieldPath"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimCondition": {
      "description": "PersistentVolumeClaimCondition contains details about state of pvc",
      "properties": {
        "lastProbeTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "lastProbeTime is the time we probed the condition."
        },
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "lastTransitionTime is the time the condition transitioned from one status to another."
        },
        "message": {
          "description": "message is the human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"Resizing\" that means the underlying persistent volume is being resized.",
          "type": "string"
        },
        "status": {
          "default": "",
          "type": "string"
        },
        "type": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "properties": {
        "accessModes": {
          "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "dataSource": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.TypedLocalObjectReference"
            }
          ],
          "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource."
        },
        "dataSourceRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.TypedObjectReference"
            }
          ],
          "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled."
        },
        "resources": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeResourceRequirements"
            }
          ],
          "default": {},
          "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
        },
        "selector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "selector is a label query over volumes to consider for binding."
        },
        "storageClassName": {
          "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeAttributesClassName": {
          "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.\n\nPossible enum values:\n - `\"Block\"` means the volume will not be formatted with a filesystem and will remain a raw block device.\n - `\"Filesystem\"` means the volume will be or is formatted with a filesystem.",
          "enum": [
            "Block",
            "Filesystem"
          ],
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimStatus": {
      "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
      "properties": {
        "accessModes": {
          "description": "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "default": "",
            "enum": [
              "ReadOnlyMany",
              "ReadWriteMany",
              "ReadWriteOnce",
              "ReadWriteOncePod"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "allocatedResourceStatuses": {
          "additionalProperties": {
            "default": "",
            "enum": [
              "ControllerResizeInProgress",
              "ControllerResizeInfeasible",
              "NodeResizeInProgress",
              "NodeResizeInfeasible",
              "NodeResizePending"
            ],
            "type": "string"
          },
          "description": "allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\nClaimResourceStatus can be in any of following states:\n\t- ControllerResizeInProgress:\n\t\tState set when resize controller starts resizing the volume in control-plane.\n\t- ControllerResizeFailed:\n\t\tState set when resize has failed in resize controller with a terminal error.\n\t- NodeResizePending:\n\t\tState set when resize controller has finished resizing the volume but further resizing of\n\t\tvolume is needed on the node.\n\t- NodeResizeInProgress:\n\t\tState set when kubelet starts resizing the volume.\n\t- NodeResizeFailed:\n\t\tState set when resizing has failed in kubelet with a terminal error. Transient errors don't set\n\t\tNodeResizeFailed.\nFor example: if expanding a PVC for more capacity - this field can be one of the following states:\n\t- pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\"\nWhen this field is not set, it means that no resize operation is in progress for the given PVC.\n\nA controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
          "type": "object",
          "x-kubernetes-map-type": "granular"
        },
        "allocatedResources": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\nCapacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.\n\nA controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
          "type": "object"
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "capacity represents the actual resources of the underlying volume.",
          "type": "object"
        },
        "conditions": {
          "description": "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'Resizing'.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentVolumeAttributesClassName": {
          "description": "currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using. When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim This is a beta field and requires enabling VolumeAttributesClass feature (off by default).",
          "type": "string"
        },
        "modifyVolumeStatus": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ModifyVolumeStatus"
            }
          ],
          "description": "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation. When this is unset, there is no ModifyVolume operation being attempted. This is a beta field and requires enabling VolumeAttributesClass feature (off by default)."
        },
        "phase": {
          "description": "phase represents the current phase of PersistentVolumeClaim.\n\nPossible enum values:\n - `\"Bound\"` used for PersistentVolumeClaims that are bound\n - `\"Lost\"` used for PersistentVolumeClaims that lost their underlying PersistentVolume. The claim was bound to a PersistentVolume and this volume does not exist any longer and all data on it was lost.\n - `\"Pending\"` used for PersistentVolumeClaims that are not yet bound",
          "enum": [
            "Bound",
            "Lost",
            "Pending"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimTemplate": {
      "description": "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.",
      "properties": {
        "metadata": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
            }
          ],
          "default": {},
          "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation."
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimSpec"
            }
          ],
          "default": {},
          "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "properties": {
        "claimName": {
          "default": "",
          "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      },
      "required": [
        "claimName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeSpec": {
      "description": "PersistentVolumeSpec is the specification of a persistent volume.",
      "properties": {
        "accessModes": {
          "description": "accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes",
          "items": {
            "default": "",
            "enum": [
              "ReadOnlyMany",
              "ReadWriteMany",
              "ReadWriteOnce",
              "ReadWriteOncePod"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "awsElasticBlockStore": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
            }
          ],
          "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        },
        "azureDisk": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.AzureDiskVolumeSource"
            }
          ],
          "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
        },
        "azureFile": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.AzureFilePersistentVolumeSource"
            }
          ],
          "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod."
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
          "type": "object"
        },
        "cephfs": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.CephFSPersistentVolumeSource"
            }
          ],
          "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        },
        "cinder": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.CinderPersistentVolumeSource"
            }
          ],
          "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        },
        "claimRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding",
          "x-kubernetes-map-type": "granular"
        },
        "csi": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.CSIPersistentVolumeSource"
            }
          ],
          "description": "csi represents storage that is handled by an external CSI driver (Beta feature)."
        },
        "fc": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.FCVolumeSource"
            }
          ],
          "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        },
        "flexVolume": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.FlexPersistentVolumeSource"
            }
          ],
          "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
        },
        "flocker": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.FlockerVolumeSource"
            }
          ],
          "description": "flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running"
        },
        "gcePersistentDisk": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
            }
          ],
          "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        },
        "glusterfs": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource"
            }
          ],
          "description": "glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
        },
        "hostPath": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.HostPathVolumeSource"
            }
          ],
          "description": "hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        },
        "iscsi": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ISCSIPersistentVolumeSource"
            }
          ],
          "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin."
        },
        "local": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalVolumeSource"
            }
          ],
          "description": "local represents directly-attached storage with node affinity"
        },
        "mountOptions": {
          "description": "mountOptions is the list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "nfs": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NFSVolumeSource"
            }
          ],
          "description": "nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        },
        "nodeAffinity": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeNodeAffinity"
            }
          ],
          "description": "nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume."
        },
        "persistentVolumeReclaimPolicy": {
          "description": "persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming\n\nPossible enum values:\n - `\"Delete\"` means the volume will be deleted from Kubernetes on release from its claim. The volume plugin must support Deletion.\n - `\"Recycle\"` means the volume will be recycled back into the pool of unbound persistent volumes on release from its claim. The volume plugin must support Recycling.\n - `\"Retain\"` means the volume will be left in its current phase (Released) for manual reclamation by the administrator. The default policy is Retain.",
          "enum": [
            "Delete",
            "Recycle",
            "Retain"
          ],
          "type": "string"
        },
        "photonPersistentDisk": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
            }
          ],
          "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
        },
        "portworxVolume": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PortworxVolumeSource"
            }
          ],
          "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine"
        },
        "quobyte": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.QuobyteVolumeSource"
            }
          ],
          "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
        },
        "rbd": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.RBDPersistentVolumeSource"
            }
          ],
          "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
        },
        "scaleIO": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource"
            }
          ],
          "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes."
        },
        "storageClassName": {
          "description": "storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
          "type": "string"
        },
        "storageos": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.StorageOSPersistentVolumeSource"
            }
          ],
          "description": "storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md"
        },
        "volumeAttributesClassName": {
          "description": "Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is a beta field and requires enabling VolumeAttributesClass feature (off by default).",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.\n\nPossible enum values:\n - `\"Block\"` means the volume will not be formatted with a filesystem and will remain a raw block device.\n - `\"Filesystem\"` means the volume will be or is formatted with a filesystem.",
          "enum": [
            "Block",
            "Filesystem"
          ],
          "type": "string"
        },
        "vsphereVolume": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
            }
          ],
          "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeStatus": {
      "description": "PersistentVolumeStatus is the current status of a persistent volume.",
      "properties": {
        "lastPhaseTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "lastPhaseTransitionTime is the time the phase transitioned from one to another and automatically resets to current time everytime a volume phase transitions."
        },
        "message": {
          "description": "message is a human-readable message indicating details about why the volume is in this state.",
          "type": "string"
        },
        "phase": {
          "description": "phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase\n\nPossible enum values:\n - `\"Available\"` used for PersistentVolumes that are not yet bound Available volumes are held by the binder and matched to PersistentVolumeClaims\n - `\"Bound\"` used for PersistentVolumes that are bound\n - `\"Failed\"` used for PersistentVolumes that failed to be correctly recycled or deleted after being released from a claim\n - `\"Pending\"` used for PersistentVolumes that are not available\n - `\"Released\"` used for PersistentVolumes where the bound PersistentVolumeClaim was deleted released volumes must be recycled before becoming available again this phase is used by the persistent volume claim binder to signal to another process to reclaim the resource",
          "enum": [
            "Available",
            "Bound",
            "Failed",
            "Pending",
            "Released"
          ],
          "type": "string"
        },
        "reason": {
          "description": "reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
      "description": "Represents a Photon Controller persistent disk resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "pdID": {
          "default": "",
          "description": "pdID is the ID that identifies Photon Controller persistent disk",
          "type": "string"
        }
      },
      "required": [
        "pdID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinity": {
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.WeightedPodAffinityTerm"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinityTerm": {
      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
      "properties": {
        "labelSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods."
        },
        "matchLabelKeys": {
          "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "mismatchLabelKeys": {
          "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "namespaceSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces."
        },
        "namespaces": {
          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "topologyKey": {
          "default": "",
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      },
      "required": [
        "topologyKey"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAntiAffinity": {
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.WeightedPodAffinityTerm"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodCondition": {
      "description": "PodCondition contains details for the current condition of this pod.",
      "properties": {
        "lastProbeTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time we probed the condition."
        },
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfig": {
      "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "options": {
          "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodDNSConfigOption"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "searches": {
          "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfigOption": {
      "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
      "properties": {
        "name": {
          "description": "Required.",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodIP": {
      "description": "PodIP represents a single IP address allocated to the pod.",
      "properties": {
        "ip": {
          "default": "",
          "description": "IP is the IP address assigned to the pod",
          "type": "string"
        }
      },
      "required": [
        "ip"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodOS": {
      "description": "PodOS defines the OS parameters of a pod.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodReadinessGate": {
      "description": "PodReadinessGate contains the reference to a pod condition",
      "properties": {
        "conditionType": {
          "default": "",
          "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
          "type": "string"
        }
      },
      "required": [
        "conditionType"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodResourceClaim": {
      "description": "PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.",
          "type": "string"
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ClaimSource"
            }
          ],
          "default": {},
          "description": "Source describes where to find the ResourceClaim."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodResourceClaimStatus": {
      "description": "PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim which references a ResourceClaimTemplate. It stores the generated name for the corresponding ResourceClaim.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL.",
          "type": "string"
        },
        "resourceClaimName": {
          "description": "ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. If this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSchedulingGate": {
      "description": "PodSchedulingGate is associated to a Pod to guard its scheduling.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name of the scheduling gate. Each scheduling gate must have a unique name field.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSecurityContext": {
      "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "fsGroupChangePolicy": {
          "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.\n\nPossible enum values:\n - `\"Always\"` indicates that volume's ownership and permissions should always be changed whenever volume is mounted inside a Pod. This the default behavior.\n - `\"OnRootMismatch\"` indicates that volume's ownership and permissions will be changed only when permission and ownership of root directory does not match with expected permissions on the volume. This can help shorten the time it takes to change ownership and permissions of a volume.",
          "enum": [
            "Always",
            "OnRootMismatch"
          ],
          "type": "string"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SELinuxOptions"
            }
          ],
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows."
        },
        "seccompProfile": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SeccompProfile"
            }
          ],
          "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows."
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.",
          "items": {
            "default": 0,
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "sysctls": {
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Sysctl"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "windowsOptions": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.WindowsSecurityContextOptions"
            }
          ],
          "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSpec": {
      "description": "PodSpec is a description of a pod.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
          "format": "int64",
          "type": "integer"
        },
        "affinity": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.Affinity"
            }
          ],
          "description": "If specified, the pod's scheduling constraints"
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Container"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodDNSConfig"
            }
          ],
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy."
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n\nPossible enum values:\n - `\"ClusterFirst\"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.\n - `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.\n - `\"Default\"` indicates that the pod should use the default (as determined by kubelet) DNS settings.\n - `\"None\"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.",
          "enum": [
            "ClusterFirst",
            "ClusterFirstWithHostNet",
            "Default",
            "None"
          ],
          "type": "string"
        },
        "enableServiceLinks": {
          "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
          "type": "boolean"
        },
        "ephemeralContainers": {
          "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EphemeralContainer"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostAliases": {
          "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.HostAlias"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "description": "Use the host's ipc namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "Use the host's pid namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostUsers": {
          "description": "Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.",
          "type": "boolean"
        },
        "hostname": {
          "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Container"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeName": {
          "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "os": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodOS"
            }
          ],
          "description": "Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup"
        },
        "overhead": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md",
          "type": "object"
        },
        "preemptionPolicy": {
          "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.\n\nPossible enum values:\n - `\"Never\"` means that pod never preempts other pods with lower priority.\n - `\"PreemptLowerPriority\"` means that pod can preempt other pods with lower priority.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "format": "int32",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodReadinessGate"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "resourceClaims": {
          "description": "ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodResourceClaim"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        },
        "restartPolicy": {
          "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n\nPossible enum values:\n - `\"Always\"`\n - `\"Never\"`\n - `\"OnFailure\"`",
          "enum": [
            "Always",
            "Never",
            "OnFailure"
          ],
          "type": "string"
        },
        "runtimeClassName": {
          "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "schedulingGates": {
          "description": "SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.\n\nThis is a beta feature enabled by the PodSchedulingReadiness feature gate.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodSchedulingGate"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "securityContext": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodSecurityContext"
            }
          ],
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
        },
        "serviceAccount": {
          "description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
          "type": "string"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        },
        "setHostnameAsFQDN": {
          "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.",
          "type": "boolean"
        },
        "shareProcessNamespace": {
          "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
          "format": "int64",
          "type": "integer"
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Toleration"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.TopologySpreadConstraint"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Volume"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      },
      "required": [
        "containers"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodStatus": {
      "description": "PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.",
      "properties": {
        "conditions": {
          "description": "Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "containerStatuses": {
          "description": "The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerStatus"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "ephemeralContainerStatuses": {
          "description": "Status for any ephemeral containers that have run in this pod.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerStatus"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "hostIP": {
          "description": "hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod",
          "type": "string"
        },
        "hostIPs": {
          "description": "hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.HostIP"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainerStatuses": {
          "description": "The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerStatus"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "message": {
          "description": "A human readable message indicating details about why the pod is in this condition.",
          "type": "string"
        },
        "nominatedNodeName": {
          "description": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.",
          "type": "string"
        },
        "phase": {
          "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase\n\nPossible enum values:\n - `\"Failed\"` means that all containers in the pod have terminated, and at least one container has terminated in a failure (exited with a non-zero exit code or was stopped by the system).\n - `\"Pending\"` means the pod has been accepted by the system, but one or more of the containers has not been started. This includes time before being bound to a node, as well as time spent pulling images onto the host.\n - `\"Running\"` means the pod has been bound to a node and all of the containers have been started. At least one container is still running or is in the process of being restarted.\n - `\"Succeeded\"` means that all containers in the pod have voluntarily terminated with a container exit code of 0, and the system is not going to restart any of these containers.\n - `\"Unknown\"` means that for some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. Deprecated: It isn't being set since 2015 (74da3b14b0c0f658b3bb8d2def5094686d0e9095)",
          "enum": [
            "Failed",
            "Pending",
            "Running",
            "Succeeded",
            "Unknown"
          ],
          "type": "string"
        },
        "podIP": {
          "description": "podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.",
          "type": "string"
        },
        "podIPs": {
          "description": "podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodIP"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "ip"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "qosClass": {
          "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes\n\nPossible enum values:\n - `\"BestEffort\"` is the BestEffort qos class.\n - `\"Burstable\"` is the Burstable qos class.\n - `\"Guaranteed\"` is the Guaranteed qos class.",
          "enum": [
            "BestEffort",
            "Burstable",
            "Guaranteed"
          ],
          "type": "string"
        },
        "reason": {
          "description": "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'",
          "type": "string"
        },
        "resize": {
          "description": "Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to \"Proposed\"",
          "type": "string"
        },
        "resourceClaimStatuses": {
          "description": "Status of resource claims.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodResourceClaimStatus"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        },
        "startTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodTemplateSpec": {
      "description": "PodTemplateSpec describes the data a pod should have when created from a template",
      "properties": {
        "metadata": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
            }
          ],
          "default": {},
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodSpec"
            }
          ],
          "default": {},
          "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PortStatus": {
      "properties": {
        "error": {
          "description": "Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.",
          "type": "string"
        },
        "port": {
          "default": 0,
          "description": "Port is the port number of the service port of which status is recorded here",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "default": "",
          "description": "Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "required": [
        "port",
        "protocol"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PortworxVolumeSource": {
      "description": "PortworxVolumeSource represents a Portworx volume resource.",
      "properties": {
        "fsType": {
          "description": "fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "volumeID": {
          "default": "",
          "description": "volumeID uniquely identifies a Portworx volume",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PreferredSchedulingTerm": {
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "properties": {
        "preference": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSelectorTerm"
            }
          ],
          "default": {},
          "description": "A node selector term, associated with the corresponding weight."
        },
        "weight": {
          "default": 0,
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "preference"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Probe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "properties": {
        "exec": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ExecAction"
            }
          ],
          "description": "Exec specifies the action to take."
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "grpc": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.GRPCAction"
            }
          ],
          "description": "GRPC specifies an action involving a GRPC port."
        },
        "httpGet": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.HTTPGetAction"
            }
          ],
          "description": "HTTPGet specifies the http request to perform."
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "tcpSocket": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.TCPSocketAction"
            }
          ],
          "description": "TCPSocket specifies an action involving a TCP port."
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
          "format": "int64",
          "type": "integer"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ProjectedVolumeSource": {
      "description": "Represents a projected volume source",
      "properties": {
        "defaultMode": {
          "description": "defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "sources": {
          "description": "sources is the list of volume projections",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeProjection"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.QuobyteVolumeSource": {
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "group": {
          "description": "group to map volume access to Default is no group",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
          "type": "boolean"
        },
        "registry": {
          "default": "",
          "description": "registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
          "type": "string"
        },
        "tenant": {
          "description": "tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
          "type": "string"
        },
        "user": {
          "description": "user to map volume access to Defaults to serivceaccount user",
          "type": "string"
        },
        "volume": {
          "default": "",
          "description": "volume is a string that references an already created Quobyte volume by name.",
          "type": "string"
        }
      },
      "required": [
        "registry",
        "volume"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDPersistentVolumeSource": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "default": "",
          "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "default": "/etc/ceph/keyring",
          "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "pool": {
          "default": "rbd",
          "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretReference"
            }
          ],
          "description": "secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        },
        "user": {
          "default": "admin",
          "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors",
        "image"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDVolumeSource": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "default": "",
          "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "pool": {
          "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        },
        "user": {
          "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors",
        "image"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerCondition": {
      "description": "ReplicationControllerCondition describes the state of a replication controller at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "The last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of replication controller condition.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerSpec": {
      "description": "ReplicationControllerSpec is the specification of a replication controller.",
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "template": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
            }
          ],
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. The only allowed template.spec.restartPolicy value is \"Always\". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerStatus": {
      "description": "ReplicationControllerStatus represents the current status of a replication controller.",
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replication controller.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "Represents the latest available observations of a replication controller's current state.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationControllerCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replication controller.",
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "ObservedGeneration reflects the generation of the most recently observed replication controller.",
          "format": "int64",
          "type": "integer"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this replication controller.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "default": 0,
          "description": "Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceClaim": {
      "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceFieldSelector": {
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars",
          "type": "string"
        },
        "divisor": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
            }
          ],
          "description": "Specifies the output format of the exposed resources, defaults to \"1\""
        },
        "resource": {
          "default": "",
          "description": "Required: resource to select",
          "type": "string"
        }
      },
      "required": [
        "resource"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ResourceHealth": {
      "description": "ResourceHealth represents the health of a resource. It has the latest device health information. This is a part of KEP https://kep.k8s.io/4680 and historical health changes are planned to be added in future iterations of a KEP.",
      "properties": {
        "health": {
          "description": "Health of the resource. can be one of:\n - Healthy: operates as normal\n - Unhealthy: reported unhealthy. We consider this a temporary health issue\n              since we do not have a mechanism today to distinguish\n              temporary and permanent issues.\n - Unknown: The status cannot be determined.\n            For example, Device Plugin got unregistered and hasn't been re-registered since.\n\nIn future we may want to introduce the PermanentlyUnhealthy Status.",
          "type": "string"
        },
        "resourceID": {
          "default": "",
          "description": "ResourceID is the unique identifier of the resource. See the ResourceID type for more information.",
          "type": "string"
        }
      },
      "required": [
        "resourceID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceQuotaSpec": {
      "description": "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object"
        },
        "scopeSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ScopeSelector"
            }
          ],
          "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched."
        },
        "scopes": {
          "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
          "items": {
            "default": "",
            "enum": [
              "BestEffort",
              "CrossNamespacePodAffinity",
              "NotBestEffort",
              "NotTerminating",
              "PriorityClass",
              "Terminating"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceQuotaStatus": {
      "description": "ResourceQuotaStatus defines the enforced hard limits and observed use.",
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object"
        },
        "used": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Used is the current observed total usage of the resource in the namespace.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceRequirements": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "properties": {
        "claims": {
          "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceClaim"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "limits": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        },
        "requests": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceStatus": {
      "properties": {
        "name": {
          "default": "",
          "description": "Name of the resource. Must be unique within the pod and match one of the resources from the pod spec.",
          "type": "string"
        },
        "resources": {
          "description": "List of unique Resources health. Each element in the list contains an unique resource ID and resource health. At a minimum, ResourceID must uniquely identify the Resource allocated to the Pod on the Node for the lifetime of a Pod. See ResourceID type for it's definition.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceHealth"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "resourceID"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SELinuxOptions": {
      "description": "SELinuxOptions are the labels to be applied to the container",
      "properties": {
        "level": {
          "description": "Level is SELinux level label that applies to the container.",
          "type": "string"
        },
        "role": {
          "description": "Role is a SELinux role label that applies to the container.",
          "type": "string"
        },
        "type": {
          "description": "Type is a SELinux type label that applies to the container.",
          "type": "string"
        },
        "user": {
          "description": "User is a SELinux user label that applies to the container.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOPersistentVolumeSource": {
      "description": "ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "default": "xfs",
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\"",
          "type": "string"
        },
        "gateway": {
          "default": "",
          "description": "gateway is the host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretReference"
            }
          ],
          "description": "secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "description": "sslEnabled is the flag to enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "default": "ThinProvisioned",
          "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "default": "",
          "description": "system is the name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOVolumeSource": {
      "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
          "type": "string"
        },
        "gateway": {
          "default": "",
          "description": "gateway is the host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "default": "",
          "description": "system is the name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ScopeSelector": {
      "description": "A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.",
      "properties": {
        "matchExpressions": {
          "description": "A list of scope selector requirements by scope of the resources.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ScopedResourceSelectorRequirement": {
      "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
      "properties": {
        "operator": {
          "default": "",
          "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.\n\nPossible enum values:\n - `\"DoesNotExist\"`\n - `\"Exists\"`\n - `\"In\"`\n - `\"NotIn\"`",
          "enum": [
            "DoesNotExist",
            "Exists",
            "In",
            "NotIn"
          ],
          "type": "string"
        },
        "scopeName": {
          "default": "",
          "description": "The name of the scope that the selector applies to.\n\nPossible enum values:\n - `\"BestEffort\"` Match all pod objects that have best effort quality of service\n - `\"CrossNamespacePodAffinity\"` Match all pod objects that have cross-namespace pod (anti)affinity mentioned.\n - `\"NotBestEffort\"` Match all pod objects that do not have best effort quality of service\n - `\"NotTerminating\"` Match all pod objects where spec.activeDeadlineSeconds is nil\n - `\"PriorityClass\"` Match all pod objects that have priority class mentioned\n - `\"Terminating\"` Match all pod objects where spec.activeDeadlineSeconds >=0",
          "enum": [
            "BestEffort",
            "CrossNamespacePodAffinity",
            "NotBestEffort",
            "NotTerminating",
            "PriorityClass",
            "Terminating"
          ],
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "scopeName",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SeccompProfile": {
      "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
      "properties": {
        "localhostProfile": {
          "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.\n\nPossible enum values:\n - `\"Localhost\"` indicates a profile defined in a file on the node should be used. The file's location relative to <kubelet-root-dir>/seccomp.\n - `\"RuntimeDefault\"` represents the default container runtime seccomp profile.\n - `\"Unconfined\"` indicates no seccomp profile is applied (A.K.A. unconfined).",
          "enum": [
            "Localhost",
            "RuntimeDefault",
            "Unconfined"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "localhostProfile": "LocalhostProfile"
          }
        }
      ]
    },
    "io.k8s.api.core.v1.SecretEnvSource": {
      "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretKeySelector": {
      "description": "SecretKeySelector selects a key of a Secret.",
      "properties": {
        "key": {
          "default": "",
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.SecretProjection": {
      "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
      "properties": {
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.KeyToPath"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional field specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretReference": {
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
      "properties": {
        "name": {
          "description": "name is unique within a namespace to reference a secret resource.",
          "type": "string"
        },
        "namespace": {
          "description": "namespace defines the space within which the secret name must be unique.",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.SecretVolumeSource": {
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.KeyToPath"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "optional": {
          "description": "optional field specify whether the Secret or its keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecurityContext": {
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "capabilities": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.Capabilities"
            }
          ],
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows."
        },
        "privileged": {
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.\n\nPossible enum values:\n - `\"Default\"` uses the container runtime defaults for readonly and masked paths for /proc. Most container runtimes mask certain paths in /proc to avoid accidental security exposure of special devices or information.\n - `\"Unmasked\"` bypasses the default masking behavior of the container runtime and ensures the newly created /proc the container stays in tact with no modifications.",
          "enum": [
            "Default",
            "Unmasked"
          ],
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SELinuxOptions"
            }
          ],
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows."
        },
        "seccompProfile": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SeccompProfile"
            }
          ],
          "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows."
        },
        "windowsOptions": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.WindowsSecurityContextOptions"
            }
          ],
          "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
      "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
      "properties": {
        "audience": {
          "description": "audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
          "type": "string"
        },
        "expirationSeconds": {
          "description": "expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
          "format": "int64",
          "type": "integer"
        },
        "path": {
          "default": "",
          "description": "path is the path relative to the mount point of the file to project the token into.",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ServicePort": {
      "description": "ServicePort contains information on service's port.",
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.",
          "type": "string"
        },
        "name": {
          "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.",
          "type": "string"
        },
        "nodePort": {
          "description": "The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
          "format": "int32",
          "type": "integer"
        },
        "port": {
          "default": 0,
          "description": "The port that will be exposed by this service.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "default": "TCP",
          "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        },
        "targetPort": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceSpec": {
      "description": "ServiceSpec describes the attributes that a user creates on a service.",
      "properties": {
        "allocateLoadBalancerNodePorts": {
          "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is \"true\". It may be set to \"false\" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.",
          "type": "boolean"
        },
        "clusterIP": {
          "description": "clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "clusterIPs": {
          "description": "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "externalIPs": {
          "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "externalName": {
          "description": "externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\".",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's \"externally-facing\" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get \"Cluster\" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.\n\nPossible enum values:\n - `\"Cluster\"` routes traffic to all endpoints.\n - `\"Local\"` preserves the source IP of the traffic by routing only to endpoints on the same node as the traffic was received on (dropping the traffic if there are no local endpoints).",
          "enum": [
            "Cluster",
            "Local"
          ],
          "type": "string"
        },
        "healthCheckNodePort": {
          "description": "healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.",
          "format": "int32",
          "type": "integer"
        },
        "internalTrafficPolicy": {
          "description": "InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to \"Local\", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).\n\nPossible enum values:\n - `\"Cluster\"` routes traffic to all endpoints.\n - `\"Local\"` routes traffic only to endpoints on the same node as the client pod (dropping the traffic if there are no local endpoints).",
          "enum": [
            "Cluster",
            "Local"
          ],
          "type": "string"
        },
        "ipFamilies": {
          "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services. This field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.",
          "items": {
            "default": "",
            "enum": [
              "",
              "IPv4",
              "IPv6"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "ipFamilyPolicy": {
          "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.\n\nPossible enum values:\n - `\"PreferDualStack\"` indicates that this service prefers dual-stack when the cluster is configured for dual-stack. If the cluster is not configured for dual-stack the service will be assigned a single IPFamily. If the IPFamily is not set in service.spec.ipFamilies then the service will be assigned the default IPFamily configured on the cluster\n - `\"RequireDualStack\"` indicates that this service requires dual-stack. Using IPFamilyPolicyRequireDualStack on a single stack cluster will result in validation errors. The IPFamilies (and their order) assigned to this service is based on service.spec.ipFamilies. If service.spec.ipFamilies was not provided then it will be assigned according to how they are configured on the cluster. If service.spec.ipFamilies has only one entry then the alternative IPFamily will be added by apiserver\n - `\"SingleStack\"` indicates that this service is required to have a single IPFamily. The IPFamily assigned is based on the default IPFamily used by the cluster or as identified by service.spec.ipFamilies field",
          "enum": [
            "PreferDualStack",
            "RequireDualStack",
            "SingleStack"
          ],
          "type": "string"
        },
        "loadBalancerClass": {
          "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.",
          "type": "string"
        },
        "loadBalancerIP": {
          "description": "Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations. Using it is non-portable and it may not support dual-stack. Users are encouraged to use implementation-specific annotations when available.",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "ports": {
          "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServicePort"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "port",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "port",
          "x-kubernetes-patch-strategy": "merge"
        },
        "publishNotReadyAddresses": {
          "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.",
          "type": "boolean"
        },
        "selector": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "sessionAffinity": {
          "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n\nPossible enum values:\n - `\"ClientIP\"` is the Client IP based.\n - `\"None\"` - no session affinity.",
          "enum": [
            "ClientIP",
            "None"
          ],
          "type": "string"
        },
        "sessionAffinityConfig": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SessionAffinityConfig"
            }
          ],
          "description": "sessionAffinityConfig contains the configurations of session affinity."
        },
        "trafficDistribution": {
          "description": "TrafficDistribution offers a way to express preferences for how traffic is distributed to Service endpoints. Implementations can use this field as a hint, but are not required to guarantee strict adherence. If the field is not set, the implementation will apply its default routing strategy. If set to \"PreferClose\", implementations should prioritize endpoints that are topologically close (e.g., same zone). This is an alpha field and requires enabling ServiceTrafficDistribution feature.",
          "type": "string"
        },
        "type": {
          "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types\n\nPossible enum values:\n - `\"ClusterIP\"` means a service will only be accessible inside the cluster, via the cluster IP.\n - `\"ExternalName\"` means a service consists of only a reference to an external name that kubedns or equivalent will return as a CNAME record, with no exposing or proxying of any pods involved.\n - `\"LoadBalancer\"` means a service will be exposed via an external load balancer (if the cloud provider supports it), in addition to 'NodePort' type.\n - `\"NodePort\"` means a service will be exposed on one port of every node, in addition to 'ClusterIP' type.",
          "enum": [
            "ClusterIP",
            "ExternalName",
            "LoadBalancer",
            "NodePort"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceStatus": {
      "description": "ServiceStatus represents the current status of a service.",
      "properties": {
        "conditions": {
          "description": "Current service state",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "loadBalancer": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LoadBalancerStatus"
            }
          ],
          "default": {},
          "description": "LoadBalancer contains the current status of the load-balancer, if one is present."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SessionAffinityConfig": {
      "description": "SessionAffinityConfig represents the configurations of session affinity.",
      "properties": {
        "clientIP": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ClientIPConfig"
            }
          ],
          "description": "clientIP contains the configurations of Client IP based session affinity."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SleepAction": {
      "description": "SleepAction describes a \"sleep\" action.",
      "properties": {
        "seconds": {
          "default": 0,
          "description": "Seconds is the number of seconds to sleep.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "seconds"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSPersistentVolumeSource": {
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted."
        },
        "volumeName": {
          "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSVolumeSource": {
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
            }
          ],
          "description": "secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted."
        },
        "volumeName": {
          "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Sysctl": {
      "description": "Sysctl defines a kernel parameter to be set",
      "properties": {
        "name": {
          "default": "",
          "description": "Name of a property to set",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Value of a property to set",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TCPSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.",
          "type": "string"
        },
        "port": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Taint": {
      "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
      "properties": {
        "effect": {
          "default": "",
          "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\n\nPossible enum values:\n - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.\n - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.\n - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.",
          "enum": [
            "NoExecute",
            "NoSchedule",
            "PreferNoSchedule"
          ],
          "type": "string"
        },
        "key": {
          "default": "",
          "description": "Required. The taint key to be applied to a node.",
          "type": "string"
        },
        "timeAdded": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints."
        },
        "value": {
          "description": "The taint value corresponding to the taint key.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "effect"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Toleration": {
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n\nPossible enum values:\n - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.\n - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.\n - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.",
          "enum": [
            "NoExecute",
            "NoSchedule",
            "PreferNoSchedule"
          ],
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n\nPossible enum values:\n - `\"Equal\"`\n - `\"Exists\"`",
          "enum": [
            "Equal",
            "Exists"
          ],
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "format": "int64",
          "type": "integer"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySelectorLabelRequirement": {
      "description": "A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.",
      "properties": {
        "key": {
          "default": "",
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. One value must match the label to be selected. Each entry in Values is ORed.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "key",
        "values"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySelectorTerm": {
      "description": "A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.",
      "properties": {
        "matchLabelExpressions": {
          "description": "A list of topology selector requirements by labels.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.TopologySelectorLabelRequirement"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.TopologySpreadConstraint": {
      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
      "properties": {
        "labelSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain."
        },
        "matchLabelKeys": {
          "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "maxSkew": {
          "default": 0,
          "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
          "format": "int32",
          "type": "integer"
        },
        "minDomains": {
          "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.\n\nThis is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).",
          "format": "int32",
          "type": "integer"
        },
        "nodeAffinityPolicy": {
          "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n\nPossible enum values:\n - `\"Honor\"` means use this scheduling directive when calculating pod topology spread skew.\n - `\"Ignore\"` means ignore this scheduling directive when calculating pod topology spread skew.",
          "enum": [
            "Honor",
            "Ignore"
          ],
          "type": "string"
        },
        "nodeTaintsPolicy": {
          "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n\nPossible enum values:\n - `\"Honor\"` means use this scheduling directive when calculating pod topology spread skew.\n - `\"Ignore\"` means ignore this scheduling directive when calculating pod topology spread skew.",
          "enum": [
            "Honor",
            "Ignore"
          ],
          "type": "string"
        },
        "topologyKey": {
          "default": "",
          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "default": "",
          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.\n\nPossible enum values:\n - `\"DoNotSchedule\"` instructs the scheduler not to schedule the pod when constraints are not satisfied.\n - `\"ScheduleAnyway\"` instructs the scheduler to schedule the pod even if constraints are not satisfied.",
          "enum": [
            "DoNotSchedule",
            "ScheduleAnyway"
          ],
          "type": "string"
        }
      },
      "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TypedLocalObjectReference": {
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.TypedObjectReference": {
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of resource being referenced",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Volume": {
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
      "properties": {
        "awsElasticBlockStore": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
            }
          ],
          "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        },
        "azureDisk": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.AzureDiskVolumeSource"
            }
          ],
          "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
        },
        "azureFile": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.AzureFileVolumeSource"
            }
          ],
          "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod."
        },
        "cephfs": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.CephFSVolumeSource"
            }
          ],
          "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        },
        "cinder": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.CinderVolumeSource"
            }
          ],
          "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        },
        "configMap": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapVolumeSource"
            }
          ],
          "description": "configMap represents a configMap that should populate this volume"
        },
        "csi": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.CSIVolumeSource"
            }
          ],
          "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature)."
        },
        "downwardAPI": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.DownwardAPIVolumeSource"
            }
          ],
          "description": "downwardAPI represents downward API about the pod that should populate this volume"
        },
        "emptyDir": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.EmptyDirVolumeSource"
            }
          ],
          "description": "emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
        },
        "ephemeral": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.EphemeralVolumeSource"
            }
          ],
          "description": "ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time."
        },
        "fc": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.FCVolumeSource"
            }
          ],
          "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        },
        "flexVolume": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.FlexVolumeSource"
            }
          ],
          "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
        },
        "flocker": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.FlockerVolumeSource"
            }
          ],
          "description": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
        },
        "gcePersistentDisk": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
            }
          ],
          "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        },
        "gitRepo": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.GitRepoVolumeSource"
            }
          ],
          "description": "gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container."
        },
        "glusterfs": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.GlusterfsVolumeSource"
            }
          ],
          "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
        },
        "hostPath": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.HostPathVolumeSource"
            }
          ],
          "description": "hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        },
        "iscsi": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ISCSIVolumeSource"
            }
          ],
          "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md"
        },
        "name": {
          "default": "",
          "description": "name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "nfs": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NFSVolumeSource"
            }
          ],
          "description": "nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        },
        "persistentVolumeClaim": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource"
            }
          ],
          "description": "persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        },
        "photonPersistentDisk": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
            }
          ],
          "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
        },
        "portworxVolume": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PortworxVolumeSource"
            }
          ],
          "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine"
        },
        "projected": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ProjectedVolumeSource"
            }
          ],
          "description": "projected items for all in one resources secrets, configmaps, and downward API"
        },
        "quobyte": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.QuobyteVolumeSource"
            }
          ],
          "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
        },
        "rbd": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.RBDVolumeSource"
            }
          ],
          "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
        },
        "scaleIO": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ScaleIOVolumeSource"
            }
          ],
          "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes."
        },
        "secret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretVolumeSource"
            }
          ],
          "description": "secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
        },
        "storageos": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.StorageOSVolumeSource"
            }
          ],
          "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes."
        },
        "vsphereVolume": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
            }
          ],
          "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeDevice": {
      "description": "volumeDevice describes a mapping of a raw block device within a container.",
      "properties": {
        "devicePath": {
          "default": "",
          "description": "devicePath is the path inside of the container that the device will be mapped to.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name must match the name of a persistentVolumeClaim in the pod",
          "type": "string"
        }
      },
      "required": [
        "name",
        "devicePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeMount": {
      "description": "VolumeMount describes a mounting of a Volume within a container.",
      "properties": {
        "mountPath": {
          "default": "",
          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
          "type": "string"
        },
        "mountPropagation": {
          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.\n\nPossible enum values:\n - `\"Bidirectional\"` means that the volume in a container will receive new mounts from the host or other containers, and its own mounts will be propagated from the container to the host or other containers. Note that this mode is recursively applied to all mounts in the volume (\"rshared\" in Linux terminology).\n - `\"HostToContainer\"` means that the volume in a container will receive new mounts from the host or other containers, but filesystems mounted inside the container won't be propagated to the host or other containers. Note that this mode is recursively applied to all mounts in the volume (\"rslave\" in Linux terminology).\n - `\"None\"` means that the volume in a container will not receive new mounts from the host or other containers, and filesystems mounted inside the container won't be propagated to the host or other containers. Note that this mode corresponds to \"private\" in Linux terminology.",
          "enum": [
            "Bidirectional",
            "HostToContainer",
            "None"
          ],
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "This must match the Name of a Volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
          "type": "boolean"
        },
        "subPath": {
          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "mountPath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeMountStatus": {
      "description": "VolumeMountStatus shows status of volume mounts.",
      "properties": {
        "mountPath": {
          "default": "",
          "description": "MountPath corresponds to the original VolumeMount.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name corresponds to the name of the original VolumeMount.",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly corresponds to the original VolumeMount.",
          "type": "boolean"
        },
        "recursiveReadOnly": {
          "description": "RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "mountPath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeNodeAffinity": {
      "description": "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.",
      "properties": {
        "required": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSelector"
            }
          ],
          "description": "required specifies hard node constraints that must be met."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeProjection": {
      "description": "Projection that may be projected along with other supported volume types",
      "properties": {
        "clusterTrustBundle": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ClusterTrustBundleProjection"
            }
          ],
          "description": "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field of ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the combination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written into the pod filesystem.  Esoteric PEM features such as inter-block comments and block headers are stripped.  Certificates are deduplicated. The ordering of certificates within the file is arbitrary, and Kubelet may change the order over time."
        },
        "configMap": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapProjection"
            }
          ],
          "description": "configMap information about the configMap data to project"
        },
        "downwardAPI": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.DownwardAPIProjection"
            }
          ],
          "description": "downwardAPI information about the downwardAPI data to project"
        },
        "secret": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretProjection"
            }
          ],
          "description": "secret information about the secret data to project"
        },
        "serviceAccountToken": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountTokenProjection"
            }
          ],
          "description": "serviceAccountToken is information about the serviceAccountToken data to project"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeResourceRequirements": {
      "description": "VolumeResourceRequirements describes the storage resource requirements for a volume.",
      "properties": {
        "limits": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        },
        "requests": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
      "description": "Represents a vSphere volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "storagePolicyID": {
          "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
          "type": "string"
        },
        "volumePath": {
          "default": "",
          "description": "volumePath is the path that identifies vSphere volume vmdk",
          "type": "string"
        }
      },
      "required": [
        "volumePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "properties": {
        "podAffinityTerm": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm"
            }
          ],
          "default": {},
          "description": "Required. A pod affinity term, associated with the corresponding weight."
        },
        "weight": {
          "default": 0,
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "podAffinityTerm"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
      "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
      "properties": {
        "gmsaCredentialSpec": {
          "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
          "type": "string"
        },
        "gmsaCredentialSpecName": {
          "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
          "type": "string"
        },
        "hostProcess": {
          "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
          "type": "boolean"
        },
        "runAsUserName": {
          "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.discovery.v1.Endpoint": {
      "description": "Endpoint represents a single logical \"backend\" implementing a service.",
      "properties": {
        "addresses": {
          "description": "addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "conditions": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.discovery.v1.EndpointConditions"
            }
          ],
          "default": {},
          "description": "conditions contains information about the current status of the endpoint."
        },
        "deprecatedTopology": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.",
          "type": "object"
        },
        "hints": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.discovery.v1.EndpointHints"
            }
          ],
          "description": "hints contains information associated with how an endpoint should be consumed."
        },
        "hostname": {
          "description": "hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.",
          "type": "string"
        },
        "nodeName": {
          "description": "nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.",
          "type": "string"
        },
        "targetRef": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
            }
          ],
          "description": "targetRef is a reference to a Kubernetes object that represents this endpoint."
        },
        "zone": {
          "description": "zone is the name of the Zone this endpoint exists in.",
          "type": "string"
        }
      },
      "required": [
        "addresses"
      ],
      "type": "object"
    },
    "io.k8s.api.discovery.v1.EndpointConditions": {
      "description": "EndpointConditions represents the current condition of an endpoint.",
      "properties": {
        "ready": {
          "description": "ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be \"true\" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.",
          "type": "boolean"
        },
        "serving": {
          "description": "serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.",
          "type": "boolean"
        },
        "terminating": {
          "description": "terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.discovery.v1.EndpointHints": {
      "description": "EndpointHints provides hints describing how an endpoint should be consumed.",
      "properties": {
        "forZones": {
          "description": "forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.discovery.v1.ForZone"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.discovery.v1.EndpointPort": {
      "description": "EndpointPort represents a Port used by an EndpointSlice",
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.",
          "type": "string"
        },
        "name": {
          "description": "name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is derived from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.",
          "type": "string"
        },
        "port": {
          "description": "port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.discovery.v1.ForZone": {
      "description": "ForZone provides information about which zones should consume this endpoint.",
      "properties": {
        "name": {
          "default": "",
          "description": "name represents the name of the zone.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.events.v1.EventSeries": {
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in \"k8s.io/client-go/tools/events/event_broadcaster.go\" shows how this struct is updated on heartbeats and can guide customized reporter implementations.",
      "properties": {
        "count": {
          "default": 0,
          "description": "count is the number of occurrences in this series up to the last heartbeat time.",
          "format": "int32",
          "type": "integer"
        },
        "lastObservedTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
            }
          ],
          "description": "lastObservedTime is the time when last Event from the series was seen before last heartbeat."
        }
      },
      "required": [
        "count",
        "lastObservedTime"
      ],
      "type": "object"
    },
    "io.k8s.api.extensions.v1beta1.ScaleSpec": {
      "description": "describes the attributes of a scale subresource",
      "properties": {
        "replicas": {
          "description": "desired number of instances for the scaled object.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.extensions.v1beta1.ScaleStatus": {
      "description": "represents the current status of a scale subresource.",
      "properties": {
        "replicas": {
          "default": 0,
          "description": "actual number of observed instances of the scaled object.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "selector is a label query over pods that should match the replicas count. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "targetSelector": {
          "description": "label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "type": "string"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.ExemptPriorityLevelConfiguration": {
      "description": "ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.",
      "properties": {
        "lendablePercent": {
          "description": "`lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels.  This value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.\n\nLendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )",
          "format": "int32",
          "type": "integer"
        },
        "nominalConcurrencyShares": {
          "description": "`nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats nominally reserved for this priority level. This DOES NOT limit the dispatching from this priority level but affects the other priority levels through the borrowing mechanism. The server's concurrency limit (ServerCL) is divided among all the priority levels in proportion to their NCS values:\n\nNominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)\n\nBigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of zero.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.FlowDistinguisherMethod": {
      "description": "FlowDistinguisherMethod specifies the method of a flow distinguisher.",
      "properties": {
        "type": {
          "default": "",
          "description": "`type` is the type of flow distinguisher method The supported types are \"ByUser\" and \"ByNamespace\". Required.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.FlowSchemaCondition": {
      "description": "FlowSchemaCondition describes conditions for a FlowSchema.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "`lastTransitionTime` is the last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "`message` is a human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "`reason` is a unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "`status` is the status of the condition. Can be True, False, Unknown. Required.",
          "type": "string"
        },
        "type": {
          "description": "`type` is the type of the condition. Required.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.FlowSchemaSpec": {
      "description": "FlowSchemaSpec describes how the FlowSchema's specification looks like.",
      "properties": {
        "distinguisherMethod": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.FlowDistinguisherMethod"
            }
          ],
          "description": "`distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string."
        },
        "matchingPrecedence": {
          "default": 0,
          "description": "`matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.",
          "format": "int32",
          "type": "integer"
        },
        "priorityLevelConfiguration": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationReference"
            }
          ],
          "default": {},
          "description": "`priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required."
        },
        "rules": {
          "description": "`rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.PolicyRulesWithSubjects"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "priorityLevelConfiguration"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.FlowSchemaStatus": {
      "description": "FlowSchemaStatus represents the current state of a FlowSchema.",
      "properties": {
        "conditions": {
          "description": "`conditions` is a list of the current states of FlowSchema.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.FlowSchemaCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.GroupSubject": {
      "description": "GroupSubject holds detailed information for group-kind subject.",
      "properties": {
        "name": {
          "default": "",
          "description": "name is the user group that matches, or \"*\" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.LimitResponse": {
      "description": "LimitResponse defines how to handle requests that can not be executed right now.",
      "properties": {
        "queuing": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.QueuingConfiguration"
            }
          ],
          "description": "`queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `\"Queue\"`."
        },
        "type": {
          "default": "",
          "description": "`type` is \"Queue\" or \"Reject\". \"Queue\" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \"Reject\" means that requests that can not be executed upon arrival are rejected. Required.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "queuing": "Queuing"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1.LimitedPriorityLevelConfiguration": {
      "description": "LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:\n  - How are requests for this priority level limited?\n  - What should be done with requests that exceed the limit?",
      "properties": {
        "borrowingLimitPercent": {
          "description": "`borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.\n\nBorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )\n\nThe value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.",
          "format": "int32",
          "type": "integer"
        },
        "lendablePercent": {
          "description": "`lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.\n\nLendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )",
          "format": "int32",
          "type": "integer"
        },
        "limitResponse": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.LimitResponse"
            }
          ],
          "default": {},
          "description": "`limitResponse` indicates what to do with requests that can not be executed right now"
        },
        "nominalConcurrencyShares": {
          "description": "`nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:\n\nNominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)\n\nBigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level.\n\nIf not specified, this field defaults to a value of 30.\n\nSetting this field to zero supports the construction of a \"jail\" for this priority level that is used to hold some request(s)",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.NonResourcePolicyRule": {
      "description": "NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.",
      "properties": {
        "nonResourceURLs": {
          "description": "`nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:\n  - \"/healthz\" is legal\n  - \"/hea*\" is illegal\n  - \"/hea\" is legal but matches nothing\n  - \"/hea/*\" also matches nothing\n  - \"/healthz/*\" matches all per-component health checks.\n\"*\" matches all non-resource urls. if it is present, it must be the only entry. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "verbs": {
          "description": "`verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs. If it is present, it must be the only entry. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "required": [
        "verbs",
        "nonResourceURLs"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.PolicyRulesWithSubjects": {
      "description": "PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.",
      "properties": {
        "nonResourceRules": {
          "description": "`nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.NonResourcePolicyRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resourceRules": {
          "description": "`resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.ResourcePolicyRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "subjects": {
          "description": "subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.Subject"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "subjects"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationCondition": {
      "description": "PriorityLevelConfigurationCondition defines the condition of priority level.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "`lastTransitionTime` is the last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "`message` is a human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "`reason` is a unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "`status` is the status of the condition. Can be True, False, Unknown. Required.",
          "type": "string"
        },
        "type": {
          "description": "`type` is the type of the condition. Required.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationReference": {
      "description": "PriorityLevelConfigurationReference contains information that points to the \"request-priority\" being used.",
      "properties": {
        "name": {
          "default": "",
          "description": "`name` is the name of the priority level configuration being referenced Required.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationSpec": {
      "description": "PriorityLevelConfigurationSpec specifies the configuration of a priority level.",
      "properties": {
        "exempt": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.ExemptPriorityLevelConfiguration"
            }
          ],
          "description": "`exempt` specifies how requests are handled for an exempt priority level. This field MUST be empty if `type` is `\"Limited\"`. This field MAY be non-empty if `type` is `\"Exempt\"`. If empty and `type` is `\"Exempt\"` then the default values for `ExemptPriorityLevelConfiguration` apply."
        },
        "limited": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.LimitedPriorityLevelConfiguration"
            }
          ],
          "description": "`limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `\"Limited\"`."
        },
        "type": {
          "default": "",
          "description": "`type` indicates whether this priority level is subject to limitation on request execution.  A value of `\"Exempt\"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `\"Limited\"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "exempt": "Exempt",
            "limited": "Limited"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationStatus": {
      "description": "PriorityLevelConfigurationStatus represents the current state of a \"request-priority\".",
      "properties": {
        "conditions": {
          "description": "`conditions` is the current state of \"request-priority\".",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.QueuingConfiguration": {
      "description": "QueuingConfiguration holds the configuration parameters for queuing",
      "properties": {
        "handSize": {
          "default": 0,
          "description": "`handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.",
          "format": "int32",
          "type": "integer"
        },
        "queueLengthLimit": {
          "default": 0,
          "description": "`queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.",
          "format": "int32",
          "type": "integer"
        },
        "queues": {
          "default": 0,
          "description": "`queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.ResourcePolicyRule": {
      "description": "ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==\"\"`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.",
      "properties": {
        "apiGroups": {
          "description": "`apiGroups` is a list of matching API groups and may not be empty. \"*\" matches all API groups and, if present, must be the only entry. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "clusterScope": {
          "description": "`clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.",
          "type": "boolean"
        },
        "namespaces": {
          "description": "`namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains \"*\".  Note that \"*\" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "resources": {
          "description": "`resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ \"services\", \"nodes/status\" ].  This list may not be empty. \"*\" matches all resources and, if present, must be the only entry. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "verbs": {
          "description": "`verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs and, if present, must be the only entry. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "required": [
        "verbs",
        "apiGroups",
        "resources"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.ServiceAccountSubject": {
      "description": "ServiceAccountSubject holds detailed information for service-account-kind subject.",
      "properties": {
        "name": {
          "default": "",
          "description": "`name` is the name of matching ServiceAccount objects, or \"*\" to match regardless of name. Required.",
          "type": "string"
        },
        "namespace": {
          "default": "",
          "description": "`namespace` is the namespace of matching ServiceAccount objects. Required.",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1.Subject": {
      "description": "Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.",
      "properties": {
        "group": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.GroupSubject"
            }
          ],
          "description": "`group` matches based on user group name."
        },
        "kind": {
          "default": "",
          "description": "`kind` indicates which one of the other fields is non-empty. Required",
          "type": "string"
        },
        "serviceAccount": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.ServiceAccountSubject"
            }
          ],
          "description": "`serviceAccount` matches ServiceAccounts."
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1.UserSubject"
            }
          ],
          "description": "`user` matches based on username."
        }
      },
      "required": [
        "kind"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "kind",
          "fields-to-discriminateBy": {
            "group": "Group",
            "serviceAccount": "ServiceAccount",
            "user": "User"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1.UserSubject": {
      "description": "UserSubject holds detailed information for user-kind subject.",
      "properties": {
        "name": {
          "default": "",
          "description": "`name` is the username that matches, or \"*\" to match all usernames. Required.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.ExemptPriorityLevelConfiguration": {
      "description": "ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.",
      "properties": {
        "lendablePercent": {
          "description": "`lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels.  This value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.\n\nLendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )",
          "format": "int32",
          "type": "integer"
        },
        "nominalConcurrencyShares": {
          "description": "`nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats nominally reserved for this priority level. This DOES NOT limit the dispatching from this priority level but affects the other priority levels through the borrowing mechanism. The server's concurrency limit (ServerCL) is divided among all the priority levels in proportion to their NCS values:\n\nNominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)\n\nBigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of zero.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.FlowDistinguisherMethod": {
      "description": "FlowDistinguisherMethod specifies the method of a flow distinguisher.",
      "properties": {
        "type": {
          "default": "",
          "description": "`type` is the type of flow distinguisher method The supported types are \"ByUser\" and \"ByNamespace\". Required.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.FlowSchemaCondition": {
      "description": "FlowSchemaCondition describes conditions for a FlowSchema.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "`lastTransitionTime` is the last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "`message` is a human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "`reason` is a unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "`status` is the status of the condition. Can be True, False, Unknown. Required.",
          "type": "string"
        },
        "type": {
          "description": "`type` is the type of the condition. Required.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.FlowSchemaSpec": {
      "description": "FlowSchemaSpec describes how the FlowSchema's specification looks like.",
      "properties": {
        "distinguisherMethod": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.FlowDistinguisherMethod"
            }
          ],
          "description": "`distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string."
        },
        "matchingPrecedence": {
          "default": 0,
          "description": "`matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.",
          "format": "int32",
          "type": "integer"
        },
        "priorityLevelConfiguration": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationReference"
            }
          ],
          "default": {},
          "description": "`priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required."
        },
        "rules": {
          "description": "`rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.PolicyRulesWithSubjects"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "priorityLevelConfiguration"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.FlowSchemaStatus": {
      "description": "FlowSchemaStatus represents the current state of a FlowSchema.",
      "properties": {
        "conditions": {
          "description": "`conditions` is a list of the current states of FlowSchema.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.FlowSchemaCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.GroupSubject": {
      "description": "GroupSubject holds detailed information for group-kind subject.",
      "properties": {
        "name": {
          "default": "",
          "description": "name is the user group that matches, or \"*\" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.LimitResponse": {
      "description": "LimitResponse defines how to handle requests that can not be executed right now.",
      "properties": {
        "queuing": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.QueuingConfiguration"
            }
          ],
          "description": "`queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `\"Queue\"`."
        },
        "type": {
          "default": "",
          "description": "`type` is \"Queue\" or \"Reject\". \"Queue\" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \"Reject\" means that requests that can not be executed upon arrival are rejected. Required.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "queuing": "Queuing"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1beta3.LimitedPriorityLevelConfiguration": {
      "description": "LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:\n  - How are requests for this priority level limited?\n  - What should be done with requests that exceed the limit?",
      "properties": {
        "borrowingLimitPercent": {
          "description": "`borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.\n\nBorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )\n\nThe value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.",
          "format": "int32",
          "type": "integer"
        },
        "lendablePercent": {
          "description": "`lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.\n\nLendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )",
          "format": "int32",
          "type": "integer"
        },
        "limitResponse": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.LimitResponse"
            }
          ],
          "default": {},
          "description": "`limitResponse` indicates what to do with requests that can not be executed right now"
        },
        "nominalConcurrencyShares": {
          "default": 0,
          "description": "`nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:\n\nNominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)\n\nBigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of 30.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.NonResourcePolicyRule": {
      "description": "NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.",
      "properties": {
        "nonResourceURLs": {
          "description": "`nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:\n  - \"/healthz\" is legal\n  - \"/hea*\" is illegal\n  - \"/hea\" is legal but matches nothing\n  - \"/hea/*\" also matches nothing\n  - \"/healthz/*\" matches all per-component health checks.\n\"*\" matches all non-resource urls. if it is present, it must be the only entry. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "verbs": {
          "description": "`verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs. If it is present, it must be the only entry. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "required": [
        "verbs",
        "nonResourceURLs"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.PolicyRulesWithSubjects": {
      "description": "PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.",
      "properties": {
        "nonResourceRules": {
          "description": "`nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.NonResourcePolicyRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resourceRules": {
          "description": "`resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.ResourcePolicyRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "subjects": {
          "description": "subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.Subject"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "subjects"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationCondition": {
      "description": "PriorityLevelConfigurationCondition defines the condition of priority level.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "`lastTransitionTime` is the last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "`message` is a human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "`reason` is a unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "`status` is the status of the condition. Can be True, False, Unknown. Required.",
          "type": "string"
        },
        "type": {
          "description": "`type` is the type of the condition. Required.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationReference": {
      "description": "PriorityLevelConfigurationReference contains information that points to the \"request-priority\" being used.",
      "properties": {
        "name": {
          "default": "",
          "description": "`name` is the name of the priority level configuration being referenced Required.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationSpec": {
      "description": "PriorityLevelConfigurationSpec specifies the configuration of a priority level.",
      "properties": {
        "exempt": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.ExemptPriorityLevelConfiguration"
            }
          ],
          "description": "`exempt` specifies how requests are handled for an exempt priority level. This field MUST be empty if `type` is `\"Limited\"`. This field MAY be non-empty if `type` is `\"Exempt\"`. If empty and `type` is `\"Exempt\"` then the default values for `ExemptPriorityLevelConfiguration` apply."
        },
        "limited": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.LimitedPriorityLevelConfiguration"
            }
          ],
          "description": "`limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `\"Limited\"`."
        },
        "type": {
          "default": "",
          "description": "`type` indicates whether this priority level is subject to limitation on request execution.  A value of `\"Exempt\"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `\"Limited\"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "exempt": "Exempt",
            "limited": "Limited"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationStatus": {
      "description": "PriorityLevelConfigurationStatus represents the current state of a \"request-priority\".",
      "properties": {
        "conditions": {
          "description": "`conditions` is the current state of \"request-priority\".",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.QueuingConfiguration": {
      "description": "QueuingConfiguration holds the configuration parameters for queuing",
      "properties": {
        "handSize": {
          "default": 0,
          "description": "`handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.",
          "format": "int32",
          "type": "integer"
        },
        "queueLengthLimit": {
          "default": 0,
          "description": "`queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.",
          "format": "int32",
          "type": "integer"
        },
        "queues": {
          "default": 0,
          "description": "`queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.ResourcePolicyRule": {
      "description": "ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==\"\"`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.",
      "properties": {
        "apiGroups": {
          "description": "`apiGroups` is a list of matching API groups and may not be empty. \"*\" matches all API groups and, if present, must be the only entry. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "clusterScope": {
          "description": "`clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.",
          "type": "boolean"
        },
        "namespaces": {
          "description": "`namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains \"*\".  Note that \"*\" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "resources": {
          "description": "`resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ \"services\", \"nodes/status\" ].  This list may not be empty. \"*\" matches all resources and, if present, must be the only entry. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "verbs": {
          "description": "`verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs and, if present, must be the only entry. Required.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "required": [
        "verbs",
        "apiGroups",
        "resources"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.ServiceAccountSubject": {
      "description": "ServiceAccountSubject holds detailed information for service-account-kind subject.",
      "properties": {
        "name": {
          "default": "",
          "description": "`name` is the name of matching ServiceAccount objects, or \"*\" to match regardless of name. Required.",
          "type": "string"
        },
        "namespace": {
          "default": "",
          "description": "`namespace` is the namespace of matching ServiceAccount objects. Required.",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1beta3.Subject": {
      "description": "Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.",
      "properties": {
        "group": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.GroupSubject"
            }
          ],
          "description": "`group` matches based on user group name."
        },
        "kind": {
          "default": "",
          "description": "`kind` indicates which one of the other fields is non-empty. Required",
          "type": "string"
        },
        "serviceAccount": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.ServiceAccountSubject"
            }
          ],
          "description": "`serviceAccount` matches ServiceAccounts."
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.flowcontrol.v1beta3.UserSubject"
            }
          ],
          "description": "`user` matches based on username."
        }
      },
      "required": [
        "kind"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "kind",
          "fields-to-discriminateBy": {
            "group": "Group",
            "serviceAccount": "ServiceAccount",
            "user": "User"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1beta3.UserSubject": {
      "description": "UserSubject holds detailed information for user-kind subject.",
      "properties": {
        "name": {
          "default": "",
          "description": "`name` is the username that matches, or \"*\" to match all usernames. Required.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.HTTPIngressPath": {
      "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.",
      "properties": {
        "backend": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.networking.v1.IngressBackend"
            }
          ],
          "default": {},
          "description": "backend defines the referenced service endpoint to which the traffic will be forwarded to."
        },
        "path": {
          "description": "path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".",
          "type": "string"
        },
        "pathType": {
          "description": "pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types.\n\nPossible enum values:\n - `\"Exact\"` matches the URL path exactly and with case sensitivity.\n - `\"ImplementationSpecific\"` matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types.\n - `\"Prefix\"` matches based on a URL path prefix split by '/'. Matching is case sensitive and done on a path element by element basis. A path element refers to the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). If multiple matching paths exist in an Ingress spec, the longest matching path is given priority. Examples: - /foo/bar does not match requests to /foo/barbaz - /foo/bar matches request to /foo/bar and /foo/bar/baz - /foo and /foo/ both match requests to /foo and /foo/. If both paths are present in an Ingress spec, the longest matching path (/foo/) is given priority.",
          "enum": [
            "Exact",
            "ImplementationSpecific",
            "Prefix"
          ],
          "type": "string"
        }
      },
      "required": [
        "pathType",
        "backend"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.HTTPIngressRuleValue": {
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
      "properties": {
        "paths": {
          "description": "paths is a collection of paths that map requests to backends.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.networking.v1.HTTPIngressPath"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "paths"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IPBlock": {
      "description": "IPBlock describes a particular CIDR (Ex. \"192.168.1.0/24\",\"2001:db8::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.",
      "properties": {
        "cidr": {
          "default": "",
          "description": "cidr is a string representing the IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"",
          "type": "string"
        },
        "except": {
          "description": "except is a slice of CIDRs that should not be included within an IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\" Except values will be rejected if they are outside the cidr range",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "cidr"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressBackend": {
      "description": "IngressBackend describes all endpoints for a given service and port.",
      "properties": {
        "resource": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.TypedLocalObjectReference"
            }
          ],
          "description": "resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with \"Service\"."
        },
        "service": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.networking.v1.IngressServiceBackend"
            }
          ],
          "description": "service references a service as a backend. This is a mutually exclusive setting with \"Resource\"."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressClassParametersReference": {
      "description": "IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.",
      "properties": {
        "apiGroup": {
          "description": "apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "kind is the type of resource being referenced.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name is the name of resource being referenced.",
          "type": "string"
        },
        "namespace": {
          "description": "namespace is the namespace of the resource being referenced. This field is required when scope is set to \"Namespace\" and must be unset when scope is set to \"Cluster\".",
          "type": "string"
        },
        "scope": {
          "description": "scope represents if this refers to a cluster or namespace scoped resource. This may be set to \"Cluster\" (default) or \"Namespace\".",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressClassSpec": {
      "description": "IngressClassSpec provides information about the class of an Ingress.",
      "properties": {
        "controller": {
          "description": "controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable.",
          "type": "string"
        },
        "parameters": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.networking.v1.IngressClassParametersReference"
            }
          ],
          "description": "parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressLoadBalancerIngress": {
      "description": "IngressLoadBalancerIngress represents the status of a load-balancer ingress point.",
      "properties": {
        "hostname": {
          "description": "hostname is set for load-balancer ingress points that are DNS based.",
          "type": "string"
        },
        "ip": {
          "description": "ip is set for load-balancer ingress points that are IP based.",
          "type": "string"
        },
        "ports": {
          "description": "ports provides information about the ports exposed by this LoadBalancer.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.networking.v1.IngressPortStatus"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressLoadBalancerStatus": {
      "description": "IngressLoadBalancerStatus represents the status of a load-balancer.",
      "properties": {
        "ingress": {
          "description": "ingress is a list containing ingress points for the load-balancer.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.networking.v1.IngressLoadBalancerIngress"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressPortStatus": {
      "description": "IngressPortStatus represents the error condition of a service port",
      "properties": {
        "error": {
          "description": "error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.",
          "type": "string"
        },
        "port": {
          "default": 0,
          "description": "port is the port number of the ingress port.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "default": "",
          "description": "protocol is the protocol of the ingress port. The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "required": [
        "port",
        "protocol"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressRule": {
      "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
      "properties": {
        "host": {
          "description": "host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nhost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.",
          "type": "string"
        },
        "http": {
          "$ref": "#/components/schemas/io.k8s.api.networking.v1.HTTPIngressRuleValue"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressServiceBackend": {
      "description": "IngressServiceBackend references a Kubernetes Service as a Backend.",
      "properties": {
        "name": {
          "default": "",
          "description": "name is the referenced service. The service must exist in the same namespace as the Ingress object.",
          "type": "string"
        },
        "port": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.networking.v1.ServiceBackendPort"
            }
          ],
          "default": {},
          "description": "port of the referenced service. A port name or port number is required for a IngressServiceBackend."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressSpec": {
      "description": "IngressSpec describes the Ingress the user wishes to exist.",
      "properties": {
        "defaultBackend": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.networking.v1.IngressBackend"
            }
          ],
          "description": "defaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller."
        },
        "ingressClassName": {
          "description": "ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.",
          "type": "string"
        },
        "rules": {
          "description": "rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.networking.v1.IngressRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "tls": {
          "description": "tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.networking.v1.IngressTLS"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressStatus": {
      "description": "IngressStatus describe the current state of the Ingress.",
      "properties": {
        "loadBalancer": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.networking.v1.IngressLoadBalancerStatus"
            }
          ],
          "default": {},
          "description": "loadBalancer contains the current status of the load-balancer."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressTLS": {
      "description": "IngressTLS describes the transport layer security associated with an ingress.",
      "properties": {
        "hosts": {
          "description": "hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "secretName": {
          "description": "secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the \"Host\" header is used for routing.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyEgressRule": {
      "description": "NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8",
      "properties": {
        "ports": {
          "description": "ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.networking.v1.NetworkPolicyPort"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "to": {
          "description": "to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.networking.v1.NetworkPolicyPeer"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyIngressRule": {
      "description": "NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.",
      "properties": {
        "from": {
          "description": "from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.networking.v1.NetworkPolicyPeer"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "ports": {
          "description": "ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.networking.v1.NetworkPolicyPort"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyPeer": {
      "description": "NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed",
      "properties": {
        "ipBlock": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.networking.v1.IPBlock"
            }
          ],
          "description": "ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be."
        },
        "namespaceSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector."
        },
        "podSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyPort": {
      "description": "NetworkPolicyPort describes a port to allow traffic on",
      "properties": {
        "endPort": {
          "description": "endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.",
          "format": "int32",
          "type": "integer"
        },
        "port": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched."
        },
        "protocol": {
          "description": "protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicySpec": {
      "description": "NetworkPolicySpec provides the specification of a NetworkPolicy",
      "properties": {
        "egress": {
          "description": "egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.networking.v1.NetworkPolicyEgressRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "ingress": {
          "description": "ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.networking.v1.NetworkPolicyIngressRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "podSelector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "default": {},
          "description": "podSelector selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace."
        },
        "policyTypes": {
          "description": "policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are [\"Ingress\"], [\"Egress\"], or [\"Ingress\", \"Egress\"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8",
          "items": {
            "default": "",
            "enum": [
              "Egress",
              "Ingress"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "podSelector"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.ServiceBackendPort": {
      "description": "ServiceBackendPort is the service port being referenced.",
      "properties": {
        "name": {
          "description": "name is the name of the port on the Service. This is a mutually exclusive setting with \"Number\".",
          "type": "string"
        },
        "number": {
          "description": "number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with \"Name\".",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.node.v1.Overhead": {
      "description": "Overhead structure represents the resource overhead associated with running a pod.",
      "properties": {
        "podFixed": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "podFixed represents the fixed resource overhead associated with running a pod.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.node.v1.Scheduling": {
      "description": "Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.",
      "properties": {
        "nodeSelector": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.",
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "tolerations": {
          "description": "tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Toleration"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.policy.v1.PodDisruptionBudgetSpec": {
      "description": "PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.",
      "properties": {
        "maxUnavailable": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\"."
        },
        "minAvailable": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            }
          ],
          "description": "An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\"."
        },
        "selector": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            }
          ],
          "description": "Label query over pods whose evictions are managed by the disruption budget. A null selector will match no pods, while an empty ({}) selector will select all pods within the namespace.",
          "x-kubernetes-patch-strategy": "replace"
        },
        "unhealthyPodEvictionPolicy": {
          "description": "UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\nValid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.\n\nIfHealthyBudget policy means that running pods (status.phase=\"Running\"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.\n\nAlwaysAllow policy means that all running pods (status.phase=\"Running\"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.\n\nAdditional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.\n\nThis field is beta-level. The eviction API uses this field when the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).\n\nPossible enum values:\n - `\"AlwaysAllow\"` policy means that all running pods (status.phase=\"Running\"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.\n - `\"IfHealthyBudget\"` policy means that running pods (status.phase=\"Running\"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.",
          "enum": [
            "AlwaysAllow",
            "IfHealthyBudget"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.policy.v1.PodDisruptionBudgetStatus": {
      "description": "PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.",
      "properties": {
        "conditions": {
          "description": "Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute\n              the number of allowed disruptions. Therefore no disruptions are\n              allowed and the status of the condition will be False.\n- InsufficientPods: The number of pods are either at or below the number\n                    required by the PodDisruptionBudget. No disruptions are\n                    allowed and the status of the condition will be False.\n- SufficientPods: There are more pods than required by the PodDisruptionBudget.\n                  The condition will be True, and the number of allowed\n                  disruptions are provided by the disruptionsAllowed property.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentHealthy": {
          "default": 0,
          "description": "current number of healthy pods",
          "format": "int32",
          "type": "integer"
        },
        "desiredHealthy": {
          "default": 0,
          "description": "minimum desired number of healthy pods",
          "format": "int32",
          "type": "integer"
        },
        "disruptedPods": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
          },
          "description": "DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.",
          "type": "object"
        },
        "disruptionsAllowed": {
          "default": 0,
          "description": "Number of pod disruptions that are currently allowed.",
          "format": "int32",
          "type": "integer"
        },
        "expectedPods": {
          "default": 0,
          "description": "total number of pods counted by this disruption budget",
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "disruptionsAllowed",
        "currentHealthy",
        "desiredHealthy",
        "expectedPods"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1.AggregationRule": {
      "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "properties": {
        "clusterRoleSelectors": {
          "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.rbac.v1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\" represents the core API group and \"*\" represents all API groups.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to. '*' represents all resources.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1.RoleRef": {
      "description": "RoleRef contains information that points to the role being used",
      "properties": {
        "apiGroup": {
          "default": "",
          "description": "APIGroup is the group for the resource being referenced",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.rbac.v1.Subject": {
      "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name of the object being referenced.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.storage.v1.CSIDriverSpec": {
      "description": "CSIDriverSpec is the specification of a CSIDriver.",
      "properties": {
        "attachRequired": {
          "description": "attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.\n\nThis field is immutable.",
          "type": "boolean"
        },
        "fsGroupPolicy": {
          "description": "fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.\n\nThis field was immutable in Kubernetes < 1.29 and now is mutable.\n\nDefaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.",
          "type": "string"
        },
        "podInfoOnMount": {
          "description": "podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.\n\nThe CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.\n\nThe following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" if the volume is an ephemeral inline volume\n                                defined by a CSIVolumeSource, otherwise \"false\"\n\n\"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.\n\nThis field was immutable in Kubernetes < 1.29 and now is mutable.",
          "type": "boolean"
        },
        "requiresRepublish": {
          "description": "requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.\n\nNote: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.",
          "type": "boolean"
        },
        "seLinuxMount": {
          "description": "seLinuxMount specifies if the CSI driver supports \"-o context\" mount option.\n\nWhen \"true\", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with \"-o context=xyz\" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.\n\nWhen \"false\", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.\n\nDefault is \"false\".",
          "type": "boolean"
        },
        "storageCapacity": {
          "description": "storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.\n\nThe check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.\n\nAlternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.\n\nThis field was immutable in Kubernetes <= 1.22 and now is mutable.",
          "type": "boolean"
        },
        "tokenRequests": {
          "description": "tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: \"csi.storage.k8s.io/serviceAccount.tokens\": {\n  \"<audience>\": {\n    \"token\": <token>,\n    \"expirationTimestamp\": <expiration timestamp in RFC3339>,\n  },\n  ...\n}\n\nNote: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.storage.v1.TokenRequest"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "volumeLifecycleModes": {
          "description": "volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.\n\nThe other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.\n\nFor more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.\n\nThis field is beta. This field is immutable.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "type": "object"
    },
    "io.k8s.api.storage.v1.CSINodeDriver": {
      "description": "CSINodeDriver holds information about the specification of one CSI driver installed on a node",
      "properties": {
        "allocatable": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.storage.v1.VolumeNodeResources"
            }
          ],
          "description": "allocatable represents the volume resources of a node that are available for scheduling. This field is beta."
        },
        "name": {
          "default": "",
          "description": "name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.",
          "type": "string"
        },
        "nodeID": {
          "default": "",
          "description": "nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.",
          "type": "string"
        },
        "topologyKeys": {
          "description": "topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "name",
        "nodeID"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.CSINodeSpec": {
      "description": "CSINodeSpec holds information about the specification of all CSI drivers installed on a node",
      "properties": {
        "drivers": {
          "description": "drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.storage.v1.CSINodeDriver"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "drivers"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.TokenRequest": {
      "description": "TokenRequest contains parameters of a service account token.",
      "properties": {
        "audience": {
          "default": "",
          "description": "audience is the intended audience of the token in \"TokenRequestSpec\". It will default to the audiences of kube apiserver.",
          "type": "string"
        },
        "expirationSeconds": {
          "description": "expirationSeconds is the duration of validity of the token in \"TokenRequestSpec\". It has the same default value of \"ExpirationSeconds\" in \"TokenRequestSpec\".",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "audience"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeAttachmentSource": {
      "description": "VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.",
      "properties": {
        "inlineVolumeSpec": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeSpec"
            }
          ],
          "description": "inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature."
        },
        "persistentVolumeName": {
          "description": "persistentVolumeName represents the name of the persistent volume to attach.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeAttachmentSpec": {
      "description": "VolumeAttachmentSpec is the specification of a VolumeAttachment request.",
      "properties": {
        "attacher": {
          "default": "",
          "description": "attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().",
          "type": "string"
        },
        "nodeName": {
          "default": "",
          "description": "nodeName represents the node that the volume should be attached to.",
          "type": "string"
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.storage.v1.VolumeAttachmentSource"
            }
          ],
          "default": {},
          "description": "source represents the volume that should be attached."
        }
      },
      "required": [
        "attacher",
        "source",
        "nodeName"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeAttachmentStatus": {
      "description": "VolumeAttachmentStatus is the status of a VolumeAttachment request.",
      "properties": {
        "attachError": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.storage.v1.VolumeError"
            }
          ],
          "description": "attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher."
        },
        "attached": {
          "default": false,
          "description": "attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "boolean"
        },
        "attachmentMetadata": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "object"
        },
        "detachError": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.api.storage.v1.VolumeError"
            }
          ],
          "description": "detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher."
        }
      },
      "required": [
        "attached"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeError": {
      "description": "VolumeError captures an error encountered during a volume operation.",
      "properties": {
        "message": {
          "description": "message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.",
          "type": "string"
        },
        "time": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "time represents the time the error was encountered."
        }
      },
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeNodeResources": {
      "description": "VolumeNodeResources is a set of resource limits for scheduling of volumes.",
      "properties": {
        "count": {
          "description": "count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition": {
      "description": "CustomResourceColumnDefinition specifies a column for server side printing.",
      "properties": {
        "description": {
          "description": "description is a human readable description of this column.",
          "type": "string"
        },
        "format": {
          "description": "format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.",
          "type": "string"
        },
        "jsonPath": {
          "default": "",
          "description": "jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name is a human readable name for the column.",
          "type": "string"
        },
        "priority": {
          "description": "priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "default": "",
          "description": "type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type",
        "jsonPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion": {
      "description": "CustomResourceConversion describes how to convert different versions of a CR.",
      "properties": {
        "strategy": {
          "default": "",
          "description": "strategy specifies how custom resources are converted between versions. Allowed values are: - `\"None\"`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `\"Webhook\"`: API Server will call to an external webhook to do the conversion. Additional information\n  is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.",
          "type": "string"
        },
        "webhook": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion"
            }
          ],
          "description": "webhook describes how to call the conversion webhook. Required when `strategy` is set to `\"Webhook\"`."
        }
      },
      "required": [
        "strategy"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition": {
      "description": "CustomResourceDefinitionCondition contains details for the current condition of this pod.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "lastTransitionTime last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "message is a human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "reason is a unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "status is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "type is the type of the condition. Types include Established, NamesAccepted and Terminating.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames": {
      "description": "CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition",
      "properties": {
        "categories": {
          "description": "categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "default": "",
          "description": "kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.",
          "type": "string"
        },
        "listKind": {
          "description": "listKind is the serialized kind of the list for this resource. Defaults to \"`kind`List\".",
          "type": "string"
        },
        "plural": {
          "default": "",
          "description": "plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.",
          "type": "string"
        },
        "shortNames": {
          "description": "shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "singular": {
          "description": "singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.",
          "type": "string"
        }
      },
      "required": [
        "plural",
        "kind"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec": {
      "description": "CustomResourceDefinitionSpec describes how a user wants their resource to appear",
      "properties": {
        "conversion": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion"
            }
          ],
          "description": "conversion defines conversion settings for the CRD."
        },
        "group": {
          "default": "",
          "description": "group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).",
          "type": "string"
        },
        "names": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames"
            }
          ],
          "default": {},
          "description": "names specify the resource and kind names for the custom resource."
        },
        "preserveUnknownFields": {
          "description": "preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning for details.",
          "type": "boolean"
        },
        "scope": {
          "default": "",
          "description": "scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.",
          "type": "string"
        },
        "versions": {
          "description": "versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "group",
        "names",
        "scope",
        "versions"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus": {
      "description": "CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition",
      "properties": {
        "acceptedNames": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames"
            }
          ],
          "default": {},
          "description": "acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec."
        },
        "conditions": {
          "description": "conditions indicate state for particular aspects of a CustomResourceDefinition",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "storedVersions": {
          "description": "storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion": {
      "description": "CustomResourceDefinitionVersion describes a version for CRD.",
      "properties": {
        "additionalPrinterColumns": {
          "description": "additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "deprecated": {
          "description": "deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.",
          "type": "boolean"
        },
        "deprecationWarning": {
          "description": "deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name is the version name, e.g. \u201cv1\u201d, \u201cv2beta1\u201d, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.",
          "type": "string"
        },
        "schema": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation"
            }
          ],
          "description": "schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource."
        },
        "selectableFields": {
          "description": "selectableFields specifies paths to fields that may be used as field selectors. A maximum of 8 selectable fields are allowed. See https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.SelectableField"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "served": {
          "default": false,
          "description": "served is a flag enabling/disabling this version from being served via REST APIs",
          "type": "boolean"
        },
        "storage": {
          "default": false,
          "description": "storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.",
          "type": "boolean"
        },
        "subresources": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources"
            }
          ],
          "description": "subresources specify what subresources this version of the defined custom resource have."
        }
      },
      "required": [
        "name",
        "served",
        "storage"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale": {
      "description": "CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.",
      "properties": {
        "labelSelectorPath": {
          "description": "labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.",
          "type": "string"
        },
        "specReplicasPath": {
          "default": "",
          "description": "specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.",
          "type": "string"
        },
        "statusReplicasPath": {
          "default": "",
          "description": "statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.",
          "type": "string"
        }
      },
      "required": [
        "specReplicasPath",
        "statusReplicasPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus": {
      "description": "CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza",
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources": {
      "description": "CustomResourceSubresources defines the status and scale subresources for CustomResources.",
      "properties": {
        "scale": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale"
            }
          ],
          "description": "scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object."
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus"
            }
          ],
          "description": "status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object."
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation": {
      "description": "CustomResourceValidation is a list of validation methods for CustomResources.",
      "properties": {
        "openAPIV3Schema": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
            }
          ],
          "description": "openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning."
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation": {
      "description": "ExternalDocumentation allows referencing an external resource for extended documentation.",
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON": {
      "description": "JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps": {
      "description": "JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).",
      "properties": {
        "$ref": {
          "type": "string"
        },
        "$schema": {
          "type": "string"
        },
        "additionalItems": {
          "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        },
        "additionalProperties": {
          "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        },
        "allOf": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "anyOf": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "default": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
            }
          ],
          "description": "default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false."
        },
        "definitions": {
          "additionalProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
              }
            ],
            "default": {}
          },
          "type": "object"
        },
        "dependencies": {
          "additionalProperties": {
            "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
          },
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "items": {
            "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "example": {
          "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        },
        "exclusiveMaximum": {
          "type": "boolean"
        },
        "exclusiveMinimum": {
          "type": "boolean"
        },
        "externalDocs": {
          "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation"
        },
        "format": {
          "description": "format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:\n\n- bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "items": {
          "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray"
        },
        "maxItems": {
          "format": "int64",
          "type": "integer"
        },
        "maxLength": {
          "format": "int64",
          "type": "integer"
        },
        "maxProperties": {
          "format": "int64",
          "type": "integer"
        },
        "maximum": {
          "format": "double",
          "type": "number"
        },
        "minItems": {
          "format": "int64",
          "type": "integer"
        },
        "minLength": {
          "format": "int64",
          "type": "integer"
        },
        "minProperties": {
          "format": "int64",
          "type": "integer"
        },
        "minimum": {
          "format": "double",
          "type": "number"
        },
        "multipleOf": {
          "format": "double",
          "type": "number"
        },
        "not": {
          "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
        },
        "nullable": {
          "type": "boolean"
        },
        "oneOf": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "pattern": {
          "type": "string"
        },
        "patternProperties": {
          "additionalProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
              }
            ],
            "default": {}
          },
          "type": "object"
        },
        "properties": {
          "additionalProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
              }
            ],
            "default": {}
          },
          "type": "object"
        },
        "required": {
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "x-kubernetes-embedded-resource": {
          "description": "x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).",
          "type": "boolean"
        },
        "x-kubernetes-int-or-string": {
          "description": "x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:\n\n1) anyOf:\n   - type: integer\n   - type: string\n2) allOf:\n   - anyOf:\n     - type: integer\n     - type: string\n   - ... zero or more",
          "type": "boolean"
        },
        "x-kubernetes-list-map-keys": {
          "description": "x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.\n\nThis tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).\n\nThe properties specified must either be required or have a default value, to ensure those properties are present for all list items.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "x-kubernetes-list-type": {
          "description": "x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:\n\n1) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic lists will be entirely replaced when updated. This extension\n     may be used on any type of list (struct, scalar, ...).\n2) `set`:\n     Sets are lists that must not have multiple items with the same value. Each\n     value must be a scalar, an object with x-kubernetes-map-type `atomic` or an\n     array with x-kubernetes-list-type `atomic`.\n3) `map`:\n     These lists are like maps in that their elements have a non-index key\n     used to identify them. Order is preserved upon merge. The map tag\n     must only be used on a list with elements of type object.\nDefaults to atomic for arrays.",
          "type": "string"
        },
        "x-kubernetes-map-type": {
          "description": "x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:\n\n1) `granular`:\n     These maps are actual maps (key-value pairs) and each fields are independent\n     from each other (they can each be manipulated by separate actors). This is\n     the default behaviour for all maps.\n2) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic maps will be entirely replaced when updated.",
          "type": "string"
        },
        "x-kubernetes-preserve-unknown-fields": {
          "description": "x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.",
          "type": "boolean"
        },
        "x-kubernetes-validations": {
          "description": "x-kubernetes-validations describes a list of validation rules written in the CEL expression language.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ValidationRule"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "rule"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "rule",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray": {
      "description": "JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool": {
      "description": "JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray": {
      "description": "JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.SelectableField": {
      "description": "SelectableField specifies the JSON path of a field that may be used with field selectors.",
      "properties": {
        "jsonPath": {
          "default": "",
          "description": "jsonPath is a simple JSON path which is evaluated against each custom resource to produce a field selector value. Only JSON paths without the array notation are allowed. Must point to a field of type string, boolean or integer. Types with enum values and strings with formats are allowed. If jsonPath refers to absent field in a resource, the jsonPath evaluates to an empty string. Must not point to metdata fields. Required.",
          "type": "string"
        }
      },
      "required": [
        "jsonPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "properties": {
        "name": {
          "default": "",
          "description": "name is the name of the service. Required",
          "type": "string"
        },
        "namespace": {
          "default": "",
          "description": "namespace is the namespace of the service. Required",
          "type": "string"
        },
        "path": {
          "description": "path is an optional URL path at which the webhook will be contacted.",
          "type": "string"
        },
        "port": {
          "description": "port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ValidationRule": {
      "description": "ValidationRule describes a validation rule written in the CEL expression language.",
      "properties": {
        "fieldPath": {
          "description": "fieldPath represents the field path returned when the validation fails. It must be a relative JSON path (i.e. with array notation) scoped to the location of this x-kubernetes-validations extension in the schema and refer to an existing field. e.g. when validation checks if a specific attribute `foo` under a map `testMap`, the fieldPath could be set to `.testMap.foo` If the validation checks two lists must have unique attributes, the fieldPath could be set to either of the list: e.g. `.testList` It does not support list numeric index. It supports child operation to refer to an existing field currently. Refer to [JSONPath support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/) for more info. Numeric index of array is not supported. For field name which contains special characters, use `['specialName']` to refer the field name. e.g. for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set to `.testList['foo.34$']`",
          "type": "string"
        },
        "message": {
          "description": "Message represents the message displayed when validation fails. The message is required if the Rule contains line breaks. The message must not contain line breaks. If unset, the message is \"failed rule: {Rule}\". e.g. \"must be a URL with the host matching spec.host\"",
          "type": "string"
        },
        "messageExpression": {
          "description": "MessageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a rule, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the rule; the only difference is the return type. Example: \"x must be less than max (\"+string(self.max)+\")\"",
          "type": "string"
        },
        "optionalOldSelf": {
          "description": "optionalOldSelf is used to opt a transition rule into evaluation even when the object is first created, or if the old object is missing the value.\n\nWhen enabled `oldSelf` will be a CEL optional whose value will be `None` if there is no old value, or when the object is initially created.\n\nYou may check for presence of oldSelf using `oldSelf.hasValue()` and unwrap it after checking using `oldSelf.value()`. Check the CEL documentation for Optional types for more information: https://pkg.go.dev/github.com/google/cel-go/cel#OptionalTypes\n\nMay not be set unless `oldSelf` is used in `rule`.",
          "type": "boolean"
        },
        "reason": {
          "description": "reason provides a machine-readable validation failure reason that is returned to the caller when a request fails this validation rule. The HTTP status code returned to the caller will match the reason of the reason of the first failed validation rule. The currently supported reasons are: \"FieldValueInvalid\", \"FieldValueForbidden\", \"FieldValueRequired\", \"FieldValueDuplicate\". If not set, default to use \"FieldValueInvalid\". All future added reasons must be accepted by clients when reading this value and unknown reasons should be treated as FieldValueInvalid.\n\nPossible enum values:\n - `\"FieldValueDuplicate\"` is used to report collisions of values that must be unique (e.g. unique IDs).\n - `\"FieldValueForbidden\"` is used to report valid (as per formatting rules) values which would be accepted under some conditions, but which are not permitted by the current conditions (such as security policy).\n - `\"FieldValueInvalid\"` is used to report malformed values (e.g. failed regex match, too long, out of bounds).\n - `\"FieldValueRequired\"` is used to report required values that are not provided (e.g. empty strings, null values, or empty arrays).",
          "enum": [
            "FieldValueDuplicate",
            "FieldValueForbidden",
            "FieldValueInvalid",
            "FieldValueRequired"
          ],
          "type": "string"
        },
        "rule": {
          "default": "",
          "description": "Rule represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec The Rule is scoped to the location of the x-kubernetes-validations extension in the schema. The `self` variable in the CEL expression is bound to the scoped value. Example: - Rule scoped to the root of a resource with a status subresource: {\"rule\": \"self.status.actual <= self.spec.maxDesired\"}\n\nIf the Rule is scoped to an object with properties, the accessible properties of the object are field selectable via `self.field` and field presence can be checked via `has(self.field)`. Null valued fields are treated as absent fields in CEL expressions. If the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map are accessible via CEL macros and functions such as `self.all(...)`. If the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and functions. If the Rule is scoped to a scalar, `self` is bound to the scalar value. Examples: - Rule scoped to a map of objects: {\"rule\": \"self.components['Widget'].priority < 10\"} - Rule scoped to a list of integers: {\"rule\": \"self.values.all(value, value >= 0 && value < 100)\"} - Rule scoped to a string value: {\"rule\": \"self.startsWith('kube')\"}\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object and from any x-kubernetes-embedded-resource annotated objects. No other metadata properties are accessible.\n\nUnknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This includes: - Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields. - Object properties where the property schema is of an \"unknown type\". An \"unknown type\" is recursively defined as:\n  - A schema with no type and x-kubernetes-preserve-unknown-fields set to true\n  - An array where the items schema is of an \"unknown type\"\n  - An object where the additionalProperties schema is of an \"unknown type\"\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:\n\t  \"true\", \"false\", \"null\", \"in\", \"as\", \"break\", \"const\", \"continue\", \"else\", \"for\", \"function\", \"if\",\n\t  \"import\", \"let\", \"loop\", \"package\", \"namespace\", \"return\".\nExamples:\n  - Rule accessing a property named \"namespace\": {\"rule\": \"self.__namespace__ > 0\"}\n  - Rule accessing a property named \"x-prop\": {\"rule\": \"self.x__dash__prop > 0\"}\n  - Rule accessing a property named \"redact__d\": {\"rule\": \"self.redact__underscores__d > 0\"}\n\nEquality on arrays with x-kubernetes-list-type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:\n  - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and\n    non-intersecting elements in `Y` are appended, retaining their partial order.\n  - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values\n    are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with\n    non-intersecting keys are appended, retaining their partial order.\n\nIf `rule` makes use of the `oldSelf` variable it is implicitly a `transition rule`.\n\nBy default, the `oldSelf` variable is the same type as `self`. When `optionalOldSelf` is true, the `oldSelf` variable is a CEL optional\n variable whose value() is the same type as `self`.\nSee the documentation for the `optionalOldSelf` field for details.\n\nTransition rules by default are applied only on UPDATE requests and are skipped if an old value could not be found. You can opt a transition rule into unconditional evaluation by setting `optionalOldSelf` to true.",
          "type": "string"
        }
      },
      "required": [
        "rule"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig": {
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook.",
      "properties": {
        "caBundle": {
          "description": "caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference"
            }
          ],
          "description": "service is a reference to the service for this webhook. Either service or url must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`."
        },
        "url": {
          "description": "url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion": {
      "description": "WebhookConversion describes how to call a conversion webhook",
      "properties": {
        "clientConfig": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig"
            }
          ],
          "description": "clientConfig is the instructions for how to call the webhook if strategy is `Webhook`."
        },
        "conversionReviewVersions": {
          "description": "conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "conversionReviewVersions"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n``` <quantity>        ::= <signedNumber><suffix>\n\n\t(Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n\t(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n\n\t(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber> ```\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource": {
      "description": "APIResource specifies the name of a resource and whether it is namespaced.",
      "properties": {
        "categories": {
          "description": "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "group": {
          "description": "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name is the plural name of the resource.",
          "type": "string"
        },
        "namespaced": {
          "default": false,
          "description": "namespaced indicates if a resource is namespaced or not.",
          "type": "boolean"
        },
        "shortNames": {
          "description": "shortNames is a list of suggested short names of the resource.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "singularName": {
          "default": "",
          "description": "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
          "type": "string"
        },
        "storageVersionHash": {
          "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.",
          "type": "string"
        },
        "verbs": {
          "description": "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "description": "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
          "type": "string"
        }
      },
      "required": [
        "name",
        "singularName",
        "namespaced",
        "kind",
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Condition": {
      "description": "Condition contains details for one aspect of the current state of this API Resource.",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable."
        },
        "message": {
          "default": "",
          "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
          "format": "int64",
          "type": "integer"
        },
        "reason": {
          "default": "",
          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status",
        "lastTransitionTime",
        "reason",
        "message"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Duration": {
      "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldSelectorRequirement": {
      "description": "FieldSelectorRequirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "default": "",
          "description": "key is the field selector key that the requirement applies to.",
          "type": "string"
        },
        "operator": {
          "default": "",
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. The list of operators may grow in the future.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery": {
      "description": "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
      "properties": {
        "groupVersion": {
          "default": "",
          "description": "groupVersion specifies the API group and version in the form \"group/version\"",
          "type": "string"
        },
        "version": {
          "default": "",
          "description": "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
          "type": "string"
        }
      },
      "required": [
        "groupVersion",
        "version"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionKind": {
      "description": "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coercion.  It doesn't use a GroupVersion to avoid custom marshalling",
      "properties": {
        "group": {
          "default": "",
          "type": "string"
        },
        "kind": {
          "default": "",
          "type": "string"
        },
        "version": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "group",
        "version",
        "kind"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "matchLabels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "default": "",
          "description": "key is the label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "default": "",
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "format": "int64",
          "type": "integer"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
            }
          ],
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over."
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime": {
      "description": "MicroTime is version of Time with microsecond level precision.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
          "type": "object"
        },
        "creationTimestamp": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "uid"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "properties": {
        "apiVersion": {
          "default": "",
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "default": "",
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string"
        },
        "uid": {
          "default": "",
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
      "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions": {
      "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
      "properties": {
        "resourceVersion": {
          "description": "Specifies the target ResourceVersion",
          "type": "string"
        },
        "uid": {
          "description": "Specifies the target UID.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR": {
      "description": "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
      "properties": {
        "clientCIDR": {
          "default": "",
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use.",
          "type": "string"
        },
        "serverAddress": {
          "default": "",
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
          "type": "string"
        }
      },
      "required": [
        "clientCIDR",
        "serverAddress"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
      "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
      "properties": {
        "field": {
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails": {
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
      "properties": {
        "causes": {
          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "group": {
          "description": "The group attribute of the resource associated with the status StatusReason.",
          "type": "string"
        },
        "kind": {
          "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
          "type": "string"
        },
        "retryAfterSeconds": {
          "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
          "format": "int32",
          "type": "integer"
        },
        "uid": {
          "description": "UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.runtime.RawExtension": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "description": "IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.",
      "format": "int-or-string",
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "type": "string"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition": {
      "description": "APIServiceCondition describes the state of an APIService at a particular point",
      "properties": {
        "lastTransitionTime": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "default": "",
          "description": "Status is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type is the type of the condition.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec": {
      "description": "APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.",
      "properties": {
        "caBundle": {
          "description": "CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string",
          "x-kubernetes-list-type": "atomic"
        },
        "group": {
          "description": "Group is the API group name this server hosts",
          "type": "string"
        },
        "groupPriorityMinimum": {
          "default": 0,
          "description": "GroupPriorityMinimum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMinimum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s",
          "format": "int32",
          "type": "integer"
        },
        "insecureSkipTLSVerify": {
          "description": "InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.",
          "type": "boolean"
        },
        "service": {
          "allOf": [
            {
              "$ref": "#/components/schemas/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference"
            }
          ],
          "description": "Service is a reference to the service for this API server.  It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled."
        },
        "version": {
          "description": "Version is the API version this server hosts.  For example, \"v1\"",
          "type": "string"
        },
        "versionPriority": {
          "default": 0,
          "description": "VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "groupPriorityMinimum",
        "versionPriority"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus": {
      "description": "APIServiceStatus contains derived information about an API server",
      "properties": {
        "conditions": {
          "description": "Current service state of apiService.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "properties": {
        "name": {
          "description": "Name is the name of the service",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the service",
          "type": "string"
        },
        "port": {
          "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.metrics.pkg.apis.metrics.v1beta1.ContainerMetrics": {
      "description": "ContainerMetrics sets resource usage metrics of a container.",
      "properties": {
        "name": {
          "default": "",
          "description": "Container name corresponding to the one from pod.spec.containers.",
          "type": "string"
        },
        "usage": {
          "additionalProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
              }
            ],
            "default": {}
          },
          "description": "The memory usage is the memory working set.",
          "type": "object"
        }
      },
      "required": [
        "name",
        "usage"
      ],
      "type": "object"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup": {
      "description": "APIGroup contains the name, the supported versions, and the preferred version of a group.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name is the name of the group.",
          "type": "string"
        },
        "preferredVersion": {
          "allOf": [
            {
              "$ref": "#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
            }
          ],
          "default": {},
          "description": "preferredVersion is the version preferred by the API server, which probably is the storage version."
        },
        "serverAddressByClientCIDRs": {
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "versions": {
          "description": "versions are the versions supported in this group.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "name",
        "versions"
      ],
      "type": "object"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList": {
      "description": "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "groups": {
          "description": "groups is a list of APIGroup.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.APIResource": {
      "description": "APIResource specifies the name of a resource and whether it is namespaced.",
      "properties": {
        "categories": {
          "description": "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "group": {
          "description": "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name is the plural name of the resource.",
          "type": "string"
        },
        "namespaced": {
          "default": false,
          "description": "namespaced indicates if a resource is namespaced or not.",
          "type": "boolean"
        },
        "shortNames": {
          "description": "shortNames is a list of suggested short names of the resource.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "singularName": {
          "default": "",
          "description": "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
          "type": "string"
        },
        "storageVersionHash": {
          "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.",
          "type": "string"
        },
        "verbs": {
          "description": "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "description": "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
          "type": "string"
        }
      },
      "required": [
        "name",
        "singularName",
        "namespaced",
        "kind",
        "verbs"
      ],
      "type": "object"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList": {
      "description": "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "groupVersion": {
          "default": "",
          "description": "groupVersion is the group and version this APIResourceList is for.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "resources": {
          "description": "resources contains the name of the resources and if they are namespaced.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.APIResource"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "groupVersion",
        "resources"
      ],
      "type": "object"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.Duration": {
      "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
      "type": "string"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery": {
      "description": "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
      "properties": {
        "groupVersion": {
          "default": "",
          "description": "groupVersion specifies the API group and version in the form \"group/version\"",
          "type": "string"
        },
        "version": {
          "default": "",
          "description": "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
          "type": "string"
        }
      },
      "required": [
        "groupVersion",
        "version"
      ],
      "type": "object"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "format": "int64",
          "type": "integer"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths": {
      "description": "RootPaths lists the paths available at root. For example: \"/healthz\", \"/apis\".",
      "properties": {
        "paths": {
          "description": "paths are the paths available at root.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "paths"
      ],
      "type": "object"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR": {
      "description": "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
      "properties": {
        "clientCIDR": {
          "default": "",
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use.",
          "type": "string"
        },
        "serverAddress": {
          "default": "",
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
          "type": "string"
        }
      },
      "required": [
        "clientCIDR",
        "serverAddress"
      ],
      "type": "object"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "format": "date-time",
      "type": "string"
    },
    "v1.APIGroup": {
      "description": "APIGroup contains the name, the supported versions, and the preferred version of a group.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "name is the name of the group.",
          "type": "string"
        },
        "preferredVersion": {
          "allOf": [
            {
              "$ref": "#/components/schemas/v1.GroupVersionForDiscovery"
            }
          ],
          "default": {},
          "description": "preferredVersion is the version preferred by the API server, which probably is the storage version."
        },
        "serverAddressByClientCIDRs": {
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.ServerAddressByClientCIDR"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "versions": {
          "description": "versions are the versions supported in this group.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.GroupVersionForDiscovery"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "name",
        "versions"
      ],
      "type": "object"
    },
    "v1.APIGroupList": {
      "description": "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "groups": {
          "description": "groups is a list of APIGroup.",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.APIGroup"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "v1.AddVolumeOptions": {
      "description": "AddVolumeOptions is provided when dynamically hot plugging a volume and disk",
      "properties": {
        "disk": {
          "allOf": [
            {
              "$ref": "#/components/schemas/v1.Disk"
            }
          ],
          "description": "Disk represents the hotplug disk that will be plugged into the running VMI"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "default": "",
          "description": "Name represents the name that will be used to map the disk to the corresponding volume. This overrides any name set inside the Disk struct itself.",
          "type": "string"
        },
        "volumeSource": {
          "allOf": [
            {
              "$ref": "#/components/schemas/v1.HotplugVolumeSource"
            }
          ],
          "description": "VolumeSource represents the source of the volume to map to the disk."
        }
      },
      "required": [
        "name",
        "disk",
        "volumeSource"
      ],
      "type": "object"
    },
    "v1.BlockSize": {
      "description": "BlockSize provides the option to change the block size presented to the VM for a disk. Only one of its members may be specified.",
      "properties": {
        "custom": {
          "$ref": "#/components/schemas/v1.CustomBlockSize"
        },
        "matchVolume": {
          "$ref": "#/components/schemas/v1.FeatureState"
        }
      },
      "type": "object"
    },
    "v1.CDRomTarget": {
      "properties": {
        "bus": {
          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.",
          "type": "string"
        },
        "readonly": {
          "description": "ReadOnly. Defaults to true.",
          "type": "boolean"
        },
        "tray": {
          "description": "Tray indicates if the tray of the device is open or closed. Allowed values are \"open\" and \"closed\". Defaults to closed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.CustomBlockSize": {
      "description": "CustomBlockSize represents the desired logical and physical block size for a VM disk.",
      "properties": {
        "logical": {
          "default": 0,
          "format": "int32",
          "type": "integer"
        },
        "physical": {
          "default": 0,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "logical",
        "physical"
      ],
      "type": "object"
    },
    "v1.DataVolumeSource": {
      "properties": {
        "hotpluggable": {
          "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
          "type": "boolean"
        },
        "name": {
          "default": "",
          "description": "Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1.Disk": {
      "properties": {
        "blockSize": {
          "allOf": [
            {
              "$ref": "#/components/schemas/v1.BlockSize"
            }
          ],
          "description": "If specified, the virtual disk will be presented with the given block sizes."
        },
        "bootOrder": {
          "description": "BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.",
          "format": "int32",
          "type": "integer"
        },
        "cache": {
          "description": "Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.",
          "type": "string"
        },
        "cdrom": {
          "allOf": [
            {
              "$ref": "#/components/schemas/v1.CDRomTarget"
            }
          ],
          "description": "Attach a volume as a cdrom to the vmi."
        },
        "dedicatedIOThread": {
          "description": "dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.",
          "type": "boolean"
        },
        "disk": {
          "allOf": [
            {
              "$ref": "#/components/schemas/v1.DiskTarget"
            }
          ],
          "description": "Attach a volume as a disk to the vmi."
        },
        "errorPolicy": {
          "description": "If specified, it can change the default error policy (stop) for the disk",
          "type": "string"
        },
        "io": {
          "description": "IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.",
          "type": "string"
        },
        "lun": {
          "allOf": [
            {
              "$ref": "#/components/schemas/v1.LunTarget"
            }
          ],
          "description": "Attach a volume as a LUN to the vmi."
        },
        "name": {
          "default": "",
          "description": "Name is the device name",
          "type": "string"
        },
        "serial": {
          "description": "Serial provides the ability to specify a serial number for the disk device.",
          "type": "string"
        },
        "shareable": {
          "description": "If specified the disk is made sharable and multiple write from different VMs are permitted",
          "type": "boolean"
        },
        "tag": {
          "description": "If specified, disk address and its tag will be provided to the guest via config drive metadata",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1.DiskTarget": {
      "properties": {
        "bus": {
          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb.",
          "type": "string"
        },
        "pciAddress": {
          "description": "If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10",
          "type": "string"
        },
        "readonly": {
          "description": "ReadOnly. Defaults to false.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.FeatureState": {
      "description": "Represents if a feature is enabled or disabled.",
      "properties": {
        "enabled": {
          "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.FreezeUnfreezeTimeout": {
      "description": "FreezeUnfreezeTimeout represent the time unfreeze will be triggered if guest was not unfrozen by unfreeze command",
      "properties": {
        "unfreezeTimeout": {
          "$ref": "#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration"
        }
      },
      "required": [
        "unfreezeTimeout"
      ],
      "type": "object"
    },
    "v1.GroupVersionForDiscovery": {
      "description": "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
      "properties": {
        "groupVersion": {
          "default": "",
          "description": "groupVersion specifies the API group and version in the form \"group/version\"",
          "type": "string"
        },
        "version": {
          "default": "",
          "description": "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
          "type": "string"
        }
      },
      "required": [
        "groupVersion",
        "version"
      ],
      "type": "object"
    },
    "v1.GuestAgentCommandInfo": {
      "description": "List of commands that QEMU guest agent supports",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1.HotplugVolumeSource": {
      "description": "HotplugVolumeSource Represents the source of a volume to mount which are capable of being hotplugged on a live running VMI. Only one of its members may be specified.",
      "properties": {
        "dataVolume": {
          "allOf": [
            {
              "$ref": "#/components/schemas/v1.DataVolumeSource"
            }
          ],
          "description": "DataVolume represents the dynamic creation a PVC for this volume as well as the process of populating that PVC with a disk image."
        },
        "persistentVolumeClaim": {
          "allOf": [
            {
              "$ref": "#/components/schemas/v1.PersistentVolumeClaimVolumeSource"
            }
          ],
          "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        }
      },
      "type": "object"
    },
    "v1.LunTarget": {
      "properties": {
        "bus": {
          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.",
          "type": "string"
        },
        "readonly": {
          "description": "ReadOnly. Defaults to false.",
          "type": "boolean"
        },
        "reservation": {
          "description": "Reservation indicates if the disk needs to support the persistent reservation for the SCSI disk",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.MigrateOptions": {
      "description": "MigrateOptions may be provided on migrate request.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PauseOptions": {
      "description": "PauseOptions may be provided on pause request.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.PersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
      "properties": {
        "claimName": {
          "default": "",
          "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "hotpluggable": {
          "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
          "type": "boolean"
        },
        "readOnly": {
          "description": "readOnly Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      },
      "required": [
        "claimName"
      ],
      "type": "object"
    },
    "v1.RemoveVolumeOptions": {
      "description": "RemoveVolumeOptions is provided when dynamically hot unplugging volume and disk",
      "properties": {
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "default": "",
          "description": "Name represents the name that maps to both the disk and volume that should be removed",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1.RestartOptions": {
      "description": "RestartOptions may be provided when deleting an API object.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "gracePeriodSeconds": {
          "description": "The duration in seconds before the object should be force-restarted. Value must be non-negative integer. The value zero indicates, restart immediately. If this value is nil, the default grace period for deletion of the corresponding VMI for the specified type will be used to determine on how much time to give the VMI to restart. Defaults to a per object value if not specified. zero means restart immediately. Allowed Values: nil and 0",
          "format": "int64",
          "type": "integer"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.RootPaths": {
      "description": "RootPaths lists the paths available at root. For example: \"/healthz\", \"/apis\".",
      "properties": {
        "paths": {
          "description": "paths are the paths available at root.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "paths"
      ],
      "type": "object"
    },
    "v1.SEVMeasurementInfo": {
      "description": "SEVMeasurementInfo contains information about the guest launch measurement.",
      "properties": {
        "apiMajor": {
          "description": "API major version of the SEV host.",
          "format": "int32",
          "type": "integer"
        },
        "apiMinor": {
          "description": "API minor version of the SEV host.",
          "format": "int32",
          "type": "integer"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "buildID": {
          "description": "Build ID of the SEV host.",
          "format": "int32",
          "type": "integer"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "loaderSHA": {
          "description": "SHA256 of the loader binary",
          "type": "string"
        },
        "measurement": {
          "description": "Base64 encoded launch measurement of the SEV guest.",
          "type": "string"
        },
        "policy": {
          "description": "Policy of the SEV guest.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1.SEVPlatformInfo": {
      "description": "SEVPlatformInfo contains information about the AMD SEV features for the node.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "certChain": {
          "description": "Base64 encoded SEV certificate chain.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "pdh": {
          "description": "Base64 encoded platform Diffie-Hellman key.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.SEVSecretOptions": {
      "description": "SEVSecretOptions is used to provide a secret for a running guest.",
      "properties": {
        "header": {
          "description": "Base64 encoded header needed to decrypt the secret.",
          "type": "string"
        },
        "secret": {
          "description": "Base64 encoded encrypted launch secret.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.SEVSessionOptions": {
      "description": "SEVSessionOptions is used to provide SEV session parameters.",
      "properties": {
        "dhCert": {
          "description": "Base64 encoded guest owner's Diffie-Hellman key.",
          "type": "string"
        },
        "session": {
          "description": "Base64 encoded session blob.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.ServerAddressByClientCIDR": {
      "description": "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
      "properties": {
        "clientCIDR": {
          "default": "",
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use.",
          "type": "string"
        },
        "serverAddress": {
          "default": "",
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
          "type": "string"
        }
      },
      "required": [
        "clientCIDR",
        "serverAddress"
      ],
      "type": "object"
    },
    "v1.StartOptions": {
      "description": "StartOptions may be provided on start request.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "paused": {
          "description": "Indicates that VM will be started in paused state.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1.StopOptions": {
      "description": "StopOptions may be provided when deleting an API object.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "gracePeriod": {
          "description": "this updates the VMIs terminationGracePeriodSeconds during shutdown",
          "format": "int64",
          "type": "integer"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.UnpauseOptions": {
      "description": "UnpauseOptions may be provided on unpause request.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.VirtualMachineInstanceFileSystem": {
      "description": "VirtualMachineInstanceFileSystem represents guest os disk",
      "properties": {
        "disk": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.VirtualMachineInstanceFileSystemDisk"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "diskName": {
          "default": "",
          "type": "string"
        },
        "fileSystemType": {
          "default": "",
          "type": "string"
        },
        "mountPoint": {
          "default": "",
          "type": "string"
        },
        "totalBytes": {
          "default": 0,
          "format": "int32",
          "type": "integer"
        },
        "usedBytes": {
          "default": 0,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "diskName",
        "mountPoint",
        "fileSystemType",
        "usedBytes",
        "totalBytes"
      ],
      "type": "object"
    },
    "v1.VirtualMachineInstanceFileSystemDisk": {
      "description": "VirtualMachineInstanceFileSystemDisk represents the guest os FS disks",
      "properties": {
        "busType": {
          "default": "",
          "type": "string"
        },
        "serial": {
          "type": "string"
        }
      },
      "required": [
        "busType"
      ],
      "type": "object"
    },
    "v1.VirtualMachineInstanceFileSystemInfo": {
      "description": "VirtualMachineInstanceFileSystemInfo represents information regarding single guest os filesystem",
      "properties": {
        "disks": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.VirtualMachineInstanceFileSystem"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "disks"
      ],
      "type": "object"
    },
    "v1.VirtualMachineInstanceFileSystemList": {
      "description": "VirtualMachineInstanceFileSystemList comprises the list of all filesystems on guest machine",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.VirtualMachineInstanceFileSystem"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "allOf": [
            {
              "$ref": "#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta"
            }
          ],
          "default": {}
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1.VirtualMachineInstanceGuestAgentInfo": {
      "description": "VirtualMachineInstanceGuestAgentInfo represents information from the installed guest agent",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "fsFreezeStatus": {
          "description": "FSFreezeStatus is the state of the fs of the guest it can be either frozen or thawed",
          "type": "string"
        },
        "fsInfo": {
          "allOf": [
            {
              "$ref": "#/components/schemas/v1.VirtualMachineInstanceFileSystemInfo"
            }
          ],
          "default": {},
          "description": "FSInfo is a guest os filesystem information containing the disk mapping and disk mounts with usage"
        },
        "guestAgentVersion": {
          "description": "GAVersion is a version of currently installed guest agent",
          "type": "string"
        },
        "hostname": {
          "description": "Hostname represents FQDN of a guest",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "os": {
          "allOf": [
            {
              "$ref": "#/components/schemas/v1.VirtualMachineInstanceGuestOSInfo"
            }
          ],
          "default": {},
          "description": "OS contains the guest operating system information"
        },
        "supportedCommands": {
          "description": "Return command list the guest agent supports",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.GuestAgentCommandInfo"
              }
            ],
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "timezone": {
          "description": "Timezone is guest os current timezone",
          "type": "string"
        },
        "userList": {
          "description": "UserList is a list of active guest OS users",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.VirtualMachineInstanceGuestOSUser"
              }
            ],
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1.VirtualMachineInstanceGuestOSInfo": {
      "properties": {
        "id": {
          "description": "Guest OS Id",
          "type": "string"
        },
        "kernelRelease": {
          "description": "Guest OS Kernel Release",
          "type": "string"
        },
        "kernelVersion": {
          "description": "Kernel version of the Guest OS",
          "type": "string"
        },
        "machine": {
          "description": "Machine type of the Guest OS",
          "type": "string"
        },
        "name": {
          "description": "Name of the Guest OS",
          "type": "string"
        },
        "prettyName": {
          "description": "Guest OS Pretty Name",
          "type": "string"
        },
        "version": {
          "description": "Guest OS Version",
          "type": "string"
        },
        "versionId": {
          "description": "Version ID of the Guest OS",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.VirtualMachineInstanceGuestOSUser": {
      "description": "VirtualMachineGuestOSUser is the single user of the guest os",
      "properties": {
        "domain": {
          "type": "string"
        },
        "loginTime": {
          "format": "double",
          "type": "number"
        },
        "userName": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "userName"
      ],
      "type": "object"
    },
    "v1.VirtualMachineInstanceGuestOSUserList": {
      "description": "VirtualMachineInstanceGuestOSUserList comprises the list of all active users on guest machine",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/v1.VirtualMachineInstanceGuestOSUser"
              }
            ],
            "default": {}
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "allOf": [
            {
              "$ref": "#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta"
            }
          ],
          "default": {}
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1.VirtualMachineMemoryDumpRequest": {
      "description": "VirtualMachineMemoryDumpRequest represent the memory dump request phase and info",
      "properties": {
        "claimName": {
          "default": "",
          "description": "ClaimName is the name of the pvc that will contain the memory dump",
          "type": "string"
        },
        "endTimestamp": {
          "allOf": [
            {
              "$ref": "#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "EndTimestamp represents the time the memory dump was completed"
        },
        "fileName": {
          "description": "FileName represents the name of the output file",
          "type": "string"
        },
        "message": {
          "description": "Message is a detailed message about failure of the memory dump",
          "type": "string"
        },
        "phase": {
          "default": "",
          "description": "Phase represents the memory dump phase",
          "type": "string"
        },
        "remove": {
          "description": "Remove represents request of dissociating the memory dump pvc",
          "type": "boolean"
        },
        "startTimestamp": {
          "allOf": [
            {
              "$ref": "#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time"
            }
          ],
          "description": "StartTimestamp represents the time the memory dump started"
        }
      },
      "required": [
        "claimName",
        "phase"
      ],
      "type": "object"
    }
  }
}
