{
  "description": "BucketClass is the Schema for the bucketclasses API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "Specification of the desired behavior of the noobaa BucketClass.",
      "type": "object",
      "properties": {
        "namespacePolicy": {
          "description": "NamespacePolicy specifies the namespace policy for the bucket class",
          "type": "object",
          "properties": {
            "cache": {
              "description": "Cache is a namespace policy configuration of type Cache",
              "type": "object",
              "properties": {
                "caching": {
                  "description": "Caching is the cache specification for the ns policy",
                  "type": "object",
                  "properties": {
                    "prefix": {
                      "description": "Prefix is prefix of the future cached data",
                      "type": "string"
                    },
                    "ttl": {
                      "description": "TTL specifies the cache ttl",
                      "type": "integer"
                    }
                  }
                },
                "hubResource": {
                  "description": "HubResource is the read and write resource name to use",
                  "type": "string"
                }
              }
            },
            "multi": {
              "description": "Multi is a namespace policy configuration of type Multi",
              "type": "object",
              "properties": {
                "readResources": {
                  "description": "ReadResources is an ordered list of read resources names to use",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "writeResource": {
                  "description": "WriteResource is the write resource name to use",
                  "type": "string"
                }
              }
            },
            "single": {
              "description": "Single is a namespace policy configuration of type Single",
              "type": "object",
              "properties": {
                "resource": {
                  "description": "Resource is the read and write resource name to use",
                  "type": "string"
                }
              }
            },
            "type": {
              "description": "Type is the namespace policy type",
              "type": "string"
            }
          }
        },
        "placementPolicy": {
          "description": "PlacementPolicy specifies the placement policy for the bucket class",
          "type": "object",
          "properties": {
            "tiers": {
              "description": "Tiers is an ordered list of tiers to use.\nThe model is a waterfall - push to first tier by default,\nand when no more space spill \"cold\" storage to next tier.",
              "type": "array",
              "items": {
                "description": "Tier specifies a storage tier",
                "type": "object",
                "properties": {
                  "backingStores": {
                    "description": "BackingStores is an unordered list of backing store names.\nThe meaning of the list depends on the placement.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "placement": {
                    "description": "Placement specifies the type of placement for the tier\nIf empty it should have a single backing store.",
                    "type": "string",
                    "enum": [
                      "Spread",
                      "Mirror"
                    ]
                  }
                }
              }
            }
          }
        },
        "quota": {
          "description": "Quota specifies the quota configuration for the bucket class",
          "type": "object",
          "properties": {
            "maxObjects": {
              "description": "limits the max total quantity of objects per bucket",
              "type": "string"
            },
            "maxSize": {
              "description": "limits the max total size of objects per bucket",
              "type": "string"
            }
          }
        },
        "replicationPolicy": {
          "description": "ReplicationPolicy specifies a json of replication rules for the bucketclass",
          "type": "string"
        }
      }
    },
    "status": {
      "description": "Most recently observed status of the noobaa BackingStore.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions is a list of conditions related to operator reconciliation",
          "type": "array",
          "items": {
            "description": "Condition represents the state of the operator's\nreconciliation functionality.",
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastHeartbeatTime": {
                "type": "string",
                "format": "date-time"
              },
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "description": "ConditionType is the state of the operator's reconciliation functionality.",
                "type": "string"
              }
            }
          }
        },
        "mode": {
          "description": "Mode is a simple, high-level summary of where the System is in its lifecycle",
          "type": "string"
        },
        "phase": {
          "description": "Phase is a simple, high-level summary of where the System is in its lifecycle",
          "type": "string"
        },
        "relatedObjects": {
          "description": "RelatedObjects is a list of objects related to this operator.",
          "type": "array",
          "items": {
            "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n---\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.\n 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular\n    restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".\n    Those cannot be well described when embedded.\n 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity\n    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple\n    and the version of the actual struct is irrelevant.\n 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type\n    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.\n\n\nInstead of using this type, create a locally provided and used type that is well-focused on your reference.\nFor example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string"
              },
              "fieldPath": {
                "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                "type": "string"
              },
              "kind": {
                "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "name": {
                "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                "type": "string"
              },
              "resourceVersion": {
                "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": "string"
              },
              "uid": {
                "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                "type": "string"
              }
            },
            "x-kubernetes-map-type": "atomic"
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "noobaa.io",
      "kind": "BucketClass",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}