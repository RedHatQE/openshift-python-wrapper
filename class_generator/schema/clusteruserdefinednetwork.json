{
  "description": "ClusterUserDefinedNetwork describe network request for a shared network across namespaces.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ClusterUserDefinedNetworkSpec defines the desired state of ClusterUserDefinedNetwork.",
      "type": "object",
      "required": [
        "namespaceSelector",
        "network"
      ],
      "properties": {
        "namespaceSelector": {
          "description": "NamespaceSelector Label selector for which namespace network should be available for.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                }
              },
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "network": {
          "description": "Network is the user-defined-network spec",
          "type": "object",
          "required": [
            "topology"
          ],
          "properties": {
            "layer2": {
              "description": "Layer2 is the Layer2 topology configuration.",
              "type": "object",
              "required": [
                "role"
              ],
              "properties": {
                "ipam": {
                  "description": "IPAM section contains IPAM-related configuration for the network.",
                  "type": "object",
                  "minProperties": 1,
                  "properties": {
                    "lifecycle": {
                      "description": "Lifecycle controls IP addresses management lifecycle.\n\nThe only allowed value is Persistent. When set, the IP addresses assigned by OVN Kubernetes will be persisted in an\n`ipamclaims.k8s.cni.cncf.io` object. These IP addresses will be reused by other pods if requested.\nOnly supported when mode is `Enabled`.",
                      "type": "string",
                      "enum": [
                        "Persistent"
                      ]
                    },
                    "mode": {
                      "description": "Mode controls how much of the IP configuration will be managed by OVN.\n`Enabled` means OVN-Kubernetes will apply IP configuration to the SDN infrastructure and it will also assign IPs\nfrom the selected subnet to the individual pods.\n`Disabled` means OVN-Kubernetes will only assign MAC addresses and provide layer 2 communication, letting users\nconfigure IP addresses for the pods.\n`Disabled` is only available for Secondary networks.\nBy disabling IPAM, any Kubernetes features that rely on selecting pods by IP will no longer function\n(such as network policy, services, etc). Additionally, IP port security will also be disabled for interfaces attached to this network.\nDefaults to `Enabled`.",
                      "type": "string",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ]
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "lifecycle Persistent is only supported when ipam.mode is Enabled",
                      "rule": "!has(self.lifecycle) || self.lifecycle != 'Persistent' || !has(self.mode) || self.mode == 'Enabled'"
                    }
                  ]
                },
                "joinSubnets": {
                  "description": "JoinSubnets are used inside the OVN network topology.\n\nDual-stack clusters may set 2 subnets (one for each IP family), otherwise only 1 subnet is allowed.\nThis field is only allowed for \"Primary\" network.\nIt is not recommended to set this field without explicit need and understanding of the OVN network topology.\nWhen omitted, the platform will choose a reasonable default which is subject to change over time.",
                  "type": "array",
                  "maxItems": 2,
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "maxLength": 43,
                    "x-kubernetes-validations": [
                      {
                        "message": "CIDR is invalid",
                        "rule": "isCIDR(self)"
                      }
                    ]
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "When 2 CIDRs are set, they must be from different IP families",
                      "rule": "size(self) != 2 || !isCIDR(self[0]) || !isCIDR(self[1]) || cidr(self[0]).ip().family() != cidr(self[1]).ip().family()"
                    }
                  ]
                },
                "mtu": {
                  "description": "MTU is the maximum transmission unit for a network.\nMTU is optional, if not provided, the globally configured value in OVN-Kubernetes (defaults to 1400) is used for the network.",
                  "type": "integer",
                  "format": "int32",
                  "maximum": 65536,
                  "minimum": 576
                },
                "role": {
                  "description": "Role describes the network role in the pod.\n\nAllowed value is \"Secondary\".\nSecondary network is only assigned to pods that use `k8s.v1.cni.cncf.io/networks` annotation to select given network.",
                  "type": "string",
                  "enum": [
                    "Primary",
                    "Secondary"
                  ]
                },
                "subnets": {
                  "description": "Subnets are used for the pod network across the cluster.\nDual-stack clusters may set 2 subnets (one for each IP family), otherwise only 1 subnet is allowed.\n\nThe format should match standard CIDR notation (for example, \"10.128.0.0/16\").\nThis field must be omitted if `ipam.mode` is `Disabled`.",
                  "type": "array",
                  "maxItems": 2,
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "maxLength": 43,
                    "x-kubernetes-validations": [
                      {
                        "message": "CIDR is invalid",
                        "rule": "isCIDR(self)"
                      }
                    ]
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "When 2 CIDRs are set, they must be from different IP families",
                      "rule": "size(self) != 2 || !isCIDR(self[0]) || !isCIDR(self[1]) || cidr(self[0]).ip().family() != cidr(self[1]).ip().family()"
                    }
                  ]
                }
              },
              "x-kubernetes-validations": [
                {
                  "message": "Subnets is required with ipam.mode is Enabled or unset",
                  "rule": "has(self.ipam) && has(self.ipam.mode) && self.ipam.mode != 'Enabled' || has(self.subnets)"
                },
                {
                  "message": "Subnets must be unset when ipam.mode is Disabled",
                  "rule": "!has(self.ipam) || !has(self.ipam.mode) || self.ipam.mode != 'Disabled' || !has(self.subnets)"
                },
                {
                  "message": "Disabled ipam.mode is only supported for Secondary network",
                  "rule": "!has(self.ipam) || !has(self.ipam.mode) || self.ipam.mode != 'Disabled' || self.role == 'Secondary'"
                },
                {
                  "message": "JoinSubnets is only supported for Primary network",
                  "rule": "!has(self.joinSubnets) || has(self.role) && self.role == 'Primary'"
                },
                {
                  "message": "MTU should be greater than or equal to 1280 when IPv6 subnet is used",
                  "rule": "!has(self.subnets) || !has(self.mtu) || !self.subnets.exists_one(i, isCIDR(i) && cidr(i).ip().family() == 6) || self.mtu >= 1280"
                }
              ]
            },
            "layer3": {
              "description": "Layer3 is the Layer3 topology configuration.",
              "type": "object",
              "required": [
                "role",
                "subnets"
              ],
              "properties": {
                "joinSubnets": {
                  "description": "JoinSubnets are used inside the OVN network topology.\n\nDual-stack clusters may set 2 subnets (one for each IP family), otherwise only 1 subnet is allowed.\nThis field is only allowed for \"Primary\" network.\nIt is not recommended to set this field without explicit need and understanding of the OVN network topology.\nWhen omitted, the platform will choose a reasonable default which is subject to change over time.",
                  "type": "array",
                  "maxItems": 2,
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "maxLength": 43,
                    "x-kubernetes-validations": [
                      {
                        "message": "CIDR is invalid",
                        "rule": "isCIDR(self)"
                      }
                    ]
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "When 2 CIDRs are set, they must be from different IP families",
                      "rule": "size(self) != 2 || !isCIDR(self[0]) || !isCIDR(self[1]) || cidr(self[0]).ip().family() != cidr(self[1]).ip().family()"
                    }
                  ]
                },
                "mtu": {
                  "description": "MTU is the maximum transmission unit for a network.\n\nMTU is optional, if not provided, the globally configured value in OVN-Kubernetes (defaults to 1400) is used for the network.",
                  "type": "integer",
                  "format": "int32",
                  "maximum": 65536,
                  "minimum": 576
                },
                "role": {
                  "description": "Role describes the network role in the pod.\n\nAllowed values are \"Primary\" and \"Secondary\".\nPrimary network is automatically assigned to every pod created in the same namespace.\nSecondary network is only assigned to pods that use `k8s.v1.cni.cncf.io/networks` annotation to select given network.",
                  "type": "string",
                  "enum": [
                    "Primary",
                    "Secondary"
                  ]
                },
                "subnets": {
                  "description": "Subnets are used for the pod network across the cluster.\n\nDual-stack clusters may set 2 subnets (one for each IP family), otherwise only 1 subnet is allowed.\nGiven subnet is split into smaller subnets for every node.",
                  "type": "array",
                  "maxItems": 2,
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "required": [
                      "cidr"
                    ],
                    "properties": {
                      "cidr": {
                        "description": "CIDR specifies L3Subnet, which is split into smaller subnets for every node.",
                        "type": "string",
                        "maxLength": 43,
                        "x-kubernetes-validations": [
                          {
                            "message": "CIDR is invalid",
                            "rule": "isCIDR(self)"
                          }
                        ]
                      },
                      "hostSubnet": {
                        "description": "HostSubnet specifies the subnet size for every node.\n\nWhen not set, it will be assigned automatically.",
                        "type": "integer",
                        "format": "int32",
                        "maximum": 127,
                        "minimum": 1
                      }
                    },
                    "x-kubernetes-validations": [
                      {
                        "message": "HostSubnet must be smaller than CIDR subnet",
                        "rule": "!has(self.hostSubnet) || !isCIDR(self.cidr) || self.hostSubnet > cidr(self.cidr).prefixLength()"
                      },
                      {
                        "message": "HostSubnet must < 32 for ipv4 CIDR",
                        "rule": "!has(self.hostSubnet) || !isCIDR(self.cidr) || (cidr(self.cidr).ip().family() != 4 || self.hostSubnet < 32)"
                      }
                    ]
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "When 2 CIDRs are set, they must be from different IP families",
                      "rule": "size(self) != 2 || !isCIDR(self[0].cidr) || !isCIDR(self[1].cidr) || cidr(self[0].cidr).ip().family() != cidr(self[1].cidr).ip().family()"
                    }
                  ]
                }
              },
              "x-kubernetes-validations": [
                {
                  "message": "JoinSubnets is only supported for Primary network",
                  "rule": "!has(self.joinSubnets) || has(self.role) && self.role == 'Primary'"
                },
                {
                  "message": "MTU should be greater than or equal to 1280 when IPv6 subnet is used",
                  "rule": "!has(self.subnets) || !has(self.mtu) || !self.subnets.exists_one(i, isCIDR(i.cidr) && cidr(i.cidr).ip().family() == 6) || self.mtu >= 1280"
                }
              ]
            },
            "localnet": {
              "description": "Localnet is the Localnet topology configuration.",
              "type": "object",
              "required": [
                "physicalNetworkName",
                "role"
              ],
              "properties": {
                "excludeSubnets": {
                  "description": "excludeSubnets is a list of CIDRs to be removed from the specified CIDRs in `subnets`.\nThe CIDRs in this list must be in range of at least one subnet specified in `subnets`.\nexcludeSubnets is optional. When omitted no IP address is excluded and all IP addresses specified in `subnets`\nare subject to assignment.\nThe format should match standard CIDR notation (for example, \"10.128.0.0/16\").\nThis field must be omitted if `subnets` is unset or `ipam.mode` is `Disabled`.\nWhen `physicalNetworkName` points to OVS bridge mapping of a network with reserved IP addresses\n(which shouldn't be assigned by OVN-Kubernetes), the specified CIDRs will not be assigned. For example:\nGiven: `subnets: \"10.0.0.0/24\"`, `excludeSubnets: \"10.0.0.200/30\", the following addresses will not be assigned\nto pods: `10.0.0.201`, `10.0.0.202`.",
                  "type": "array",
                  "maxItems": 25,
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "maxLength": 43,
                    "x-kubernetes-validations": [
                      {
                        "message": "CIDR is invalid",
                        "rule": "isCIDR(self)"
                      }
                    ]
                  }
                },
                "ipam": {
                  "description": "ipam configurations for the network.\nipam is optional. When omitted, `subnets` must be specified.\nWhen `ipam.mode` is `Disabled`, `subnets` must be omitted.\n`ipam.mode` controls how much of the IP configuration will be managed by OVN.\n   When `Enabled`, OVN-Kubernetes will apply IP configuration to the SDN infra and assign IPs from the selected\n   subnet to the pods.\n   When `Disabled`, OVN-Kubernetes only assigns MAC addresses, and provides layer2 communication, and enables users\n   to configure IP addresses on the pods.\n`ipam.lifecycle` controls IP addresses management lifecycle.\n   When set to 'Persistent', the assigned IP addresses will be persisted in `ipamclaims.k8s.cni.cncf.io` object.\n\t  Useful for VMs, IP address will be persistent after restarts and migrations. Supported when `ipam.mode` is `Enabled`.",
                  "type": "object",
                  "minProperties": 1,
                  "properties": {
                    "lifecycle": {
                      "description": "Lifecycle controls IP addresses management lifecycle.\n\nThe only allowed value is Persistent. When set, the IP addresses assigned by OVN Kubernetes will be persisted in an\n`ipamclaims.k8s.cni.cncf.io` object. These IP addresses will be reused by other pods if requested.\nOnly supported when mode is `Enabled`.",
                      "type": "string",
                      "enum": [
                        "Persistent"
                      ]
                    },
                    "mode": {
                      "description": "Mode controls how much of the IP configuration will be managed by OVN.\n`Enabled` means OVN-Kubernetes will apply IP configuration to the SDN infrastructure and it will also assign IPs\nfrom the selected subnet to the individual pods.\n`Disabled` means OVN-Kubernetes will only assign MAC addresses and provide layer 2 communication, letting users\nconfigure IP addresses for the pods.\n`Disabled` is only available for Secondary networks.\nBy disabling IPAM, any Kubernetes features that rely on selecting pods by IP will no longer function\n(such as network policy, services, etc). Additionally, IP port security will also be disabled for interfaces attached to this network.\nDefaults to `Enabled`.",
                      "type": "string",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ]
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "lifecycle Persistent is only supported when ipam.mode is Enabled",
                      "rule": "!has(self.lifecycle) || self.lifecycle != 'Persistent' || !has(self.mode) || self.mode == 'Enabled'"
                    }
                  ]
                },
                "mtu": {
                  "description": "mtu is the maximum transmission unit for a network.\nmtu is optional. When omitted, the configured value in OVN-Kubernetes (defaults to 1500 for localnet topology)\nis used for the network.\nMinimum value for IPv4 subnet is 576, and for IPv6 subnet is 1280.\nMaximum value is 65536.\nIn a scenario `physicalNetworkName` points to OVS bridge mapping of a network configured with certain MTU settings,\nthis field enables configuring the same MTU on pod interface, having the pod MTU aligned with the network MTU.\nMisaligned MTU across the stack (e.g.: pod has MTU X, node NIC has MTU Y), could result in network disruptions\nand bad performance.",
                  "type": "integer",
                  "format": "int32",
                  "maximum": 65536,
                  "minimum": 576
                },
                "physicalNetworkName": {
                  "description": "physicalNetworkName points to the OVS bridge-mapping's network-name configured in the nodes, required.\nMin length is 1, max length is 253, cannot contain `,` or `:` characters.\nIn case OVS bridge-mapping is defined by Kubernetes-nmstate with `NodeNetworkConfigurationPolicy` (NNCP),\nthis field should point to the NNCP `spec.desiredState.ovn.bridge-mappings` item's `localnet` value.",
                  "type": "string",
                  "maxLength": 253,
                  "minLength": 1,
                  "x-kubernetes-validations": [
                    {
                      "message": "physicalNetworkName cannot contain `,` or `:` characters",
                      "rule": "self.matches('^[^,:]+$')"
                    }
                  ]
                },
                "role": {
                  "description": "role describes the network role in the pod, required.\nControls whether the pod interface will act as primary or secondary.\nLocalnet topology supports `Secondary` only.\nThe network will be assigned to pods that have the `k8s.v1.cni.cncf.io/networks` annotation in place pointing\nto subject.",
                  "type": "string",
                  "enum": [
                    "Secondary"
                  ]
                },
                "subnets": {
                  "description": "subnets is a list of subnets used for pods in this localnet network across the cluster.\nThe list may be either 1 IPv4 subnet, 1 IPv6 subnet, or 1 of each IP family.\nWhen set, OVN-Kubernetes assigns an IP address from the specified CIDRs to the connected pod,\neliminating the need for manual IP assignment or reliance on an external IPAM service (e.g., a DHCP server).\nsubnets is optional. When omitted OVN-Kubernetes won't assign IP address automatically.\nDual-stack clusters may set 2 subnets (one for each IP family), otherwise only 1 subnet is allowed.\nThe format should match standard CIDR notation (for example, \"10.128.0.0/16\").\nThis field must be omitted if `ipam.mode` is `Disabled`.\nWhen physicalNetworkName points to the OVS bridge mapping of a network that provides IPAM services\n(e.g., a DHCP server), ipam.mode should be set to Disabled. This turns off OVN-Kubernetes IPAM and avoids\nconflicts with the existing IPAM services on this localnet network.",
                  "type": "array",
                  "maxItems": 2,
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "maxLength": 43,
                    "x-kubernetes-validations": [
                      {
                        "message": "CIDR is invalid",
                        "rule": "isCIDR(self)"
                      }
                    ]
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "When 2 CIDRs are set, they must be from different IP families",
                      "rule": "size(self) != 2 || !isCIDR(self[0]) || !isCIDR(self[1]) || cidr(self[0]).ip().family() != cidr(self[1]).ip().family()"
                    }
                  ]
                },
                "vlan": {
                  "description": "vlan configuration for the network.\nvlan.mode is the VLAN mode.\n  When \"Access\" is set, OVN-Kubernetes configures the network logical switch port in access mode.\nvlan.access is the access VLAN configuration.\nvlan.access.id is the VLAN ID (VID) to be set on the network logical switch port.\nvlan is optional, when omitted the underlying network default VLAN will be used (usually `1`).\nWhen set, OVN-Kubernetes will apply VLAN configuration to the SDN infra and to the connected pods.",
                  "type": "object",
                  "required": [
                    "mode"
                  ],
                  "properties": {
                    "access": {
                      "description": "Access is the access VLAN configuration",
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "id is the VLAN ID (VID) to be set for the network.\nid should be higher than 0 and lower than 4095.",
                          "type": "integer",
                          "format": "int32",
                          "maximum": 4094,
                          "minimum": 1
                        }
                      }
                    },
                    "mode": {
                      "description": "mode describe the network VLAN mode.\nAllowed value is \"Access\".\nAccess sets the network logical switch port in access mode, according to the config.",
                      "type": "string",
                      "enum": [
                        "Access"
                      ]
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "vlan access config is required when vlan mode is 'Access', and forbidden otherwise",
                      "rule": "has(self.mode) && self.mode == 'Access' ? has(self.access): !has(self.access)"
                    }
                  ]
                }
              },
              "x-kubernetes-validations": [
                {
                  "message": "Subnets is required with ipam.mode is Enabled or unset, and forbidden otherwise",
                  "rule": "!has(self.ipam) || !has(self.ipam.mode) || self.ipam.mode == 'Enabled' ? has(self.subnets) : !has(self.subnets)"
                },
                {
                  "message": "excludeSubnets must be unset when subnets is unset",
                  "rule": "!has(self.excludeSubnets) || has(self.subnets)"
                },
                {
                  "message": "MTU should be greater than or equal to 1280 when an IPv6 subnet is used",
                  "rule": "!has(self.subnets) || !has(self.mtu) || !self.subnets.exists_one(i, isCIDR(i) && cidr(i).ip().family() == 6) || self.mtu >= 1280"
                },
                {
                  "fieldPath": ".excludeSubnets",
                  "message": "excludeSubnets must be subnetworks of the networks specified in the subnets field",
                  "rule": "!has(self.excludeSubnets) || self.excludeSubnets.all(e, self.subnets.exists(s, cidr(s).containsCIDR(cidr(e))))"
                }
              ]
            },
            "topology": {
              "description": "Topology describes network configuration.\n\nAllowed values are \"Layer3\", \"Layer2\" and \"Localnet\".\nLayer3 topology creates a layer 2 segment per node, each with a different subnet. Layer 3 routing is used to interconnect node subnets.\nLayer2 topology creates one logical switch shared by all nodes.\nLocalnet topology is based on layer 2 topology, but also allows connecting to an existent (configured) physical network to provide north-south traffic to the workloads.",
              "type": "string",
              "enum": [
                "Layer2",
                "Layer3",
                "Localnet"
              ]
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "spec.layer3 is required when topology is Layer3 and forbidden otherwise",
              "rule": "has(self.topology) && self.topology == 'Layer3' ? has(self.layer3): !has(self.layer3)"
            },
            {
              "message": "spec.layer2 is required when topology is Layer2 and forbidden otherwise",
              "rule": "has(self.topology) && self.topology == 'Layer2' ? has(self.layer2): !has(self.layer2)"
            },
            {
              "message": "spec.localnet is required when topology is Localnet and forbidden otherwise",
              "rule": "has(self.topology) && self.topology == 'Localnet' ? has(self.localnet): !has(self.localnet)"
            },
            {
              "message": "Network spec is immutable",
              "rule": "self == oldSelf"
            }
          ]
        }
      }
    },
    "status": {
      "description": "ClusterUserDefinedNetworkStatus contains the observed status of the ClusterUserDefinedNetwork.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions slice of condition objects indicating details about ClusterUserDefineNetwork status.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "k8s.ovn.org",
      "kind": "ClusterUserDefinedNetwork",
      "version": "v1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}