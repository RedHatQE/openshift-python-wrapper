{
  "description": "ObjectTemplate contain a go template of a Kubernetes manifest. This manifest is then templated with the\nsources provided in the .Spec.Sources. The sources can only come from objects within the same nampespace\nas the ObjectTemplate.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ObjectTemplateSpec specification.",
      "type": "object",
      "required": [
        "sources",
        "template"
      ],
      "properties": {
        "sources": {
          "description": "Objects in which configuration parameters are fetched",
          "type": "array",
          "items": {
            "description": "ObjectTemplateSource defines a source for a template.",
            "type": "object",
            "required": [
              "apiVersion",
              "items",
              "kind",
              "name"
            ],
            "properties": {
              "apiVersion": {
                "type": "string"
              },
              "items": {
                "type": "array",
                "items": {
                  "description": "ObjectTemplateSourceItem defines a source item for an object template.",
                  "type": "object",
                  "required": [
                    "destination",
                    "key"
                  ],
                  "properties": {
                    "destination": {
                      "description": "JSONPath to destination in which to store copy of the source value.",
                      "type": "string"
                    },
                    "key": {
                      "description": "JSONPath to value in source object.",
                      "type": "string"
                    }
                  }
                }
              },
              "kind": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              },
              "optional": {
                "description": "Marks this source as optional.\nThe templated object will still be applied if optional sources are not found.\nIf the source object is created later on, it will be eventually picked up.",
                "type": "boolean"
              }
            }
          }
        },
        "template": {
          "description": "Go template of a Kubernetes manifest",
          "type": "string"
        }
      }
    },
    "status": {
      "description": "ObjectTemplateStatus defines the observed state of a ObjectTemplate ie the status of the templated object.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions is a list of status conditions the templated object is in.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          }
        },
        "controllerOf": {
          "description": "ControllerOf references the templated object.",
          "type": "object",
          "required": [
            "group",
            "kind",
            "name"
          ],
          "properties": {
            "group": {
              "description": "Object Group.",
              "type": "string"
            },
            "kind": {
              "description": "Object Kind.",
              "type": "string"
            },
            "name": {
              "description": "Object Name.",
              "type": "string"
            },
            "namespace": {
              "description": "Object Namespace.",
              "type": "string"
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "package-operator.run",
      "kind": "ObjectTemplate",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}