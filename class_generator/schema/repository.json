{
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "pipelinesascode.tekton.dev",
      "kind": "Repository",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#",
  "description": "Repository is the representation of a Git repository from a Git provider platform.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "pipelinerun_status": {
      "items": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations is additional Status fields for the Resource to save some\nadditional State as well as convey more information to the user. This is\nroughly akin to Annotations on any k8s resource, just the reconciler conveying\nricher information outwards.",
            "type": "object"
          },
          "completionTime": {
            "description": "CompletionTime is the time the PipelineRun completed.",
            "format": "date-time",
            "type": "string"
          },
          "conditions": {
            "description": "Conditions the latest available observations of a resource's current state.",
            "items": {
              "description": "Condition defines a readiness condition for a Knative resource.\nSee: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties",
              "properties": {
                "lastTransitionTime": {
                  "description": "LastTransitionTime is the last time the condition transitioned from one status to another.\nWe use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic\ndifferences (all other things held constant).",
                  "type": "string"
                },
                "message": {
                  "description": "A human readable message indicating details about the transition.",
                  "type": "string"
                },
                "reason": {
                  "description": "The reason for the condition's last transition.",
                  "type": "string"
                },
                "severity": {
                  "description": "Severity with which to treat failures of this type of condition.\nWhen this is not specified, it defaults to Error.",
                  "type": "string"
                },
                "status": {
                  "description": "Status of the condition, one of True, False, Unknown.",
                  "type": "string"
                },
                "type": {
                  "description": "Type of condition.",
                  "type": "string"
                }
              },
              "required": [
                "status",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "event_type": {
            "description": "EventType is the event type of that run",
            "type": "string"
          },
          "failure_reason": {
            "additionalProperties": {
              "description": "TaskInfos contains information about a task.",
              "properties": {
                "completion_time": {
                  "format": "date-time",
                  "type": "string"
                },
                "display_name": {
                  "type": "string"
                },
                "log_snippet": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "reason": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "description": "CollectedTaskInfos is the information about tasks",
            "type": "object"
          },
          "logurl": {
            "description": "LogURL is the full URL to the log for this run.",
            "type": "string"
          },
          "observedGeneration": {
            "description": "ObservedGeneration is the 'Generation' of the Service that\nwas last processed by the controller.",
            "format": "int64",
            "type": "integer"
          },
          "pipelineRunName": {
            "description": "PipelineRunName is the name of the PipelineRun",
            "type": "string"
          },
          "sha": {
            "description": "SHA is the name of the SHA that has been tested",
            "type": "string"
          },
          "sha_url": {
            "description": "SHA the URL of the SHA to view it",
            "type": "string"
          },
          "startTime": {
            "description": "StartTime is the time the PipelineRun is actually started.",
            "format": "date-time",
            "type": "string"
          },
          "target_branch": {
            "description": "TargetBranch is the target branch of that run",
            "type": "string"
          },
          "title": {
            "description": "Title is the title of the commit SHA that has been tested",
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "spec": {
      "description": "RepositorySpec defines the desired state of a Repository, including its URL,\nGit provider configuration, and operational settings.",
      "properties": {
        "concurrency_limit": {
          "description": "ConcurrencyLimit defines the maximum number of concurrent pipelineruns that can\nrun for this repository. This helps prevent resource exhaustion when many events trigger\npipelines simultaneously.",
          "minimum": 1,
          "type": "integer"
        },
        "git_provider": {
          "description": "GitProvider details specific to a git provider configuration. Contains authentication,\nAPI endpoints, and provider type information needed to interact with the Git service.",
          "properties": {
            "secret": {
              "description": "Secret reference for authentication with the Git provider. Contains the token,\npassword, or private key used to authenticate requests to the Git provider API.",
              "properties": {
                "key": {
                  "description": "Key in the secret",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": {
              "description": "Type of git provider. Determines which Git provider API and authentication flow to use.\nSupported values:\n- 'github': GitHub.com or GitHub Enterprise\n- 'gitlab': GitLab.com or self-hosted GitLab\n- 'bitbucket-datacenter': Bitbucket Data Center (self-hosted)\n- 'bitbucket-cloud': Bitbucket Cloud (bitbucket.org)\n- 'gitea': Gitea instances",
              "enum": [
                "github",
                "gitlab",
                "bitbucket-datacenter",
                "bitbucket-cloud",
                "gitea"
              ],
              "type": "string"
            },
            "url": {
              "description": "URL of the git provider API endpoint. This is the base URL for API requests to the\nGit provider (e.g., 'https://api.github.com' for GitHub or a custom GitLab instance URL).",
              "type": "string"
            },
            "user": {
              "description": "User of the git provider. Username to use for authentication when using basic auth\nor token-based authentication methods. Not used for GitHub Apps authentication.",
              "type": "string"
            },
            "webhook_secret": {
              "description": "WebhookSecret reference for webhook validation. Contains the shared secret used to\nvalidate that incoming webhooks are legitimate and coming from the Git provider.",
              "properties": {
                "key": {
                  "description": "Key in the secret",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "incoming": {
          "description": "Incomings defines incoming webhook configurations. Each configuration specifies how to\nhandle external webhook requests that don't come directly from the primary Git provider.",
          "items": {
            "properties": {
              "params": {
                "description": "Params defines parameter names to extract from the webhook payload. These parameters\nwill be made available to the PipelineRuns triggered by this webhook.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "secret": {
                "description": "Secret for the incoming webhook authentication. This secret is used to validate\nthat webhook requests are coming from authorized sources.",
                "properties": {
                  "key": {
                    "description": "Key in the secret",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the secret",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "targets": {
                "description": "Targets defines target branches for this webhook. When specified, only webhook\nevents targeting these branches will trigger PipelineRuns.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": {
                "description": "Type of the incoming webhook. Currently only 'webhook-url' is supported, which allows\nexternal systems to trigger PipelineRuns via generic webhook requests.",
                "enum": [
                  "webhook-url"
                ],
                "type": "string"
              }
            },
            "required": [
              "secret",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "params": {
          "description": "Params defines repository level parameters that can be referenced in PipelineRuns.\nThese parameters can be used as default values or configured for specific events.",
          "items": {
            "properties": {
              "filter": {
                "description": "Filter defines when this parameter applies. It can be used to conditionally\napply parameters based on the event type, branch name, or other attributes.",
                "type": "string"
              },
              "name": {
                "description": "Name of the parameter. This is the key that will be used to reference this parameter\nin PipelineRun definitions through via the {{ name }} syntax.",
                "type": "string"
              },
              "secret_ref": {
                "description": "SecretRef references a secret for the parameter value. Use this when the parameter\ncontains sensitive information that should not be stored directly in the Repository CR.\nThis field is mutually exclusive with Value.",
                "properties": {
                  "key": {
                    "description": "Key in the secret",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the secret",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "value": {
                "description": "Value of the parameter. The literal value to be provided to the PipelineRun.\nThis field is mutually exclusive with SecretRef.",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "settings": {
          "description": "Settings contains the configuration settings for the repository, including\nauthorization policies, provider-specific configuration, and provenance settings.",
          "properties": {
            "github_app_token_scope_repos": {
              "description": "GithubAppTokenScopeRepos lists repositories that can access the GitHub App token when using the\nGitHub App authentication method. This allows specific repositories to use tokens generated for\nthe GitHub App installation, useful for cross-repository access.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "gitlab": {
              "description": "Gitlab contains GitLab-specific settings for repositories hosted on GitLab.",
              "properties": {
                "comment_strategy": {
                  "description": "CommentStrategy defines how GitLab comments are handled for pipeline results.\nOptions:\n- 'status-comment': Posts a single comment and updates it with pipeline results\n- 'pipeline-runs-comment': Creates a new comment for each PipelineRun\n- 'disable_all': Disables all comments on merge requests",
                  "enum": [
                    "status-comment",
                    "pipeline-runs-comment",
                    "disable_all"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "pipelinerun_provenance": {
              "description": "PipelineRunProvenance configures how PipelineRun definitions are fetched.\nOptions:\n- 'source': Fetch definitions from the event source branch/SHA (default)\n- 'default_branch': Fetch definitions from the repository default branch",
              "enum": [
                "source",
                "default_branch"
              ],
              "type": "string"
            },
            "policy": {
              "description": "Policy defines authorization policies for the repository, controlling who can\ntrigger PipelineRuns under different conditions.",
              "properties": {
                "ok_to_test": {
                  "description": "OkToTest defines a list of usernames that are allowed to trigger pipeline runs on pull requests\nfrom external contributors by commenting \"/ok-to-test\" on the PR. These users are typically\nrepository maintainers or trusted contributors who can vouch for external contributions.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "pull_request": {
                  "description": "PullRequest defines a list of usernames that are explicitly allowed to execute\npipelines on their pull requests, even if they wouldn't normally have permission.\nThis is useful for allowing specific external contributors to trigger pipeline runs.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "url": {
          "description": "URL of the repository we are building. Must be a valid HTTP/HTTPS Git repository URL\nthat PAC will use to clone and fetch pipeline definitions from.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "spec"
  ]
}