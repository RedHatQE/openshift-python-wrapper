{
  "description": "Snapshot is the Schema for the snapshots API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "SnapshotSpec defines the desired state of Snapshot",
      "type": "object",
      "required": [
        "application"
      ],
      "properties": {
        "application": {
          "description": "Application is a reference to the name of an Application resource within the same namespace, which defines the target application for the Snapshot (when used with a Binding).",
          "type": "string"
        },
        "artifacts": {
          "description": "Artifacts is a placeholder section for 'artifact links' we want to maintain to other AppStudio resources. See Environment API doc for details.",
          "type": "object",
          "properties": {
            "unstableFields": {
              "description": "NOTE: This field (and struct) are placeholders. - Until this API is stabilized, consumers of the API may store any unstructured JSON/YAML data here, but no backwards compatibility will be preserved.",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "components": {
          "description": "Components field contains the sets of components to deploy as part of this snapshot.",
          "type": "array",
          "items": {
            "description": "SnapshotComponent",
            "type": "object",
            "required": [
              "containerImage",
              "name"
            ],
            "properties": {
              "containerImage": {
                "description": "ContainerImage is the container image to use when deploying the component, as part of a Snapshot",
                "type": "string"
              },
              "name": {
                "description": "Name is the name of the component",
                "type": "string"
              },
              "source": {
                "description": "Source describes the Component source. Optional.",
                "type": "object",
                "properties": {
                  "git": {
                    "description": "Git Source for a Component. Optional.",
                    "type": "object",
                    "required": [
                      "url"
                    ],
                    "properties": {
                      "context": {
                        "description": "A relative path inside the git repo containing the component Example: folderA/folderB/gitops. Optional.",
                        "type": "string"
                      },
                      "devfileUrl": {
                        "description": "If specified, the devfile at the URI will be used for the component. Can be a local path inside the repository, or an external URL. Example: https://raw.githubusercontent.com/devfile-samples/devfile-sample-java-springboot-basic/main/devfile.yaml. Optional.",
                        "type": "string"
                      },
                      "dockerfileUrl": {
                        "description": "If specified, the dockerfile at the URI will be used for the component. Can be a local path inside the repository, or an external URL. Optional.",
                        "type": "string"
                      },
                      "revision": {
                        "description": "Specify a branch/tag/commit id. If not specified, default is `main`/`master`. Example: devel. Optional.",
                        "type": "string"
                      },
                      "url": {
                        "description": "An HTTPS URL representing the git repository to create the component from.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "displayDescription": {
          "description": "DisplayDescription is a user-visible, user definable description for the resource (and is not used for any functional behaviour)",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is a user-visible, user-definable name for the resource (and is not used for any functional behaviour)",
          "type": "string"
        }
      }
    },
    "status": {
      "description": "SnapshotStatus defines the observed state of Snapshot",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observations for the Snapshot",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "appstudio.redhat.com",
      "kind": "Snapshot",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}