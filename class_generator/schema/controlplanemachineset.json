{
  "description": "ControlPlaneMachineSet ensures that a specified number of control plane machine replicas are running at any given time.\nCompatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ControlPlaneMachineSet represents the configuration of the ControlPlaneMachineSet.",
      "type": "object",
      "required": [
        "replicas",
        "selector",
        "template"
      ],
      "properties": {
        "replicas": {
          "description": "Replicas defines how many Control Plane Machines should be\ncreated by this ControlPlaneMachineSet.\nThis field is immutable and cannot be changed after cluster\ninstallation.\nThe ControlPlaneMachineSet only operates with 3 or 5 node control planes,\n3 and 5 are the only valid values for this field.",
          "type": "integer",
          "format": "int32",
          "enum": [
            3,
            5
          ],
          "x-kubernetes-validations": [
            {
              "message": "replicas is immutable",
              "rule": "self == oldSelf"
            }
          ]
        },
        "selector": {
          "description": "Label selector for Machines. Existing Machines selected by this\nselector will be the ones affected by this ControlPlaneMachineSet.\nIt must match the template's labels.\nThis field is considered immutable after creation of the resource.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                }
              },
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "x-kubernetes-map-type": "atomic",
          "x-kubernetes-validations": [
            {
              "message": "selector is immutable",
              "rule": "self == oldSelf"
            }
          ]
        },
        "state": {
          "description": "State defines whether the ControlPlaneMachineSet is Active or Inactive.\nWhen Inactive, the ControlPlaneMachineSet will not take any action on the\nstate of the Machines within the cluster.\nWhen Active, the ControlPlaneMachineSet will reconcile the Machines and\nwill update the Machines as necessary.\nOnce Active, a ControlPlaneMachineSet cannot be made Inactive. To prevent\nfurther action please remove the ControlPlaneMachineSet.",
          "type": "string",
          "enum": [
            "Active",
            "Inactive"
          ],
          "x-kubernetes-validations": [
            {
              "message": "state cannot be changed once Active",
              "rule": "oldSelf != 'Active' || self == oldSelf"
            }
          ]
        },
        "strategy": {
          "description": "Strategy defines how the ControlPlaneMachineSet will update\nMachines when it detects a change to the ProviderSpec.",
          "type": "object",
          "properties": {
            "type": {
              "description": "Type defines the type of update strategy that should be\nused when updating Machines owned by the ControlPlaneMachineSet.\nValid values are \"RollingUpdate\" and \"OnDelete\".\nThe current default value is \"RollingUpdate\".",
              "type": "string",
              "enum": [
                "RollingUpdate",
                "OnDelete"
              ]
            }
          }
        },
        "template": {
          "description": "Template describes the Control Plane Machines that will be created\nby this ControlPlaneMachineSet.",
          "type": "object",
          "required": [
            "machineType"
          ],
          "properties": {
            "machineType": {
              "description": "MachineType determines the type of Machines that should be managed by the ControlPlaneMachineSet.\nCurrently, the only valid value is machines_v1beta1_machine_openshift_io.",
              "type": "string",
              "enum": [
                "machines_v1beta1_machine_openshift_io"
              ]
            },
            "machines_v1beta1_machine_openshift_io": {
              "description": "OpenShiftMachineV1Beta1Machine defines the template for creating Machines\nfrom the v1beta1.machine.openshift.io API group.",
              "type": "object",
              "required": [
                "metadata",
                "spec"
              ],
              "properties": {
                "failureDomains": {
                  "description": "FailureDomains is the list of failure domains (sometimes called\navailability zones) in which the ControlPlaneMachineSet should balance\nthe Control Plane Machines.\nThis will be merged into the ProviderSpec given in the template.\nThis field is optional on platforms that do not require placement information.",
                  "type": "object",
                  "required": [
                    "platform"
                  ],
                  "properties": {
                    "aws": {
                      "description": "AWS configures failure domain information for the AWS platform.",
                      "type": "array",
                      "items": {
                        "description": "AWSFailureDomain configures failure domain information for the AWS platform.",
                        "type": "object",
                        "minProperties": 1,
                        "properties": {
                          "placement": {
                            "description": "Placement configures the placement information for this instance.",
                            "type": "object",
                            "required": [
                              "availabilityZone"
                            ],
                            "properties": {
                              "availabilityZone": {
                                "description": "AvailabilityZone is the availability zone of the instance.",
                                "type": "string"
                              }
                            }
                          },
                          "subnet": {
                            "description": "Subnet is a reference to the subnet to use for this instance.",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "arn": {
                                "description": "ARN of resource.",
                                "type": "string"
                              },
                              "filters": {
                                "description": "Filters is a set of filters used to identify a resource.",
                                "type": "array",
                                "items": {
                                  "description": "AWSResourceFilter is a filter used to identify an AWS resource",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name of the filter. Filter names are case-sensitive.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "Values includes one or more filter values. Filter values are case-sensitive.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "id": {
                                "description": "ID of resource.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type determines how the reference will fetch the AWS resource.",
                                "type": "string",
                                "enum": [
                                  "ID",
                                  "ARN",
                                  "Filters"
                                ]
                              }
                            },
                            "x-kubernetes-validations": [
                              {
                                "message": "id is required when type is ID, and forbidden otherwise",
                                "rule": "has(self.type) && self.type == 'ID' ?  has(self.id) : !has(self.id)"
                              },
                              {
                                "message": "arn is required when type is ARN, and forbidden otherwise",
                                "rule": "has(self.type) && self.type == 'ARN' ?  has(self.arn) : !has(self.arn)"
                              },
                              {
                                "message": "filters is required when type is Filters, and forbidden otherwise",
                                "rule": "has(self.type) && self.type == 'Filters' ?  has(self.filters) : !has(self.filters)"
                              }
                            ]
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "azure": {
                      "description": "Azure configures failure domain information for the Azure platform.",
                      "type": "array",
                      "items": {
                        "description": "AzureFailureDomain configures failure domain information for the Azure platform.",
                        "type": "object",
                        "required": [
                          "zone"
                        ],
                        "properties": {
                          "subnet": {
                            "description": "subnet is the name of the network subnet in which the VM will be created.\nWhen omitted, the subnet value from the machine providerSpec template will be used.",
                            "type": "string",
                            "maxLength": 80,
                            "pattern": "^[a-zA-Z0-9](?:[a-zA-Z0-9._-]*[a-zA-Z0-9_])?$"
                          },
                          "zone": {
                            "description": "Availability Zone for the virtual machine.\nIf nil, the virtual machine should be deployed to no zone.",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "gcp": {
                      "description": "GCP configures failure domain information for the GCP platform.",
                      "type": "array",
                      "items": {
                        "description": "GCPFailureDomain configures failure domain information for the GCP platform",
                        "type": "object",
                        "required": [
                          "zone"
                        ],
                        "properties": {
                          "zone": {
                            "description": "Zone is the zone in which the GCP machine provider will create the VM.",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "nutanix": {
                      "description": "nutanix configures failure domain information for the Nutanix platform.",
                      "type": "array",
                      "items": {
                        "description": "NutanixFailureDomainReference refers to the failure domain of the Nutanix platform.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name of the failure domain in which the nutanix machine provider will create the VM.\nFailure domains are defined in a cluster's config.openshift.io/Infrastructure resource.",
                            "type": "string",
                            "maxLength": 64,
                            "minLength": 1,
                            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?"
                          }
                        }
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "openstack": {
                      "description": "OpenStack configures failure domain information for the OpenStack platform.",
                      "type": "array",
                      "items": {
                        "description": "OpenStackFailureDomain configures failure domain information for the OpenStack platform.",
                        "type": "object",
                        "minProperties": 1,
                        "properties": {
                          "availabilityZone": {
                            "description": "availabilityZone is the nova availability zone in which the OpenStack machine provider will create the VM.\nIf not specified, the VM will be created in the default availability zone specified in the nova configuration.\nAvailability zone names must NOT contain : since it is used by admin users to specify hosts where instances\nare launched in server creation. Also, it must not contain spaces otherwise it will lead to node that belongs\nto this availability zone register failure, see kubernetes/cloud-provider-openstack#1379 for further information.\nThe maximum length of availability zone name is 63 as per labels limits.",
                            "type": "string",
                            "maxLength": 63,
                            "minLength": 1,
                            "pattern": "^[^: ]*$"
                          },
                          "rootVolume": {
                            "description": "rootVolume contains settings that will be used by the OpenStack machine provider to create the root volume attached to the VM.\nIf not specified, no root volume will be created.",
                            "type": "object",
                            "required": [
                              "volumeType"
                            ],
                            "properties": {
                              "availabilityZone": {
                                "description": "availabilityZone specifies the Cinder availability zone where the root volume will be created.\nIf not specifified, the root volume will be created in the availability zone specified by the volume type in the cinder configuration.\nIf the volume type (configured in the OpenStack cluster) does not specify an availability zone, the root volume will be created in the default availability\nzone specified in the cinder configuration. See https://docs.openstack.org/cinder/latest/admin/availability-zone-type.html for more details.\nIf the OpenStack cluster is deployed with the cross_az_attach configuration option set to false, the root volume will have to be in the same\navailability zone as the VM (defined by OpenStackFailureDomain.AvailabilityZone).\nAvailability zone names must NOT contain spaces otherwise it will lead to volume that belongs to this availability zone register failure,\nsee kubernetes/cloud-provider-openstack#1379 for further information.\nThe maximum length of availability zone name is 63 as per labels limits.",
                                "type": "string",
                                "maxLength": 63,
                                "minLength": 1,
                                "pattern": "^[^ ]*$"
                              },
                              "volumeType": {
                                "description": "volumeType specifies the type of the root volume that will be provisioned.\nThe maximum length of a volume type name is 255 characters, as per the OpenStack limit.",
                                "type": "string",
                                "maxLength": 255,
                                "minLength": 1
                              }
                            }
                          }
                        },
                        "x-kubernetes-validations": [
                          {
                            "message": "rootVolume.availabilityZone is required when availabilityZone is set",
                            "rule": "!has(self.availabilityZone) || !has(self.rootVolume) || has(self.rootVolume.availabilityZone)"
                          }
                        ]
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "platform": {
                      "description": "Platform identifies the platform for which the FailureDomain represents.\nCurrently supported values are AWS, Azure, GCP, OpenStack, VSphere and Nutanix.",
                      "type": "string",
                      "enum": [
                        "",
                        "AWS",
                        "Azure",
                        "BareMetal",
                        "GCP",
                        "Libvirt",
                        "OpenStack",
                        "None",
                        "VSphere",
                        "oVirt",
                        "IBMCloud",
                        "KubeVirt",
                        "EquinixMetal",
                        "PowerVS",
                        "AlibabaCloud",
                        "Nutanix",
                        "External"
                      ]
                    },
                    "vsphere": {
                      "description": "vsphere configures failure domain information for the VSphere platform.",
                      "type": "array",
                      "items": {
                        "description": "VSphereFailureDomain configures failure domain information for the vSphere platform",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name of the failure domain in which the vSphere machine provider will create the VM.\nFailure domains are defined in a cluster's config.openshift.io/Infrastructure resource.\nWhen balancing machines across failure domains, the control plane machine set will inject configuration from the\nInfrastructure resource into the machine providerSpec to allocate the machine to a failure domain.",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "aws configuration is required when platform is AWS, and forbidden otherwise",
                      "rule": "has(self.platform) && self.platform == 'AWS' ?  has(self.aws) : !has(self.aws)"
                    },
                    {
                      "message": "azure configuration is required when platform is Azure, and forbidden otherwise",
                      "rule": "has(self.platform) && self.platform == 'Azure' ?  has(self.azure) : !has(self.azure)"
                    },
                    {
                      "message": "gcp configuration is required when platform is GCP, and forbidden otherwise",
                      "rule": "has(self.platform) && self.platform == 'GCP' ?  has(self.gcp) : !has(self.gcp)"
                    },
                    {
                      "message": "openstack configuration is required when platform is OpenStack, and forbidden otherwise",
                      "rule": "has(self.platform) && self.platform == 'OpenStack' ?  has(self.openstack) : !has(self.openstack)"
                    },
                    {
                      "message": "vsphere configuration is required when platform is VSphere, and forbidden otherwise",
                      "rule": "has(self.platform) && self.platform == 'VSphere' ?  has(self.vsphere) : !has(self.vsphere)"
                    },
                    {
                      "message": "nutanix configuration is required when platform is Nutanix, and forbidden otherwise",
                      "rule": "has(self.platform) && self.platform == 'Nutanix' ?  has(self.nutanix) : !has(self.nutanix)"
                    }
                  ]
                },
                "metadata": {
                  "description": "ObjectMeta is the standard object metadata\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\nLabels are required to match the ControlPlaneMachineSet selector.",
                  "type": "object",
                  "required": [
                    "labels"
                  ],
                  "properties": {
                    "annotations": {
                      "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "labels": {
                      "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels.\nThis field must contain both the 'machine.openshift.io/cluster-api-machine-role' and 'machine.openshift.io/cluster-api-machine-type' labels, both with a value of 'master'.\nIt must also contain a label with the key 'machine.openshift.io/cluster-api-cluster'.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-kubernetes-validations": [
                        {
                          "message": "label 'machine.openshift.io/cluster-api-machine-role' is required, and must have value 'master'",
                          "rule": "'machine.openshift.io/cluster-api-machine-role' in self && self['machine.openshift.io/cluster-api-machine-role'] == 'master'"
                        },
                        {
                          "message": "label 'machine.openshift.io/cluster-api-machine-type' is required, and must have value 'master'",
                          "rule": "'machine.openshift.io/cluster-api-machine-type' in self && self['machine.openshift.io/cluster-api-machine-type'] == 'master'"
                        },
                        {
                          "message": "label 'machine.openshift.io/cluster-api-cluster' is required",
                          "rule": "'machine.openshift.io/cluster-api-cluster' in self"
                        }
                      ]
                    }
                  }
                },
                "spec": {
                  "description": "Spec contains the desired configuration of the Control Plane Machines.\nThe ProviderSpec within contains platform specific details\nfor creating the Control Plane Machines.\nThe ProviderSe should be complete apart from the platform specific\nfailure domain field. This will be overriden when the Machines\nare created based on the FailureDomains field.",
                  "type": "object",
                  "properties": {
                    "lifecycleHooks": {
                      "description": "LifecycleHooks allow users to pause operations on the machine at\ncertain predefined points within the machine lifecycle.",
                      "type": "object",
                      "properties": {
                        "preDrain": {
                          "description": "PreDrain hooks prevent the machine from being drained.\nThis also blocks further lifecycle events, such as termination.",
                          "type": "array",
                          "items": {
                            "description": "LifecycleHook represents a single instance of a lifecycle hook",
                            "type": "object",
                            "required": [
                              "name",
                              "owner"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines a unique name for the lifcycle hook.\nThe name should be unique and descriptive, ideally 1-3 words, in CamelCase or\nit may be namespaced, eg. foo.example.com/CamelCase.\nNames must be unique and should only be managed by a single entity.",
                                "type": "string",
                                "maxLength": 256,
                                "minLength": 3,
                                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                              },
                              "owner": {
                                "description": "Owner defines the owner of the lifecycle hook.\nThis should be descriptive enough so that users can identify\nwho/what is responsible for blocking the lifecycle.\nThis could be the name of a controller (e.g. clusteroperator/etcd)\nor an administrator managing the hook.",
                                "type": "string",
                                "maxLength": 512,
                                "minLength": 3
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "preTerminate": {
                          "description": "PreTerminate hooks prevent the machine from being terminated.\nPreTerminate hooks be actioned after the Machine has been drained.",
                          "type": "array",
                          "items": {
                            "description": "LifecycleHook represents a single instance of a lifecycle hook",
                            "type": "object",
                            "required": [
                              "name",
                              "owner"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines a unique name for the lifcycle hook.\nThe name should be unique and descriptive, ideally 1-3 words, in CamelCase or\nit may be namespaced, eg. foo.example.com/CamelCase.\nNames must be unique and should only be managed by a single entity.",
                                "type": "string",
                                "maxLength": 256,
                                "minLength": 3,
                                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                              },
                              "owner": {
                                "description": "Owner defines the owner of the lifecycle hook.\nThis should be descriptive enough so that users can identify\nwho/what is responsible for blocking the lifecycle.\nThis could be the name of a controller (e.g. clusteroperator/etcd)\nor an administrator managing the hook.",
                                "type": "string",
                                "maxLength": 512,
                                "minLength": 3
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        }
                      }
                    },
                    "metadata": {
                      "description": "ObjectMeta will autopopulate the Node created. Use this to\nindicate what labels, annotations, name prefix, etc., should be used\nwhen creating the Node.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "generateName": {
                          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will\nNOT return a 409 - instead, it will either return 201 Created or 500 with Reason\nServerTimeout indicating a unique name could not be found in the time allotted, and the client\nshould retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                          "type": "string"
                        },
                        "labels": {
                          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace defines the space within each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces",
                          "type": "string"
                        },
                        "ownerReferences": {
                          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.",
                          "type": "array",
                          "items": {
                            "description": "OwnerReference contains enough information to let you identify an owning\nobject. An owning object must be in the same namespace as the dependent, or\nbe cluster-scoped, so there is no namespace field.",
                            "type": "object",
                            "required": [
                              "apiVersion",
                              "kind",
                              "name",
                              "uid"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "API version of the referent.",
                                "type": "string"
                              },
                              "blockOwnerDeletion": {
                                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.",
                                "type": "boolean"
                              },
                              "controller": {
                                "description": "If true, this reference points to the managing controller.",
                                "type": "boolean"
                              },
                              "kind": {
                                "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                                "type": "string"
                              },
                              "uid": {
                                "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "x-kubernetes-list-map-keys": [
                            "uid"
                          ],
                          "x-kubernetes-list-type": "map"
                        }
                      }
                    },
                    "providerID": {
                      "description": "ProviderID is the identification ID of the machine provided by the provider.\nThis field must match the provider ID as seen on the node object corresponding to this machine.\nThis field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler\nwith cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out\nmachines at provider which could not get registered as Kubernetes nodes. With cluster-api as a\ngeneric out-of-tree provider for autoscaler, this field is required by autoscaler to be\nable to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver\nand then a comparison is done to find out unregistered machines and are marked for delete.\nThis field will be set by the actuators and consumed by higher level entities like autoscaler that will\nbe interfacing with cluster-api as generic provider.",
                      "type": "string"
                    },
                    "providerSpec": {
                      "description": "ProviderSpec details Provider-specific configuration to use during node creation.",
                      "type": "object",
                      "properties": {
                        "value": {
                          "description": "Value is an inlined, serialized representation of the resource\nconfiguration. It is recommended that providers maintain their own\nversioned API types that should be serialized/deserialized from this\nfield, akin to component config.",
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      }
                    },
                    "taints": {
                      "description": "The list of the taints to be applied to the corresponding Node in additive\nmanner. This list will not overwrite any other taints added to the Node on\nan ongoing basis by other entities. These taints should be actively reconciled\ne.g. if you ask the machine controller to apply a taint and then manually remove\nthe taint the machine controller will put it back) but not have the machine controller\nremove any taints",
                      "type": "array",
                      "items": {
                        "description": "The node this Taint is attached to has the \"effect\" on\nany pod that does not tolerate the Taint.",
                        "type": "object",
                        "required": [
                          "effect",
                          "key"
                        ],
                        "properties": {
                          "effect": {
                            "description": "Required. The effect of the taint on pods\nthat do not tolerate the taint.\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                            "type": "string"
                          },
                          "key": {
                            "description": "Required. The taint key to be applied to a node.",
                            "type": "string"
                          },
                          "timeAdded": {
                            "description": "TimeAdded represents the time at which the taint was added.\nIt is only written for NoExecute taints.",
                            "type": "string",
                            "format": "date-time"
                          },
                          "value": {
                            "description": "The taint value corresponding to the taint key.",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  }
                }
              }
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "machines_v1beta1_machine_openshift_io configuration is required when machineType is machines_v1beta1_machine_openshift_io, and forbidden otherwise",
              "rule": "has(self.machineType) && self.machineType == 'machines_v1beta1_machine_openshift_io' ?  has(self.machines_v1beta1_machine_openshift_io) : !has(self.machines_v1beta1_machine_openshift_io)"
            }
          ]
        }
      }
    },
    "status": {
      "description": "ControlPlaneMachineSetStatus represents the status of the ControlPlaneMachineSet CRD.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions represents the observations of the ControlPlaneMachineSet's current state.\nKnown .status.conditions.type are: Available, Degraded and Progressing.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this\nControlPlaneMachineSet. It corresponds to the ControlPlaneMachineSets's generation,\nwhich is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "ReadyReplicas is the number of Control Plane Machines created by the\nControlPlaneMachineSet controller which are ready.\nNote that this value may be higher than the desired number of replicas\nwhile rolling updates are in-progress.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the number of Control Plane Machines created by the\nControlPlaneMachineSet controller.\nNote that during update operations this value may differ from the\ndesired replica count.",
          "type": "integer",
          "format": "int32"
        },
        "unavailableReplicas": {
          "description": "UnavailableReplicas is the number of Control Plane Machines that are\nstill required before the ControlPlaneMachineSet reaches the desired\navailable capacity. When this value is non-zero, the number of\nReadyReplicas is less than the desired Replicas.",
          "type": "integer",
          "format": "int32"
        },
        "updatedReplicas": {
          "description": "UpdatedReplicas is the number of non-terminated Control Plane Machines\ncreated by the ControlPlaneMachineSet controller that have the desired\nprovider spec and are ready.\nThis value is set to 0 when a change is detected to the desired spec.\nWhen the update strategy is RollingUpdate, this will also coincide\nwith starting the process of updating the Machines.\nWhen the update strategy is OnDelete, this value will remain at 0 until\na user deletes an existing replica and its replacement has become ready.",
          "type": "integer",
          "format": "int32"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "machine.openshift.io",
      "kind": "ControlPlaneMachineSet",
      "version": "v1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}