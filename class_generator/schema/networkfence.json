{
  "description": "NetworkFence is the Schema for the networkfences API",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "NetworkFenceSpec defines the desired state of NetworkFence",
      "type": "object",
      "required": [
        "cidrs",
        "driver",
        "fenceState"
      ],
      "properties": {
        "cidrs": {
          "description": "Cidrs contains a list of CIDR blocks, which are required to be fenced.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "driver": {
          "description": "Driver contains  the name of CSI driver.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "message": "driver is immutable",
              "rule": "self == oldSelf"
            }
          ]
        },
        "fenceState": {
          "description": "FenceState contains the desired state for the CIDRs\nmentioned in the Spec. i.e. Fenced or Unfenced",
          "type": "string",
          "enum": [
            "Fenced",
            "Unfenced"
          ]
        },
        "parameters": {
          "description": "Parameters is used to pass additional parameters to the CSI driver.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-kubernetes-validations": [
            {
              "message": "parameters are immutable",
              "rule": "self == oldSelf"
            }
          ]
        },
        "secret": {
          "description": "Secret is a kubernetes secret, which is required to perform the fence/unfence operation.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name specifies the name of the secret.",
              "type": "string",
              "x-kubernetes-validations": [
                {
                  "message": "name is immutable",
                  "rule": "self == oldSelf"
                }
              ]
            },
            "namespace": {
              "description": "Namespace specifies the namespace in which the secret\nis located.",
              "type": "string",
              "x-kubernetes-validations": [
                {
                  "message": "namespace is immutable",
                  "rule": "self == oldSelf"
                }
              ]
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "secret is immutable",
              "rule": "self == oldSelf"
            }
          ]
        }
      },
      "x-kubernetes-validations": [
        {
          "message": "parameters are immutable",
          "rule": "has(self.parameters) == has(oldSelf.parameters)"
        },
        {
          "message": "secret is immutable",
          "rule": "has(self.secret) == has(oldSelf.secret)"
        }
      ]
    },
    "status": {
      "description": "NetworkFenceStatus defines the observed state of NetworkFence",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions are the list of conditions and their status.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          }
        },
        "message": {
          "description": "Message contains any message from the NetworkFence operation.",
          "type": "string"
        },
        "result": {
          "description": "Result indicates the result of Network Fence/Unfence operation.",
          "type": "string"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "csiaddons.openshift.io",
      "kind": "NetworkFence",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}