{
  "description": "DNSRecord is a DNS record managed in the zones defined by\ndns.config.openshift.io/cluster .spec.publicZone and .spec.privateZone.\n\nCluster admin manipulation of this resource is not supported. This resource\nis only for internal communication of OpenShift operators.\n\nIf DNSManagementPolicy is \"Unmanaged\", the operator will not be responsible\nfor managing the DNS records on the cloud provider.\n\nCompatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "spec is the specification of the desired behavior of the dnsRecord.",
      "type": "object",
      "required": [
        "dnsManagementPolicy",
        "dnsName",
        "recordTTL",
        "recordType",
        "targets"
      ],
      "properties": {
        "dnsManagementPolicy": {
          "description": "dnsManagementPolicy denotes the current policy applied on the DNS\nrecord. Records that have policy set as \"Unmanaged\" are ignored by\nthe ingress operator.  This means that the DNS record on the cloud\nprovider is not managed by the operator, and the \"Published\" status\ncondition will be updated to \"Unknown\" status, since it is externally\nmanaged. Any existing record on the cloud provider can be deleted at\nthe discretion of the cluster admin.\n\nThis field defaults to Managed. Valid values are \"Managed\" and\n\"Unmanaged\".",
          "type": "string",
          "enum": [
            "Managed",
            "Unmanaged"
          ]
        },
        "dnsName": {
          "description": "dnsName is the hostname of the DNS record",
          "type": "string",
          "minLength": 1
        },
        "recordTTL": {
          "description": "recordTTL is the record TTL in seconds. If zero, the default is 30.\nRecordTTL will not be used in AWS regions Alias targets, but\nwill be used in CNAME targets, per AWS API contract.",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "recordType": {
          "description": "recordType is the DNS record type. For example, \"A\" or \"CNAME\".",
          "type": "string",
          "enum": [
            "CNAME",
            "A"
          ]
        },
        "targets": {
          "description": "targets are record targets.",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "status": {
      "description": "status is the most recently observed status of the dnsRecord.",
      "type": "object",
      "properties": {
        "observedGeneration": {
          "description": "observedGeneration is the most recently observed generation of the\nDNSRecord.  When the DNSRecord is updated, the controller updates the\ncorresponding record in each managed zone.  If an update for a\nparticular zone fails, that failure is recorded in the status\ncondition for the zone so that the controller can determine that it\nneeds to retry the update for that specific zone.",
          "type": "integer",
          "format": "int64"
        },
        "zones": {
          "description": "zones are the status of the record in each zone.",
          "type": "array",
          "items": {
            "description": "DNSZoneStatus is the status of a record within a specific zone.",
            "type": "object",
            "properties": {
              "conditions": {
                "description": "conditions are any conditions associated with the record in the zone.\n\nIf publishing the record succeeds, the \"Published\" condition will be\nset with status \"True\" and upon failure it will be set to \"False\" along\nwith the reason and message describing the cause of the failure.",
                "type": "array",
                "items": {
                  "description": "DNSZoneCondition is just the standard condition fields.",
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              },
              "dnsZone": {
                "description": "dnsZone is the zone where the record is published.",
                "type": "object",
                "properties": {
                  "id": {
                    "description": "id is the identifier that can be used to find the DNS hosted zone.\n\non AWS zone can be fetched using `ID` as id in [1]\non Azure zone can be fetched using `ID` as a pre-determined name in [2],\non GCP zone can be fetched using `ID` as a pre-determined name in [3].\n\n[1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options\n[2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show\n[3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get",
                    "type": "string"
                  },
                  "tags": {
                    "description": "tags can be used to query the DNS hosted zone.\n\non AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters,\n\n[1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "ingress.operator.openshift.io",
      "kind": "DNSRecord",
      "version": "v1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}