{
  "description": "FeatureStore is the Schema for the featurestores API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "FeatureStoreSpec defines the desired state of FeatureStore",
      "type": "object",
      "required": [
        "feastProject"
      ],
      "properties": {
        "authz": {
          "description": "AuthzConfig defines the authorization settings for the deployed Feast services.",
          "type": "object",
          "properties": {
            "kubernetes": {
              "description": "KubernetesAuthz provides a way to define the authorization settings using Kubernetes RBAC resources.\nhttps://kubernetes.",
              "type": "object",
              "properties": {
                "roles": {
                  "description": "The Kubernetes RBAC roles to be deployed in the same namespace of the FeatureStore.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "oidc": {
              "description": "OidcAuthz defines the authorization settings for deployments using an Open ID Connect identity provider.\nhttps://auth0.",
              "type": "object",
              "required": [
                "secretRef"
              ],
              "properties": {
                "secretRef": {
                  "description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                }
              }
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "One selection required between kubernetes or oidc.",
              "rule": "[has(self.kubernetes), has(self.oidc)].exists_one(c, c)"
            }
          ]
        },
        "cronJob": {
          "description": "FeastCronJob defines a CronJob to execute against a Feature Store deployment.",
          "type": "object",
          "properties": {
            "concurrencyPolicy": {
              "description": "Specifies how to treat concurrent executions of a Job.",
              "type": "string"
            },
            "containerConfigs": {
              "description": "CronJobContainerConfigs k8s container settings for the CronJob",
              "type": "object",
              "properties": {
                "commands": {
                  "description": "Array of commands to be executed (in order) against a Feature Store deployment.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "env": {
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                        "type": "string"
                      },
                      "valueFrom": {
                        "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                        "type": "object",
                        "properties": {
                          "configMapKeyRef": {
                            "description": "Selects a key of a ConfigMap.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "fieldRef": {
                            "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                            "type": "object",
                            "required": [
                              "fieldPath"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                "type": "string"
                              },
                              "fieldPath": {
                                "description": "Path of the field to select in the specified API version.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "resourceFieldRef": {
                            "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                            "type": "object",
                            "required": [
                              "resource"
                            ],
                            "properties": {
                              "containerName": {
                                "description": "Container name: required for volumes, optional for env vars",
                                "type": "string"
                              },
                              "divisor": {
                                "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "resource": {
                                "description": "Required: resource to select",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "secretKeyRef": {
                            "description": "Selects a key of a secret in the pod's namespace",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          }
                        }
                      }
                    }
                  }
                },
                "envFrom": {
                  "type": "array",
                  "items": {
                    "description": "EnvFromSource represents the source of a set of ConfigMaps",
                    "type": "object",
                    "properties": {
                      "configMapRef": {
                        "description": "The ConfigMap to select from",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the ConfigMap must be defined",
                            "type": "boolean"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "prefix": {
                        "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                        "type": "string"
                      },
                      "secretRef": {
                        "description": "The Secret to select from",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret must be defined",
                            "type": "boolean"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      }
                    }
                  }
                },
                "image": {
                  "type": "string"
                },
                "imagePullPolicy": {
                  "description": "PullPolicy describes a policy for if/when to pull a container image",
                  "type": "string"
                },
                "resources": {
                  "description": "ResourceRequirements describes the compute resource requirements.",
                  "type": "object",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.",
                      "type": "array",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used.",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required.",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                }
              }
            },
            "failedJobsHistoryLimit": {
              "description": "The number of failed finished jobs to retain. Value must be non-negative integer.",
              "type": "integer",
              "format": "int32"
            },
            "jobSpec": {
              "description": "Specification of the desired behavior of a job.",
              "type": "object",
              "properties": {
                "activeDeadlineSeconds": {
                  "description": "Specifies the duration in seconds relative to the startTime that the job\nmay be continuously active before the system tr",
                  "type": "integer",
                  "format": "int64"
                },
                "backoffLimit": {
                  "description": "Specifies the number of retries before marking this job failed.",
                  "type": "integer",
                  "format": "int32"
                },
                "backoffLimitPerIndex": {
                  "description": "Specifies the limit for the number of retries within an\nindex before marking this index as failed.",
                  "type": "integer",
                  "format": "int32"
                },
                "completionMode": {
                  "description": "completionMode specifies how Pod completions are tracked. It can be\n`NonIndexed` (default) or `Indexed`.",
                  "type": "string"
                },
                "completions": {
                  "description": "Specifies the desired number of successfully finished pods the\njob should be run with.",
                  "type": "integer",
                  "format": "int32"
                },
                "maxFailedIndexes": {
                  "description": "Specifies the maximal number of failed indexes before marking the Job as\nfailed, when backoffLimitPerIndex is set.",
                  "type": "integer",
                  "format": "int32"
                },
                "parallelism": {
                  "description": "Specifies the maximum desired number of pods the job should\nrun at any given time.",
                  "type": "integer",
                  "format": "int32"
                },
                "podFailurePolicy": {
                  "description": "Specifies the policy of handling failed pods.",
                  "type": "object",
                  "required": [
                    "rules"
                  ],
                  "properties": {
                    "rules": {
                      "description": "A list of pod failure policy rules. The rules are evaluated in order.",
                      "type": "array",
                      "items": {
                        "description": "PodFailurePolicyRule describes how a pod failure is handled when the requirements are met.",
                        "type": "object",
                        "required": [
                          "action"
                        ],
                        "properties": {
                          "action": {
                            "description": "Specifies the action taken on a pod failure when the requirements are satisfied.",
                            "type": "string"
                          },
                          "onExitCodes": {
                            "description": "Represents the requirement on the container exit codes.",
                            "type": "object",
                            "required": [
                              "operator",
                              "values"
                            ],
                            "properties": {
                              "containerName": {
                                "description": "Restricts the check for exit codes to the container with the\nspecified name.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "Represents the relationship between the container exit code(s) and the\nspecified values.",
                                "type": "string"
                              },
                              "values": {
                                "description": "Specifies the set of values.",
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "x-kubernetes-list-type": "set"
                              }
                            }
                          },
                          "onPodConditions": {
                            "description": "Represents the requirement on the pod conditions. The requirement is represented\nas a list of pod condition patterns.",
                            "type": "array",
                            "items": {
                              "description": "PodFailurePolicyOnPodConditionsPattern describes a pattern for matching\nan actual pod condition type.",
                              "type": "object",
                              "required": [
                                "status",
                                "type"
                              ],
                              "properties": {
                                "status": {
                                  "description": "Specifies the required Pod condition status.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Specifies the required Pod condition type.",
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  }
                },
                "podReplacementPolicy": {
                  "description": "podReplacementPolicy specifies when to create replacement Pods.",
                  "type": "string"
                },
                "suspend": {
                  "description": "suspend specifies whether the Job controller should create Pods or not.",
                  "type": "boolean"
                },
                "ttlSecondsAfterFinished": {
                  "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished\nexecution (either Complete or Failed).",
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "schedule": {
              "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
              "type": "string"
            },
            "startingDeadlineSeconds": {
              "description": "Optional deadline in seconds for starting the job if it misses scheduled\ntime for any reason.",
              "type": "integer",
              "format": "int64"
            },
            "successfulJobsHistoryLimit": {
              "description": "The number of successful finished jobs to retain. Value must be non-negative integer.",
              "type": "integer",
              "format": "int32"
            },
            "suspend": {
              "description": "This flag tells the controller to suspend subsequent executions, it does\nnot apply to already started executions.",
              "type": "boolean"
            },
            "timeZone": {
              "description": "The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.",
              "type": "string"
            }
          }
        },
        "feastProject": {
          "description": "FeastProject is the Feast project id.",
          "type": "string",
          "pattern": "^[A-Za-z0-9][A-Za-z0-9_]*$"
        },
        "feastProjectDir": {
          "description": "FeastProjectDir defines how to create the feast project directory.",
          "type": "object",
          "properties": {
            "git": {
              "description": "GitCloneOptions describes how a clone should be performed.",
              "type": "object",
              "required": [
                "url"
              ],
              "properties": {
                "configs": {
                  "description": "Configs passed to git via `-c`\ne.g. http.sslVerify: 'false'\nOR 'url.\"https://api:\\${TOKEN}@github.com/\".",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "env": {
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                        "type": "string"
                      },
                      "valueFrom": {
                        "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                        "type": "object",
                        "properties": {
                          "configMapKeyRef": {
                            "description": "Selects a key of a ConfigMap.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "fieldRef": {
                            "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                            "type": "object",
                            "required": [
                              "fieldPath"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                "type": "string"
                              },
                              "fieldPath": {
                                "description": "Path of the field to select in the specified API version.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "resourceFieldRef": {
                            "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                            "type": "object",
                            "required": [
                              "resource"
                            ],
                            "properties": {
                              "containerName": {
                                "description": "Container name: required for volumes, optional for env vars",
                                "type": "string"
                              },
                              "divisor": {
                                "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "resource": {
                                "description": "Required: resource to select",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "secretKeyRef": {
                            "description": "Selects a key of a secret in the pod's namespace",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          }
                        }
                      }
                    }
                  }
                },
                "envFrom": {
                  "type": "array",
                  "items": {
                    "description": "EnvFromSource represents the source of a set of ConfigMaps",
                    "type": "object",
                    "properties": {
                      "configMapRef": {
                        "description": "The ConfigMap to select from",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the ConfigMap must be defined",
                            "type": "boolean"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "prefix": {
                        "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                        "type": "string"
                      },
                      "secretRef": {
                        "description": "The Secret to select from",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret must be defined",
                            "type": "boolean"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      }
                    }
                  }
                },
                "featureRepoPath": {
                  "description": "FeatureRepoPath is the relative path to the feature repo subdirectory. Default is 'feature_repo'.",
                  "type": "string"
                },
                "ref": {
                  "description": "Reference to a branch / tag / commit",
                  "type": "string"
                },
                "url": {
                  "description": "The repository URL to clone from.",
                  "type": "string"
                }
              },
              "x-kubernetes-validations": [
                {
                  "message": "RepoPath must be a file name only, with no slashes.",
                  "rule": "has(self.featureRepoPath) ? !self.featureRepoPath.startsWith('/') : true"
                }
              ]
            },
            "init": {
              "description": "FeastInitOptions defines how to run a `feast init`.",
              "type": "object",
              "properties": {
                "minimal": {
                  "type": "boolean"
                },
                "template": {
                  "description": "Template for the created project",
                  "type": "string",
                  "enum": [
                    "local",
                    "gcp",
                    "aws",
                    "snowflake",
                    "spark",
                    "postgres",
                    "hbase",
                    "cassandra",
                    "hazelcast",
                    "ikv",
                    "couchbase"
                  ]
                }
              }
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "One selection required between init or git.",
              "rule": "[has(self.git), has(self.init)].exists_one(c, c)"
            }
          ]
        },
        "services": {
          "description": "FeatureStoreServices defines the desired feast services. An ephemeral onlineStore feature server is deployed by default.",
          "type": "object",
          "properties": {
            "deploymentStrategy": {
              "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
              "type": "object",
              "properties": {
                "rollingUpdate": {
                  "description": "Rolling update config params. Present only if DeploymentStrategyType =\nRollingUpdate.",
                  "type": "object",
                  "properties": {
                    "maxSurge": {
                      "description": "The maximum number of pods that can be scheduled above the desired number of\npods.",
                      "x-kubernetes-int-or-string": true
                    },
                    "maxUnavailable": {
                      "description": "The maximum number of pods that can be unavailable during the update.",
                      "x-kubernetes-int-or-string": true
                    }
                  }
                },
                "type": {
                  "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                  "type": "string"
                }
              }
            },
            "disableInitContainers": {
              "description": "Disable the 'feast repo initialization' initContainer",
              "type": "boolean"
            },
            "offlineStore": {
              "description": "OfflineStore configures the offline store service",
              "type": "object",
              "properties": {
                "persistence": {
                  "description": "OfflineStorePersistence configures the persistence settings for the offline store service",
                  "type": "object",
                  "properties": {
                    "file": {
                      "description": "OfflineStoreFilePersistence configures the file-based persistence for the offline store service",
                      "type": "object",
                      "properties": {
                        "pvc": {
                          "description": "PvcConfig defines the settings for a persistent file store based on PVCs.",
                          "type": "object",
                          "required": [
                            "mountPath"
                          ],
                          "properties": {
                            "create": {
                              "description": "Settings for creating a new PVC",
                              "type": "object",
                              "properties": {
                                "accessModes": {
                                  "description": "AccessModes k8s persistent volume access modes. Defaults to [\"ReadWriteOnce\"].",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "resources": {
                                  "description": "Resources describes the storage resource requirements for a volume.",
                                  "type": "object",
                                  "properties": {
                                    "limits": {
                                      "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "x-kubernetes-int-or-string": true
                                      }
                                    },
                                    "requests": {
                                      "description": "Requests describes the minimum amount of compute resources required.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "x-kubernetes-int-or-string": true
                                      }
                                    }
                                  }
                                },
                                "storageClassName": {
                                  "description": "StorageClassName is the name of an existing StorageClass to which this persistent volume belongs.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-validations": [
                                {
                                  "message": "PvcCreate is immutable",
                                  "rule": "self == oldSelf"
                                }
                              ]
                            },
                            "mountPath": {
                              "description": "MountPath within the container at which the volume should be mounted.\nMust start by \"/\" and cannot contain ':'.",
                              "type": "string"
                            },
                            "ref": {
                              "description": "Reference to an existing field",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            }
                          },
                          "x-kubernetes-validations": [
                            {
                              "message": "One selection is required between ref and create.",
                              "rule": "[has(self.ref), has(self.create)].exists_one(c, c)"
                            },
                            {
                              "message": "Mount path must start with '/' and must not contain ':'",
                              "rule": "self.mountPath.matches('^/[^:]*$')"
                            }
                          ]
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "file",
                            "dask",
                            "duckdb"
                          ]
                        }
                      }
                    },
                    "store": {
                      "description": "OfflineStoreDBStorePersistence configures the DB store persistence for the offline store service",
                      "type": "object",
                      "required": [
                        "secretRef",
                        "type"
                      ],
                      "properties": {
                        "secretKeyName": {
                          "description": "By default, the selected store \"type\" is used as the SecretKeyName",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "Data store parameters should be placed as-is from the \"feature_store.yaml\" under the secret key.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "type": {
                          "description": "Type of the persistence type you want to use.",
                          "type": "string",
                          "enum": [
                            "snowflake.offline",
                            "bigquery",
                            "redshift",
                            "spark",
                            "postgres",
                            "trino",
                            "athena",
                            "mssql",
                            "couchbase.offline"
                          ]
                        }
                      }
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "One selection required between file or store.",
                      "rule": "[has(self.file), has(self.store)].exists_one(c, c)"
                    }
                  ]
                },
                "server": {
                  "description": "Creates a remote offline server container",
                  "type": "object",
                  "properties": {
                    "env": {
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          }
                        }
                      }
                    },
                    "envFrom": {
                      "type": "array",
                      "items": {
                        "description": "EnvFromSource represents the source of a set of ConfigMaps",
                        "type": "object",
                        "properties": {
                          "configMapRef": {
                            "description": "The ConfigMap to select from",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "prefix": {
                            "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "secretRef": {
                            "description": "The Secret to select from",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          }
                        }
                      }
                    },
                    "image": {
                      "type": "string"
                    },
                    "imagePullPolicy": {
                      "description": "PullPolicy describes a policy for if/when to pull a container image",
                      "type": "string"
                    },
                    "logLevel": {
                      "description": "LogLevel sets the logging level for the server\nAllowed values: \"debug\", \"info\", \"warning\", \"error\", \"critical\".",
                      "type": "string",
                      "enum": [
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical"
                      ]
                    },
                    "resources": {
                      "description": "ResourceRequirements describes the compute resource requirements.",
                      "type": "object",
                      "properties": {
                        "claims": {
                          "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.",
                          "type": "array",
                          "items": {
                            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "limits": {
                          "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "requests": {
                          "description": "Requests describes the minimum amount of compute resources required.",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      }
                    },
                    "tls": {
                      "description": "TlsConfigs configures server TLS for a feast service.",
                      "type": "object",
                      "properties": {
                        "disable": {
                          "description": "will disable TLS for the feast service. useful in an openshift cluster, for example, where TLS is configured by default",
                          "type": "boolean"
                        },
                        "secretKeyNames": {
                          "description": "SecretKeyNames defines the secret key names for the TLS key and cert.",
                          "type": "object",
                          "properties": {
                            "tlsCrt": {
                              "description": "defaults to \"tls.crt\"",
                              "type": "string"
                            },
                            "tlsKey": {
                              "description": "defaults to \"tls.key\"",
                              "type": "string"
                            }
                          }
                        },
                        "secretRef": {
                          "description": "references the local k8s secret where the TLS key and cert reside",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        }
                      },
                      "x-kubernetes-validations": [
                        {
                          "message": "`secretRef` required if `disable` is false.",
                          "rule": "(!has(self.disable) || !self.disable) ? has(self.secretRef) : true"
                        }
                      ]
                    },
                    "volumeMounts": {
                      "description": "VolumeMounts defines the list of volumes that should be mounted into the feast container.",
                      "type": "array",
                      "items": {
                        "description": "VolumeMount describes a mounting of a Volume within a container.",
                        "type": "object",
                        "required": [
                          "mountPath",
                          "name"
                        ],
                        "properties": {
                          "mountPath": {
                            "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                            "type": "string"
                          },
                          "mountPropagation": {
                            "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.",
                            "type": "string"
                          },
                          "name": {
                            "description": "This must match the Name of a Volume.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
                            "type": "boolean"
                          },
                          "recursiveReadOnly": {
                            "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.",
                            "type": "string"
                          },
                          "subPath": {
                            "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
                            "type": "string"
                          },
                          "subPathExpr": {
                            "description": "Expanded path within the volume from which the container's volume should be mounted.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "onlineStore": {
              "description": "OnlineStore configures the online store service",
              "type": "object",
              "properties": {
                "persistence": {
                  "description": "OnlineStorePersistence configures the persistence settings for the online store service",
                  "type": "object",
                  "properties": {
                    "file": {
                      "description": "OnlineStoreFilePersistence configures the file-based persistence for the online store service",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "pvc": {
                          "description": "PvcConfig defines the settings for a persistent file store based on PVCs.",
                          "type": "object",
                          "required": [
                            "mountPath"
                          ],
                          "properties": {
                            "create": {
                              "description": "Settings for creating a new PVC",
                              "type": "object",
                              "properties": {
                                "accessModes": {
                                  "description": "AccessModes k8s persistent volume access modes. Defaults to [\"ReadWriteOnce\"].",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "resources": {
                                  "description": "Resources describes the storage resource requirements for a volume.",
                                  "type": "object",
                                  "properties": {
                                    "limits": {
                                      "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "x-kubernetes-int-or-string": true
                                      }
                                    },
                                    "requests": {
                                      "description": "Requests describes the minimum amount of compute resources required.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "x-kubernetes-int-or-string": true
                                      }
                                    }
                                  }
                                },
                                "storageClassName": {
                                  "description": "StorageClassName is the name of an existing StorageClass to which this persistent volume belongs.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-validations": [
                                {
                                  "message": "PvcCreate is immutable",
                                  "rule": "self == oldSelf"
                                }
                              ]
                            },
                            "mountPath": {
                              "description": "MountPath within the container at which the volume should be mounted.\nMust start by \"/\" and cannot contain ':'.",
                              "type": "string"
                            },
                            "ref": {
                              "description": "Reference to an existing field",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            }
                          },
                          "x-kubernetes-validations": [
                            {
                              "message": "One selection is required between ref and create.",
                              "rule": "[has(self.ref), has(self.create)].exists_one(c, c)"
                            },
                            {
                              "message": "Mount path must start with '/' and must not contain ':'",
                              "rule": "self.mountPath.matches('^/[^:]*$')"
                            }
                          ]
                        }
                      },
                      "x-kubernetes-validations": [
                        {
                          "message": "Ephemeral stores must have absolute paths.",
                          "rule": "(!has(self.pvc) && has(self.path)) ? self.path.startsWith('/') : true"
                        },
                        {
                          "message": "PVC path must be a file name only, with no slashes.",
                          "rule": "(has(self.pvc) && has(self.path)) ? !self.path.startsWith('/') : true"
                        },
                        {
                          "message": "Online store does not support S3 or GS buckets.",
                          "rule": "has(self.path) ? !(self.path.startsWith('s3://') || self.path.startsWith('gs://')) : true"
                        }
                      ]
                    },
                    "store": {
                      "description": "OnlineStoreDBStorePersistence configures the DB store persistence for the online store service",
                      "type": "object",
                      "required": [
                        "secretRef",
                        "type"
                      ],
                      "properties": {
                        "secretKeyName": {
                          "description": "By default, the selected store \"type\" is used as the SecretKeyName",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "Data store parameters should be placed as-is from the \"feature_store.yaml\" under the secret key.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "type": {
                          "description": "Type of the persistence type you want to use.",
                          "type": "string",
                          "enum": [
                            "snowflake.online",
                            "redis",
                            "ikv",
                            "datastore",
                            "dynamodb",
                            "bigtable",
                            "postgres",
                            "cassandra",
                            "mysql",
                            "hazelcast",
                            "singlestore",
                            "hbase",
                            "elasticsearch",
                            "qdrant",
                            "couchbase.online",
                            "milvus"
                          ]
                        }
                      }
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "One selection required between file or store.",
                      "rule": "[has(self.file), has(self.store)].exists_one(c, c)"
                    }
                  ]
                },
                "server": {
                  "description": "Creates a feature server container",
                  "type": "object",
                  "properties": {
                    "env": {
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          }
                        }
                      }
                    },
                    "envFrom": {
                      "type": "array",
                      "items": {
                        "description": "EnvFromSource represents the source of a set of ConfigMaps",
                        "type": "object",
                        "properties": {
                          "configMapRef": {
                            "description": "The ConfigMap to select from",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "prefix": {
                            "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "secretRef": {
                            "description": "The Secret to select from",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          }
                        }
                      }
                    },
                    "image": {
                      "type": "string"
                    },
                    "imagePullPolicy": {
                      "description": "PullPolicy describes a policy for if/when to pull a container image",
                      "type": "string"
                    },
                    "logLevel": {
                      "description": "LogLevel sets the logging level for the server\nAllowed values: \"debug\", \"info\", \"warning\", \"error\", \"critical\".",
                      "type": "string",
                      "enum": [
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical"
                      ]
                    },
                    "resources": {
                      "description": "ResourceRequirements describes the compute resource requirements.",
                      "type": "object",
                      "properties": {
                        "claims": {
                          "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.",
                          "type": "array",
                          "items": {
                            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "limits": {
                          "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "requests": {
                          "description": "Requests describes the minimum amount of compute resources required.",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      }
                    },
                    "tls": {
                      "description": "TlsConfigs configures server TLS for a feast service.",
                      "type": "object",
                      "properties": {
                        "disable": {
                          "description": "will disable TLS for the feast service. useful in an openshift cluster, for example, where TLS is configured by default",
                          "type": "boolean"
                        },
                        "secretKeyNames": {
                          "description": "SecretKeyNames defines the secret key names for the TLS key and cert.",
                          "type": "object",
                          "properties": {
                            "tlsCrt": {
                              "description": "defaults to \"tls.crt\"",
                              "type": "string"
                            },
                            "tlsKey": {
                              "description": "defaults to \"tls.key\"",
                              "type": "string"
                            }
                          }
                        },
                        "secretRef": {
                          "description": "references the local k8s secret where the TLS key and cert reside",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        }
                      },
                      "x-kubernetes-validations": [
                        {
                          "message": "`secretRef` required if `disable` is false.",
                          "rule": "(!has(self.disable) || !self.disable) ? has(self.secretRef) : true"
                        }
                      ]
                    },
                    "volumeMounts": {
                      "description": "VolumeMounts defines the list of volumes that should be mounted into the feast container.",
                      "type": "array",
                      "items": {
                        "description": "VolumeMount describes a mounting of a Volume within a container.",
                        "type": "object",
                        "required": [
                          "mountPath",
                          "name"
                        ],
                        "properties": {
                          "mountPath": {
                            "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                            "type": "string"
                          },
                          "mountPropagation": {
                            "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.",
                            "type": "string"
                          },
                          "name": {
                            "description": "This must match the Name of a Volume.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
                            "type": "boolean"
                          },
                          "recursiveReadOnly": {
                            "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.",
                            "type": "string"
                          },
                          "subPath": {
                            "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
                            "type": "string"
                          },
                          "subPathExpr": {
                            "description": "Expanded path within the volume from which the container's volume should be mounted.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "registry": {
              "description": "Registry configures the registry service. One selection is required. Local is the default setting.",
              "type": "object",
              "properties": {
                "local": {
                  "description": "LocalRegistryConfig configures the registry service",
                  "type": "object",
                  "properties": {
                    "persistence": {
                      "description": "RegistryPersistence configures the persistence settings for the registry service",
                      "type": "object",
                      "properties": {
                        "file": {
                          "description": "RegistryFilePersistence configures the file-based persistence for the registry service",
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string"
                            },
                            "pvc": {
                              "description": "PvcConfig defines the settings for a persistent file store based on PVCs.",
                              "type": "object",
                              "required": [
                                "mountPath"
                              ],
                              "properties": {
                                "create": {
                                  "description": "Settings for creating a new PVC",
                                  "type": "object",
                                  "properties": {
                                    "accessModes": {
                                      "description": "AccessModes k8s persistent volume access modes. Defaults to [\"ReadWriteOnce\"].",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "resources": {
                                      "description": "Resources describes the storage resource requirements for a volume.",
                                      "type": "object",
                                      "properties": {
                                        "limits": {
                                          "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                            "x-kubernetes-int-or-string": true
                                          }
                                        },
                                        "requests": {
                                          "description": "Requests describes the minimum amount of compute resources required.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                            "x-kubernetes-int-or-string": true
                                          }
                                        }
                                      }
                                    },
                                    "storageClassName": {
                                      "description": "StorageClassName is the name of an existing StorageClass to which this persistent volume belongs.",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-validations": [
                                    {
                                      "message": "PvcCreate is immutable",
                                      "rule": "self == oldSelf"
                                    }
                                  ]
                                },
                                "mountPath": {
                                  "description": "MountPath within the container at which the volume should be mounted.\nMust start by \"/\" and cannot contain ':'.",
                                  "type": "string"
                                },
                                "ref": {
                                  "description": "Reference to an existing field",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                }
                              },
                              "x-kubernetes-validations": [
                                {
                                  "message": "One selection is required between ref and create.",
                                  "rule": "[has(self.ref), has(self.create)].exists_one(c, c)"
                                },
                                {
                                  "message": "Mount path must start with '/' and must not contain ':'",
                                  "rule": "self.mountPath.matches('^/[^:]*$')"
                                }
                              ]
                            },
                            "s3_additional_kwargs": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-validations": [
                            {
                              "message": "Registry files must use absolute paths or be S3 ('s3://') or GS ('gs://') object store URIs.",
                              "rule": "(!has(self.pvc) && has(self.path)) ? (self.path.startsWith('/') || self.path.startsWith('s3://') || self.path.startsWith('gs://')) : true"
                            },
                            {
                              "message": "PVC path must be a file name only, with no slashes.",
                              "rule": "(has(self.pvc) && has(self.path)) ? !self.path.startsWith('/') : true"
                            },
                            {
                              "message": "PVC persistence does not support S3 or GS object store URIs.",
                              "rule": "(has(self.pvc) && has(self.path)) ? !(self.path.startsWith('s3://') || self.path.startsWith('gs://')) : true"
                            },
                            {
                              "message": "Additional S3 settings are available only for S3 object store URIs.",
                              "rule": "(has(self.s3_additional_kwargs) && has(self.path)) ? self.path.startsWith('s3://') : true"
                            }
                          ]
                        },
                        "store": {
                          "description": "RegistryDBStorePersistence configures the DB store persistence for the registry service",
                          "type": "object",
                          "required": [
                            "secretRef",
                            "type"
                          ],
                          "properties": {
                            "secretKeyName": {
                              "description": "By default, the selected store \"type\" is used as the SecretKeyName",
                              "type": "string"
                            },
                            "secretRef": {
                              "description": "Data store parameters should be placed as-is from the \"feature_store.yaml\" under the secret key.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "type": {
                              "description": "Type of the persistence type you want to use.",
                              "type": "string",
                              "enum": [
                                "sql",
                                "snowflake.registry"
                              ]
                            }
                          }
                        }
                      },
                      "x-kubernetes-validations": [
                        {
                          "message": "One selection required between file or store.",
                          "rule": "[has(self.file), has(self.store)].exists_one(c, c)"
                        }
                      ]
                    },
                    "server": {
                      "description": "Creates a registry server container",
                      "type": "object",
                      "properties": {
                        "env": {
                          "type": "array",
                          "items": {
                            "description": "EnvVar represents an environment variable present in a Container.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                                "type": "string"
                              },
                              "valueFrom": {
                                "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                "type": "object",
                                "properties": {
                                  "configMapKeyRef": {
                                    "description": "Selects a key of a ConfigMap.",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to select.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the ConfigMap or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "fieldRef": {
                                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                                    "type": "object",
                                    "required": [
                                      "fieldPath"
                                    ],
                                    "properties": {
                                      "apiVersion": {
                                        "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                        "type": "string"
                                      },
                                      "fieldPath": {
                                        "description": "Path of the field to select in the specified API version.",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "resourceFieldRef": {
                                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                                    "type": "object",
                                    "required": [
                                      "resource"
                                    ],
                                    "properties": {
                                      "containerName": {
                                        "description": "Container name: required for volumes, optional for env vars",
                                        "type": "string"
                                      },
                                      "divisor": {
                                        "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "resource": {
                                        "description": "Required: resource to select",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "secretKeyRef": {
                                    "description": "Selects a key of a secret in the pod's namespace",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the Secret or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "envFrom": {
                          "type": "array",
                          "items": {
                            "description": "EnvFromSource represents the source of a set of ConfigMaps",
                            "type": "object",
                            "properties": {
                              "configMapRef": {
                                "description": "The ConfigMap to select from",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "prefix": {
                                "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "secretRef": {
                                "description": "The Secret to select from",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          }
                        },
                        "image": {
                          "type": "string"
                        },
                        "imagePullPolicy": {
                          "description": "PullPolicy describes a policy for if/when to pull a container image",
                          "type": "string"
                        },
                        "logLevel": {
                          "description": "LogLevel sets the logging level for the server\nAllowed values: \"debug\", \"info\", \"warning\", \"error\", \"critical\".",
                          "type": "string",
                          "enum": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                          ]
                        },
                        "resources": {
                          "description": "ResourceRequirements describes the compute resource requirements.",
                          "type": "object",
                          "properties": {
                            "claims": {
                              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.",
                              "type": "array",
                              "items": {
                                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used.",
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-list-map-keys": [
                                "name"
                              ],
                              "x-kubernetes-list-type": "map"
                            },
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required.",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        },
                        "tls": {
                          "description": "TlsConfigs configures server TLS for a feast service.",
                          "type": "object",
                          "properties": {
                            "disable": {
                              "description": "will disable TLS for the feast service. useful in an openshift cluster, for example, where TLS is configured by default",
                              "type": "boolean"
                            },
                            "secretKeyNames": {
                              "description": "SecretKeyNames defines the secret key names for the TLS key and cert.",
                              "type": "object",
                              "properties": {
                                "tlsCrt": {
                                  "description": "defaults to \"tls.crt\"",
                                  "type": "string"
                                },
                                "tlsKey": {
                                  "description": "defaults to \"tls.key\"",
                                  "type": "string"
                                }
                              }
                            },
                            "secretRef": {
                              "description": "references the local k8s secret where the TLS key and cert reside",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            }
                          },
                          "x-kubernetes-validations": [
                            {
                              "message": "`secretRef` required if `disable` is false.",
                              "rule": "(!has(self.disable) || !self.disable) ? has(self.secretRef) : true"
                            }
                          ]
                        },
                        "volumeMounts": {
                          "description": "VolumeMounts defines the list of volumes that should be mounted into the feast container.",
                          "type": "array",
                          "items": {
                            "description": "VolumeMount describes a mounting of a Volume within a container.",
                            "type": "object",
                            "required": [
                              "mountPath",
                              "name"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                                "type": "string"
                              },
                              "mountPropagation": {
                                "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.",
                                "type": "string"
                              },
                              "name": {
                                "description": "This must match the Name of a Volume.",
                                "type": "string"
                              },
                              "readOnly": {
                                "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
                                "type": "boolean"
                              },
                              "recursiveReadOnly": {
                                "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.",
                                "type": "string"
                              },
                              "subPath": {
                                "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
                                "type": "string"
                              },
                              "subPathExpr": {
                                "description": "Expanded path within the volume from which the container's volume should be mounted.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "remote": {
                  "description": "RemoteRegistryConfig points to a remote feast registry server.",
                  "type": "object",
                  "properties": {
                    "feastRef": {
                      "description": "Reference to an existing `FeatureStore` CR in the same k8s cluster.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the FeatureStore",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the FeatureStore",
                          "type": "string"
                        }
                      }
                    },
                    "hostname": {
                      "description": "Host address of the remote registry service - <domain>:<port>, e.g. `registry.<namespace>.svc.cluster.local:80`",
                      "type": "string"
                    },
                    "tls": {
                      "description": "TlsRemoteRegistryConfigs configures client TLS for a remote feast registry.",
                      "type": "object",
                      "required": [
                        "certName",
                        "configMapRef"
                      ],
                      "properties": {
                        "certName": {
                          "description": "defines the configmap key name for the client TLS cert.",
                          "type": "string"
                        },
                        "configMapRef": {
                          "description": "references the local k8s configmap where the TLS cert resides",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        }
                      }
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "One selection required.",
                      "rule": "[has(self.hostname), has(self.feastRef)].exists_one(c, c)"
                    }
                  ]
                }
              },
              "x-kubernetes-validations": [
                {
                  "message": "One selection required.",
                  "rule": "[has(self.local), has(self.remote)].exists_one(c, c)"
                }
              ]
            },
            "ui": {
              "description": "Creates a UI server container",
              "type": "object",
              "properties": {
                "env": {
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                        "type": "string"
                      },
                      "valueFrom": {
                        "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                        "type": "object",
                        "properties": {
                          "configMapKeyRef": {
                            "description": "Selects a key of a ConfigMap.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "fieldRef": {
                            "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                            "type": "object",
                            "required": [
                              "fieldPath"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                "type": "string"
                              },
                              "fieldPath": {
                                "description": "Path of the field to select in the specified API version.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "resourceFieldRef": {
                            "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                            "type": "object",
                            "required": [
                              "resource"
                            ],
                            "properties": {
                              "containerName": {
                                "description": "Container name: required for volumes, optional for env vars",
                                "type": "string"
                              },
                              "divisor": {
                                "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "resource": {
                                "description": "Required: resource to select",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "secretKeyRef": {
                            "description": "Selects a key of a secret in the pod's namespace",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          }
                        }
                      }
                    }
                  }
                },
                "envFrom": {
                  "type": "array",
                  "items": {
                    "description": "EnvFromSource represents the source of a set of ConfigMaps",
                    "type": "object",
                    "properties": {
                      "configMapRef": {
                        "description": "The ConfigMap to select from",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the ConfigMap must be defined",
                            "type": "boolean"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "prefix": {
                        "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                        "type": "string"
                      },
                      "secretRef": {
                        "description": "The Secret to select from",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret must be defined",
                            "type": "boolean"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      }
                    }
                  }
                },
                "image": {
                  "type": "string"
                },
                "imagePullPolicy": {
                  "description": "PullPolicy describes a policy for if/when to pull a container image",
                  "type": "string"
                },
                "logLevel": {
                  "description": "LogLevel sets the logging level for the server\nAllowed values: \"debug\", \"info\", \"warning\", \"error\", \"critical\".",
                  "type": "string",
                  "enum": [
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical"
                  ]
                },
                "resources": {
                  "description": "ResourceRequirements describes the compute resource requirements.",
                  "type": "object",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.",
                      "type": "array",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used.",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required.",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                },
                "tls": {
                  "description": "TlsConfigs configures server TLS for a feast service.",
                  "type": "object",
                  "properties": {
                    "disable": {
                      "description": "will disable TLS for the feast service. useful in an openshift cluster, for example, where TLS is configured by default",
                      "type": "boolean"
                    },
                    "secretKeyNames": {
                      "description": "SecretKeyNames defines the secret key names for the TLS key and cert.",
                      "type": "object",
                      "properties": {
                        "tlsCrt": {
                          "description": "defaults to \"tls.crt\"",
                          "type": "string"
                        },
                        "tlsKey": {
                          "description": "defaults to \"tls.key\"",
                          "type": "string"
                        }
                      }
                    },
                    "secretRef": {
                      "description": "references the local k8s secret where the TLS key and cert reside",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                          "type": "string"
                        }
                      },
                      "x-kubernetes-map-type": "atomic"
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "`secretRef` required if `disable` is false.",
                      "rule": "(!has(self.disable) || !self.disable) ? has(self.secretRef) : true"
                    }
                  ]
                },
                "volumeMounts": {
                  "description": "VolumeMounts defines the list of volumes that should be mounted into the feast container.",
                  "type": "array",
                  "items": {
                    "description": "VolumeMount describes a mounting of a Volume within a container.",
                    "type": "object",
                    "required": [
                      "mountPath",
                      "name"
                    ],
                    "properties": {
                      "mountPath": {
                        "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                        "type": "string"
                      },
                      "mountPropagation": {
                        "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.",
                        "type": "string"
                      },
                      "name": {
                        "description": "This must match the Name of a Volume.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
                        "type": "boolean"
                      },
                      "recursiveReadOnly": {
                        "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.",
                        "type": "string"
                      },
                      "subPath": {
                        "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
                        "type": "string"
                      },
                      "subPathExpr": {
                        "description": "Expanded path within the volume from which the container's volume should be mounted.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "volumes": {
              "description": "Volumes specifies the volumes to mount in the FeatureStore deployment.",
              "type": "array",
              "items": {
                "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "awsElasticBlockStore": {
                    "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to th",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "fsType is the filesystem type of the volume that you want to mount.",
                        "type": "string"
                      },
                      "partition": {
                        "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "readOnly": {
                        "description": "readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.",
                        "type": "boolean"
                      },
                      "volumeID": {
                        "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.",
                        "type": "string"
                      }
                    }
                  },
                  "azureDisk": {
                    "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                    "type": "object",
                    "required": [
                      "diskName",
                      "diskURI"
                    ],
                    "properties": {
                      "cachingMode": {
                        "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.",
                        "type": "string"
                      },
                      "diskName": {
                        "description": "diskName is the Name of the data disk in the blob storage",
                        "type": "string"
                      },
                      "diskURI": {
                        "description": "diskURI is the URI of data disk in the blob storage",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage accoun",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      }
                    }
                  },
                  "azureFile": {
                    "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                    "type": "object",
                    "required": [
                      "secretName",
                      "shareName"
                    ],
                    "properties": {
                      "readOnly": {
                        "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretName": {
                        "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
                        "type": "string"
                      },
                      "shareName": {
                        "description": "shareName is the azure share Name",
                        "type": "string"
                      }
                    }
                  },
                  "cephfs": {
                    "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
                    "type": "object",
                    "required": [
                      "monitors"
                    ],
                    "properties": {
                      "monitors": {
                        "description": "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "path": {
                        "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretFile": {
                        "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.",
                        "type": "string"
                      },
                      "secretRef": {
                        "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "user": {
                        "description": "user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.",
                        "type": "string"
                      }
                    }
                  },
                  "cinder": {
                    "description": "cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "volumeID": {
                        "description": "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                        "type": "string"
                      }
                    }
                  },
                  "configMap": {
                    "description": "configMap represents a configMap that should populate this volume",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "defaultMode is optional: mode bits used to set permissions on created files by default.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volum",
                        "type": "array",
                        "items": {
                          "description": "Maps a string key to a path within a volume.",
                          "type": "object",
                          "required": [
                            "key",
                            "path"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the key to project.",
                              "type": "string"
                            },
                            "mode": {
                              "description": "mode is Optional: mode bits used to set permissions on this file.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.",
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "name": {
                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                        "type": "string"
                      },
                      "optional": {
                        "description": "optional specify whether the ConfigMap or its keys must be defined",
                        "type": "boolean"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "csi": {
                    "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta fea",
                    "type": "object",
                    "required": [
                      "driver"
                    ],
                    "properties": {
                      "driver": {
                        "description": "driver is the name of the CSI driver that handles this volume.",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".",
                        "type": "string"
                      },
                      "nodePublishSecretRef": {
                        "description": "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to c",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "readOnly": {
                        "description": "readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).",
                        "type": "boolean"
                      },
                      "volumeAttributes": {
                        "description": "volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "downwardAPI": {
                    "description": "downwardAPI represents downward API about the pod that should populate this volume",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "Optional: mode bits to use on created files by default.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "Items is a list of downward API volume file",
                        "type": "array",
                        "items": {
                          "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "fieldRef": {
                              "description": "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.",
                              "type": "object",
                              "required": [
                                "fieldPath"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": "string"
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "mode": {
                              "description": "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal valu",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path.",
                              "type": "string"
                            },
                            "resourceFieldRef": {
                              "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.",
                              "type": "object",
                              "required": [
                                "resource"
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": "string"
                                },
                                "divisor": {
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                  "x-kubernetes-int-or-string": true
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            }
                          }
                        },
                        "x-kubernetes-list-type": "atomic"
                      }
                    }
                  },
                  "emptyDir": {
                    "description": "emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.",
                    "type": "object",
                    "properties": {
                      "medium": {
                        "description": "medium represents what type of storage medium should back this directory.",
                        "type": "string"
                      },
                      "sizeLimit": {
                        "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume.",
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  },
                  "ephemeral": {
                    "description": "ephemeral represents a volume that is handled by a cluster storage driver.",
                    "type": "object",
                    "properties": {
                      "volumeClaimTemplate": {
                        "description": "Will be used to create a stand-alone PVC to provision the volume.",
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "metadata": {
                            "description": "May contain labels and annotations that will be copied into the PVC\nwhen creating it.",
                            "type": "object"
                          },
                          "spec": {
                            "description": "The specification for the PersistentVolumeClaim.",
                            "type": "object",
                            "properties": {
                              "accessModes": {
                                "description": "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "dataSource": {
                                "description": "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.",
                                "type": "object",
                                "required": [
                                  "kind",
                                  "name"
                                ],
                                "properties": {
                                  "apiGroup": {
                                    "description": "APIGroup is the group for the resource being referenced.",
                                    "type": "string"
                                  },
                                  "kind": {
                                    "description": "Kind is the type of resource being referenced",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name is the name of resource being referenced",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "dataSourceRef": {
                                "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired.",
                                "type": "object",
                                "required": [
                                  "kind",
                                  "name"
                                ],
                                "properties": {
                                  "apiGroup": {
                                    "description": "APIGroup is the group for the resource being referenced.",
                                    "type": "string"
                                  },
                                  "kind": {
                                    "description": "Kind is the type of resource being referenced",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name is the name of resource being referenced",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.",
                                    "type": "string"
                                  }
                                }
                              },
                              "resources": {
                                "description": "resources represents the minimum resources the volume should have.",
                                "type": "object",
                                "properties": {
                                  "limits": {
                                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                      "x-kubernetes-int-or-string": true
                                    }
                                  },
                                  "requests": {
                                    "description": "Requests describes the minimum amount of compute resources required.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                      "x-kubernetes-int-or-string": true
                                    }
                                  }
                                }
                              },
                              "selector": {
                                "description": "selector is a label query over volumes to consider for binding.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      }
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "storageClassName": {
                                "description": "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.",
                                "type": "string"
                              },
                              "volumeAttributesClassName": {
                                "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.",
                                "type": "string"
                              },
                              "volumeMode": {
                                "description": "volumeMode defines what type of volume is required by the claim.",
                                "type": "string"
                              },
                              "volumeName": {
                                "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "fc": {
                    "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
                    "type": "object",
                    "properties": {
                      "fsType": {
                        "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                        "type": "string"
                      },
                      "lun": {
                        "description": "lun is Optional: FC target lun number",
                        "type": "integer",
                        "format": "int32"
                      },
                      "readOnly": {
                        "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "targetWWNs": {
                        "description": "targetWWNs is Optional: FC target worldwide names (WWNs)",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "wwids": {
                        "description": "wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, ",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      }
                    }
                  },
                  "flexVolume": {
                    "description": "flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.",
                    "type": "object",
                    "required": [
                      "driver"
                    ],
                    "properties": {
                      "driver": {
                        "description": "driver is the name of the driver to use for this volume.",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                        "type": "string"
                      },
                      "options": {
                        "description": "options is Optional: this field holds extra command options if any.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "readOnly": {
                        "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugi",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      }
                    }
                  },
                  "flocker": {
                    "description": "flocker represents a Flocker volume attached to a kubelet's host machine.",
                    "type": "object",
                    "properties": {
                      "datasetName": {
                        "description": "datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker\nshould be considered as depreca",
                        "type": "string"
                      },
                      "datasetUUID": {
                        "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
                        "type": "string"
                      }
                    }
                  },
                  "gcePersistentDisk": {
                    "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the po",
                    "type": "object",
                    "required": [
                      "pdName"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "fsType is filesystem type of the volume that you want to mount.",
                        "type": "string"
                      },
                      "partition": {
                        "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "pdName": {
                        "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.",
                        "type": "boolean"
                      }
                    }
                  },
                  "gitRepo": {
                    "description": "gitRepo represents a git repository at a particular revision.\nDEPRECATED: GitRepo is deprecated.",
                    "type": "object",
                    "required": [
                      "repository"
                    ],
                    "properties": {
                      "directory": {
                        "description": "directory is the target directory name.\nMust not contain or start with '..'.  If '.",
                        "type": "string"
                      },
                      "repository": {
                        "description": "repository is the URL",
                        "type": "string"
                      },
                      "revision": {
                        "description": "revision is the commit hash for the specified revision.",
                        "type": "string"
                      }
                    }
                  },
                  "glusterfs": {
                    "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.",
                    "type": "object",
                    "required": [
                      "endpoints",
                      "path"
                    ],
                    "properties": {
                      "endpoints": {
                        "description": "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.",
                        "type": "string"
                      },
                      "path": {
                        "description": "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.",
                        "type": "boolean"
                      }
                    }
                  },
                  "hostPath": {
                    "description": "hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container.",
                    "type": "object",
                    "required": [
                      "path"
                    ],
                    "properties": {
                      "path": {
                        "description": "path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.",
                        "type": "string"
                      },
                      "type": {
                        "description": "type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                        "type": "string"
                      }
                    }
                  },
                  "iscsi": {
                    "description": "iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.",
                    "type": "object",
                    "required": [
                      "iqn",
                      "lun",
                      "targetPortal"
                    ],
                    "properties": {
                      "chapAuthDiscovery": {
                        "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
                        "type": "boolean"
                      },
                      "chapAuthSession": {
                        "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
                        "type": "boolean"
                      },
                      "fsType": {
                        "description": "fsType is the filesystem type of the volume that you want to mount.",
                        "type": "string"
                      },
                      "initiatorName": {
                        "description": "initiatorName is the custom iSCSI Initiator Name.",
                        "type": "string"
                      },
                      "iqn": {
                        "description": "iqn is the target iSCSI Qualified Name.",
                        "type": "string"
                      },
                      "iscsiInterface": {
                        "description": "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).",
                        "type": "string"
                      },
                      "lun": {
                        "description": "lun represents iSCSI Target Lun number.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "portals": {
                        "description": "portals is the iSCSI Target Portal List.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "readOnly": {
                        "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "targetPortal": {
                        "description": "targetPortal is iSCSI Target Portal.",
                        "type": "string"
                      }
                    }
                  },
                  "name": {
                    "description": "name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.",
                    "type": "string"
                  },
                  "nfs": {
                    "description": "nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.",
                    "type": "object",
                    "required": [
                      "path",
                      "server"
                    ],
                    "properties": {
                      "path": {
                        "description": "path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.",
                        "type": "boolean"
                      },
                      "server": {
                        "description": "server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.",
                        "type": "string"
                      }
                    }
                  },
                  "persistentVolumeClaim": {
                    "description": "persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.",
                    "type": "object",
                    "required": [
                      "claimName"
                    ],
                    "properties": {
                      "claimName": {
                        "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.",
                        "type": "boolean"
                      }
                    }
                  },
                  "photonPersistentDisk": {
                    "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "pdID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                        "type": "string"
                      },
                      "pdID": {
                        "description": "pdID is the ID that identifies Photon Controller persistent disk",
                        "type": "string"
                      }
                    }
                  },
                  "portworxVolume": {
                    "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "volumeID": {
                        "description": "volumeID uniquely identifies a Portworx volume",
                        "type": "string"
                      }
                    }
                  },
                  "projected": {
                    "description": "projected items for all in one resources secrets, configmaps, and downward API",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "defaultMode are the mode bits used to set permissions on created files by default.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "sources": {
                        "description": "sources is the list of volume projections",
                        "type": "array",
                        "items": {
                          "description": "Projection that may be projected along with other supported volume types",
                          "type": "object",
                          "properties": {
                            "clusterTrustBundle": {
                              "description": "ClusterTrustBundle allows a pod to access the `.spec.",
                              "type": "object",
                              "required": [
                                "path"
                              ],
                              "properties": {
                                "labelSelector": {
                                  "description": "Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.",
                                  "type": "object",
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "type": "array",
                                      "items": {
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "operator"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "matchLabels": {
                                      "description": "matchLabels is a map of {key,value} pairs.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "name": {
                                  "description": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.",
                                  "type": "boolean"
                                },
                                "path": {
                                  "description": "Relative path from the volume root to write the bundle.",
                                  "type": "string"
                                },
                                "signerName": {
                                  "description": "Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.",
                                  "type": "string"
                                }
                              }
                            },
                            "configMap": {
                              "description": "configMap information about the configMap data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volum",
                                  "type": "array",
                                  "items": {
                                    "description": "Maps a string key to a path within a volume.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "path"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "key is the key to project.",
                                        "type": "string"
                                      },
                                      "mode": {
                                        "description": "mode is Optional: mode bits used to set permissions on this file.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "name": {
                                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "optional specify whether the ConfigMap or its keys must be defined",
                                  "type": "boolean"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "downwardAPI": {
                              "description": "downwardAPI information about the downwardAPI data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "Items is a list of DownwardAPIVolume file",
                                  "type": "array",
                                  "items": {
                                    "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                                    "type": "object",
                                    "required": [
                                      "path"
                                    ],
                                    "properties": {
                                      "fieldRef": {
                                        "description": "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.",
                                        "type": "object",
                                        "required": [
                                          "fieldPath"
                                        ],
                                        "properties": {
                                          "apiVersion": {
                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                            "type": "string"
                                          },
                                          "fieldPath": {
                                            "description": "Path of the field to select in the specified API version.",
                                            "type": "string"
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "mode": {
                                        "description": "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal valu",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path.",
                                        "type": "string"
                                      },
                                      "resourceFieldRef": {
                                        "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.",
                                        "type": "object",
                                        "required": [
                                          "resource"
                                        ],
                                        "properties": {
                                          "containerName": {
                                            "description": "Container name: required for volumes, optional for env vars",
                                            "type": "string"
                                          },
                                          "divisor": {
                                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                            "x-kubernetes-int-or-string": true
                                          },
                                          "resource": {
                                            "description": "Required: resource to select",
                                            "type": "string"
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      }
                                    }
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "secret": {
                              "description": "secret information about the secret data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume a",
                                  "type": "array",
                                  "items": {
                                    "description": "Maps a string key to a path within a volume.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "path"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "key is the key to project.",
                                        "type": "string"
                                      },
                                      "mode": {
                                        "description": "mode is Optional: mode bits used to set permissions on this file.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "name": {
                                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "optional field specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "serviceAccountToken": {
                              "description": "serviceAccountToken is information about the serviceAccountToken data to project",
                              "type": "object",
                              "required": [
                                "path"
                              ],
                              "properties": {
                                "audience": {
                                  "description": "audience is the intended audience of the token.",
                                  "type": "string"
                                },
                                "expirationSeconds": {
                                  "description": "expirationSeconds is the requested duration of validity of the service\naccount token.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "path": {
                                  "description": "path is the path relative to the mount point of the file to project the\ntoken into.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "x-kubernetes-list-type": "atomic"
                      }
                    }
                  },
                  "quobyte": {
                    "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
                    "type": "object",
                    "required": [
                      "registry",
                      "volume"
                    ],
                    "properties": {
                      "group": {
                        "description": "group to map volume access to\nDefault is no group",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.",
                        "type": "boolean"
                      },
                      "registry": {
                        "description": "registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple ent",
                        "type": "string"
                      },
                      "tenant": {
                        "description": "tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by",
                        "type": "string"
                      },
                      "user": {
                        "description": "user to map volume access to\nDefaults to serivceaccount user",
                        "type": "string"
                      },
                      "volume": {
                        "description": "volume is a string that references an already created Quobyte volume by name.",
                        "type": "string"
                      }
                    }
                  },
                  "rbd": {
                    "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.",
                    "type": "object",
                    "required": [
                      "image",
                      "monitors"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "fsType is the filesystem type of the volume that you want to mount.",
                        "type": "string"
                      },
                      "image": {
                        "description": "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "keyring": {
                        "description": "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.",
                        "type": "string"
                      },
                      "monitors": {
                        "description": "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "pool": {
                        "description": "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "user": {
                        "description": "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      }
                    }
                  },
                  "scaleIO": {
                    "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
                    "type": "object",
                    "required": [
                      "gateway",
                      "secretRef",
                      "system"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                        "type": "string"
                      },
                      "gateway": {
                        "description": "gateway is the host address of the ScaleIO API Gateway.",
                        "type": "string"
                      },
                      "protectionDomain": {
                        "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "secretRef references to the secret for ScaleIO user and other\nsensitive information.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "sslEnabled": {
                        "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false",
                        "type": "boolean"
                      },
                      "storageMode": {
                        "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.",
                        "type": "string"
                      },
                      "storagePool": {
                        "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
                        "type": "string"
                      },
                      "system": {
                        "description": "system is the name of the storage system as configured in ScaleIO.",
                        "type": "string"
                      },
                      "volumeName": {
                        "description": "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.",
                        "type": "string"
                      }
                    }
                  },
                  "secret": {
                    "description": "secret represents a secret that should populate this volume.\nMore info: https://kubernetes.",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "defaultMode is Optional: mode bits used to set permissions on created files by default.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume a",
                        "type": "array",
                        "items": {
                          "description": "Maps a string key to a path within a volume.",
                          "type": "object",
                          "required": [
                            "key",
                            "path"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the key to project.",
                              "type": "string"
                            },
                            "mode": {
                              "description": "mode is Optional: mode bits used to set permissions on this file.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.",
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "optional": {
                        "description": "optional field specify whether the Secret or its keys must be defined",
                        "type": "boolean"
                      },
                      "secretName": {
                        "description": "secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.",
                        "type": "string"
                      }
                    }
                  },
                  "storageos": {
                    "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
                    "type": "object",
                    "properties": {
                      "fsType": {
                        "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "volumeName": {
                        "description": "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.",
                        "type": "string"
                      },
                      "volumeNamespace": {
                        "description": "volumeNamespace specifies the scope of the volume within StorageOS.",
                        "type": "string"
                      }
                    }
                  },
                  "vsphereVolume": {
                    "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "volumePath"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                        "type": "string"
                      },
                      "storagePolicyID": {
                        "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
                        "type": "string"
                      },
                      "storagePolicyName": {
                        "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
                        "type": "string"
                      },
                      "volumePath": {
                        "description": "volumePath is the path that identifies vSphere volume vmdk",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "status": {
      "description": "FeatureStoreStatus defines the observed state of FeatureStore",
      "type": "object",
      "properties": {
        "applied": {
          "description": "Shows the currently applied feast configuration, including any pertinent defaults",
          "type": "object",
          "required": [
            "feastProject"
          ],
          "properties": {
            "authz": {
              "description": "AuthzConfig defines the authorization settings for the deployed Feast services.",
              "type": "object",
              "properties": {
                "kubernetes": {
                  "description": "KubernetesAuthz provides a way to define the authorization settings using Kubernetes RBAC resources.\nhttps://kubernetes.",
                  "type": "object",
                  "properties": {
                    "roles": {
                      "description": "The Kubernetes RBAC roles to be deployed in the same namespace of the FeatureStore.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "oidc": {
                  "description": "OidcAuthz defines the authorization settings for deployments using an Open ID Connect identity provider.\nhttps://auth0.",
                  "type": "object",
                  "required": [
                    "secretRef"
                  ],
                  "properties": {
                    "secretRef": {
                      "description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                          "type": "string"
                        }
                      },
                      "x-kubernetes-map-type": "atomic"
                    }
                  }
                }
              },
              "x-kubernetes-validations": [
                {
                  "message": "One selection required between kubernetes or oidc.",
                  "rule": "[has(self.kubernetes), has(self.oidc)].exists_one(c, c)"
                }
              ]
            },
            "cronJob": {
              "description": "FeastCronJob defines a CronJob to execute against a Feature Store deployment.",
              "type": "object",
              "properties": {
                "concurrencyPolicy": {
                  "description": "Specifies how to treat concurrent executions of a Job.",
                  "type": "string"
                },
                "containerConfigs": {
                  "description": "CronJobContainerConfigs k8s container settings for the CronJob",
                  "type": "object",
                  "properties": {
                    "commands": {
                      "description": "Array of commands to be executed (in order) against a Feature Store deployment.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "env": {
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          }
                        }
                      }
                    },
                    "envFrom": {
                      "type": "array",
                      "items": {
                        "description": "EnvFromSource represents the source of a set of ConfigMaps",
                        "type": "object",
                        "properties": {
                          "configMapRef": {
                            "description": "The ConfigMap to select from",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "prefix": {
                            "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "secretRef": {
                            "description": "The Secret to select from",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          }
                        }
                      }
                    },
                    "image": {
                      "type": "string"
                    },
                    "imagePullPolicy": {
                      "description": "PullPolicy describes a policy for if/when to pull a container image",
                      "type": "string"
                    },
                    "resources": {
                      "description": "ResourceRequirements describes the compute resource requirements.",
                      "type": "object",
                      "properties": {
                        "claims": {
                          "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.",
                          "type": "array",
                          "items": {
                            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "limits": {
                          "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "requests": {
                          "description": "Requests describes the minimum amount of compute resources required.",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      }
                    }
                  }
                },
                "failedJobsHistoryLimit": {
                  "description": "The number of failed finished jobs to retain. Value must be non-negative integer.",
                  "type": "integer",
                  "format": "int32"
                },
                "jobSpec": {
                  "description": "Specification of the desired behavior of a job.",
                  "type": "object",
                  "properties": {
                    "activeDeadlineSeconds": {
                      "description": "Specifies the duration in seconds relative to the startTime that the job\nmay be continuously active before the system tr",
                      "type": "integer",
                      "format": "int64"
                    },
                    "backoffLimit": {
                      "description": "Specifies the number of retries before marking this job failed.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "backoffLimitPerIndex": {
                      "description": "Specifies the limit for the number of retries within an\nindex before marking this index as failed.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "completionMode": {
                      "description": "completionMode specifies how Pod completions are tracked. It can be\n`NonIndexed` (default) or `Indexed`.",
                      "type": "string"
                    },
                    "completions": {
                      "description": "Specifies the desired number of successfully finished pods the\njob should be run with.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "maxFailedIndexes": {
                      "description": "Specifies the maximal number of failed indexes before marking the Job as\nfailed, when backoffLimitPerIndex is set.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "parallelism": {
                      "description": "Specifies the maximum desired number of pods the job should\nrun at any given time.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "podFailurePolicy": {
                      "description": "Specifies the policy of handling failed pods.",
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "description": "A list of pod failure policy rules. The rules are evaluated in order.",
                          "type": "array",
                          "items": {
                            "description": "PodFailurePolicyRule describes how a pod failure is handled when the requirements are met.",
                            "type": "object",
                            "required": [
                              "action"
                            ],
                            "properties": {
                              "action": {
                                "description": "Specifies the action taken on a pod failure when the requirements are satisfied.",
                                "type": "string"
                              },
                              "onExitCodes": {
                                "description": "Represents the requirement on the container exit codes.",
                                "type": "object",
                                "required": [
                                  "operator",
                                  "values"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Restricts the check for exit codes to the container with the\nspecified name.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "Represents the relationship between the container exit code(s) and the\nspecified values.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "Specifies the set of values.",
                                    "type": "array",
                                    "items": {
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "x-kubernetes-list-type": "set"
                                  }
                                }
                              },
                              "onPodConditions": {
                                "description": "Represents the requirement on the pod conditions. The requirement is represented\nas a list of pod condition patterns.",
                                "type": "array",
                                "items": {
                                  "description": "PodFailurePolicyOnPodConditionsPattern describes a pattern for matching\nan actual pod condition type.",
                                  "type": "object",
                                  "required": [
                                    "status",
                                    "type"
                                  ],
                                  "properties": {
                                    "status": {
                                      "description": "Specifies the required Pod condition status.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Specifies the required Pod condition type.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "podReplacementPolicy": {
                      "description": "podReplacementPolicy specifies when to create replacement Pods.",
                      "type": "string"
                    },
                    "suspend": {
                      "description": "suspend specifies whether the Job controller should create Pods or not.",
                      "type": "boolean"
                    },
                    "ttlSecondsAfterFinished": {
                      "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished\nexecution (either Complete or Failed).",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "schedule": {
                  "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
                  "type": "string"
                },
                "startingDeadlineSeconds": {
                  "description": "Optional deadline in seconds for starting the job if it misses scheduled\ntime for any reason.",
                  "type": "integer",
                  "format": "int64"
                },
                "successfulJobsHistoryLimit": {
                  "description": "The number of successful finished jobs to retain. Value must be non-negative integer.",
                  "type": "integer",
                  "format": "int32"
                },
                "suspend": {
                  "description": "This flag tells the controller to suspend subsequent executions, it does\nnot apply to already started executions.",
                  "type": "boolean"
                },
                "timeZone": {
                  "description": "The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.",
                  "type": "string"
                }
              }
            },
            "feastProject": {
              "description": "FeastProject is the Feast project id.",
              "type": "string",
              "pattern": "^[A-Za-z0-9][A-Za-z0-9_]*$"
            },
            "feastProjectDir": {
              "description": "FeastProjectDir defines how to create the feast project directory.",
              "type": "object",
              "properties": {
                "git": {
                  "description": "GitCloneOptions describes how a clone should be performed.",
                  "type": "object",
                  "required": [
                    "url"
                  ],
                  "properties": {
                    "configs": {
                      "description": "Configs passed to git via `-c`\ne.g. http.sslVerify: 'false'\nOR 'url.\"https://api:\\${TOKEN}@github.com/\".",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "env": {
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          }
                        }
                      }
                    },
                    "envFrom": {
                      "type": "array",
                      "items": {
                        "description": "EnvFromSource represents the source of a set of ConfigMaps",
                        "type": "object",
                        "properties": {
                          "configMapRef": {
                            "description": "The ConfigMap to select from",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "prefix": {
                            "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "secretRef": {
                            "description": "The Secret to select from",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          }
                        }
                      }
                    },
                    "featureRepoPath": {
                      "description": "FeatureRepoPath is the relative path to the feature repo subdirectory. Default is 'feature_repo'.",
                      "type": "string"
                    },
                    "ref": {
                      "description": "Reference to a branch / tag / commit",
                      "type": "string"
                    },
                    "url": {
                      "description": "The repository URL to clone from.",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "RepoPath must be a file name only, with no slashes.",
                      "rule": "has(self.featureRepoPath) ? !self.featureRepoPath.startsWith('/') : true"
                    }
                  ]
                },
                "init": {
                  "description": "FeastInitOptions defines how to run a `feast init`.",
                  "type": "object",
                  "properties": {
                    "minimal": {
                      "type": "boolean"
                    },
                    "template": {
                      "description": "Template for the created project",
                      "type": "string",
                      "enum": [
                        "local",
                        "gcp",
                        "aws",
                        "snowflake",
                        "spark",
                        "postgres",
                        "hbase",
                        "cassandra",
                        "hazelcast",
                        "ikv",
                        "couchbase"
                      ]
                    }
                  }
                }
              },
              "x-kubernetes-validations": [
                {
                  "message": "One selection required between init or git.",
                  "rule": "[has(self.git), has(self.init)].exists_one(c, c)"
                }
              ]
            },
            "services": {
              "description": "FeatureStoreServices defines the desired feast services. An ephemeral onlineStore feature server is deployed by default.",
              "type": "object",
              "properties": {
                "deploymentStrategy": {
                  "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
                  "type": "object",
                  "properties": {
                    "rollingUpdate": {
                      "description": "Rolling update config params. Present only if DeploymentStrategyType =\nRollingUpdate.",
                      "type": "object",
                      "properties": {
                        "maxSurge": {
                          "description": "The maximum number of pods that can be scheduled above the desired number of\npods.",
                          "x-kubernetes-int-or-string": true
                        },
                        "maxUnavailable": {
                          "description": "The maximum number of pods that can be unavailable during the update.",
                          "x-kubernetes-int-or-string": true
                        }
                      }
                    },
                    "type": {
                      "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                      "type": "string"
                    }
                  }
                },
                "disableInitContainers": {
                  "description": "Disable the 'feast repo initialization' initContainer",
                  "type": "boolean"
                },
                "offlineStore": {
                  "description": "OfflineStore configures the offline store service",
                  "type": "object",
                  "properties": {
                    "persistence": {
                      "description": "OfflineStorePersistence configures the persistence settings for the offline store service",
                      "type": "object",
                      "properties": {
                        "file": {
                          "description": "OfflineStoreFilePersistence configures the file-based persistence for the offline store service",
                          "type": "object",
                          "properties": {
                            "pvc": {
                              "description": "PvcConfig defines the settings for a persistent file store based on PVCs.",
                              "type": "object",
                              "required": [
                                "mountPath"
                              ],
                              "properties": {
                                "create": {
                                  "description": "Settings for creating a new PVC",
                                  "type": "object",
                                  "properties": {
                                    "accessModes": {
                                      "description": "AccessModes k8s persistent volume access modes. Defaults to [\"ReadWriteOnce\"].",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "resources": {
                                      "description": "Resources describes the storage resource requirements for a volume.",
                                      "type": "object",
                                      "properties": {
                                        "limits": {
                                          "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                            "x-kubernetes-int-or-string": true
                                          }
                                        },
                                        "requests": {
                                          "description": "Requests describes the minimum amount of compute resources required.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                            "x-kubernetes-int-or-string": true
                                          }
                                        }
                                      }
                                    },
                                    "storageClassName": {
                                      "description": "StorageClassName is the name of an existing StorageClass to which this persistent volume belongs.",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-validations": [
                                    {
                                      "message": "PvcCreate is immutable",
                                      "rule": "self == oldSelf"
                                    }
                                  ]
                                },
                                "mountPath": {
                                  "description": "MountPath within the container at which the volume should be mounted.\nMust start by \"/\" and cannot contain ':'.",
                                  "type": "string"
                                },
                                "ref": {
                                  "description": "Reference to an existing field",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                }
                              },
                              "x-kubernetes-validations": [
                                {
                                  "message": "One selection is required between ref and create.",
                                  "rule": "[has(self.ref), has(self.create)].exists_one(c, c)"
                                },
                                {
                                  "message": "Mount path must start with '/' and must not contain ':'",
                                  "rule": "self.mountPath.matches('^/[^:]*$')"
                                }
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "file",
                                "dask",
                                "duckdb"
                              ]
                            }
                          }
                        },
                        "store": {
                          "description": "OfflineStoreDBStorePersistence configures the DB store persistence for the offline store service",
                          "type": "object",
                          "required": [
                            "secretRef",
                            "type"
                          ],
                          "properties": {
                            "secretKeyName": {
                              "description": "By default, the selected store \"type\" is used as the SecretKeyName",
                              "type": "string"
                            },
                            "secretRef": {
                              "description": "Data store parameters should be placed as-is from the \"feature_store.yaml\" under the secret key.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "type": {
                              "description": "Type of the persistence type you want to use.",
                              "type": "string",
                              "enum": [
                                "snowflake.offline",
                                "bigquery",
                                "redshift",
                                "spark",
                                "postgres",
                                "trino",
                                "athena",
                                "mssql",
                                "couchbase.offline"
                              ]
                            }
                          }
                        }
                      },
                      "x-kubernetes-validations": [
                        {
                          "message": "One selection required between file or store.",
                          "rule": "[has(self.file), has(self.store)].exists_one(c, c)"
                        }
                      ]
                    },
                    "server": {
                      "description": "Creates a remote offline server container",
                      "type": "object",
                      "properties": {
                        "env": {
                          "type": "array",
                          "items": {
                            "description": "EnvVar represents an environment variable present in a Container.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                                "type": "string"
                              },
                              "valueFrom": {
                                "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                "type": "object",
                                "properties": {
                                  "configMapKeyRef": {
                                    "description": "Selects a key of a ConfigMap.",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to select.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the ConfigMap or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "fieldRef": {
                                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                                    "type": "object",
                                    "required": [
                                      "fieldPath"
                                    ],
                                    "properties": {
                                      "apiVersion": {
                                        "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                        "type": "string"
                                      },
                                      "fieldPath": {
                                        "description": "Path of the field to select in the specified API version.",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "resourceFieldRef": {
                                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                                    "type": "object",
                                    "required": [
                                      "resource"
                                    ],
                                    "properties": {
                                      "containerName": {
                                        "description": "Container name: required for volumes, optional for env vars",
                                        "type": "string"
                                      },
                                      "divisor": {
                                        "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "resource": {
                                        "description": "Required: resource to select",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "secretKeyRef": {
                                    "description": "Selects a key of a secret in the pod's namespace",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the Secret or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "envFrom": {
                          "type": "array",
                          "items": {
                            "description": "EnvFromSource represents the source of a set of ConfigMaps",
                            "type": "object",
                            "properties": {
                              "configMapRef": {
                                "description": "The ConfigMap to select from",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "prefix": {
                                "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "secretRef": {
                                "description": "The Secret to select from",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          }
                        },
                        "image": {
                          "type": "string"
                        },
                        "imagePullPolicy": {
                          "description": "PullPolicy describes a policy for if/when to pull a container image",
                          "type": "string"
                        },
                        "logLevel": {
                          "description": "LogLevel sets the logging level for the server\nAllowed values: \"debug\", \"info\", \"warning\", \"error\", \"critical\".",
                          "type": "string",
                          "enum": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                          ]
                        },
                        "resources": {
                          "description": "ResourceRequirements describes the compute resource requirements.",
                          "type": "object",
                          "properties": {
                            "claims": {
                              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.",
                              "type": "array",
                              "items": {
                                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used.",
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-list-map-keys": [
                                "name"
                              ],
                              "x-kubernetes-list-type": "map"
                            },
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required.",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        },
                        "tls": {
                          "description": "TlsConfigs configures server TLS for a feast service.",
                          "type": "object",
                          "properties": {
                            "disable": {
                              "description": "will disable TLS for the feast service. useful in an openshift cluster, for example, where TLS is configured by default",
                              "type": "boolean"
                            },
                            "secretKeyNames": {
                              "description": "SecretKeyNames defines the secret key names for the TLS key and cert.",
                              "type": "object",
                              "properties": {
                                "tlsCrt": {
                                  "description": "defaults to \"tls.crt\"",
                                  "type": "string"
                                },
                                "tlsKey": {
                                  "description": "defaults to \"tls.key\"",
                                  "type": "string"
                                }
                              }
                            },
                            "secretRef": {
                              "description": "references the local k8s secret where the TLS key and cert reside",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            }
                          },
                          "x-kubernetes-validations": [
                            {
                              "message": "`secretRef` required if `disable` is false.",
                              "rule": "(!has(self.disable) || !self.disable) ? has(self.secretRef) : true"
                            }
                          ]
                        },
                        "volumeMounts": {
                          "description": "VolumeMounts defines the list of volumes that should be mounted into the feast container.",
                          "type": "array",
                          "items": {
                            "description": "VolumeMount describes a mounting of a Volume within a container.",
                            "type": "object",
                            "required": [
                              "mountPath",
                              "name"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                                "type": "string"
                              },
                              "mountPropagation": {
                                "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.",
                                "type": "string"
                              },
                              "name": {
                                "description": "This must match the Name of a Volume.",
                                "type": "string"
                              },
                              "readOnly": {
                                "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
                                "type": "boolean"
                              },
                              "recursiveReadOnly": {
                                "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.",
                                "type": "string"
                              },
                              "subPath": {
                                "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
                                "type": "string"
                              },
                              "subPathExpr": {
                                "description": "Expanded path within the volume from which the container's volume should be mounted.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "onlineStore": {
                  "description": "OnlineStore configures the online store service",
                  "type": "object",
                  "properties": {
                    "persistence": {
                      "description": "OnlineStorePersistence configures the persistence settings for the online store service",
                      "type": "object",
                      "properties": {
                        "file": {
                          "description": "OnlineStoreFilePersistence configures the file-based persistence for the online store service",
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string"
                            },
                            "pvc": {
                              "description": "PvcConfig defines the settings for a persistent file store based on PVCs.",
                              "type": "object",
                              "required": [
                                "mountPath"
                              ],
                              "properties": {
                                "create": {
                                  "description": "Settings for creating a new PVC",
                                  "type": "object",
                                  "properties": {
                                    "accessModes": {
                                      "description": "AccessModes k8s persistent volume access modes. Defaults to [\"ReadWriteOnce\"].",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "resources": {
                                      "description": "Resources describes the storage resource requirements for a volume.",
                                      "type": "object",
                                      "properties": {
                                        "limits": {
                                          "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                            "x-kubernetes-int-or-string": true
                                          }
                                        },
                                        "requests": {
                                          "description": "Requests describes the minimum amount of compute resources required.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                            "x-kubernetes-int-or-string": true
                                          }
                                        }
                                      }
                                    },
                                    "storageClassName": {
                                      "description": "StorageClassName is the name of an existing StorageClass to which this persistent volume belongs.",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-validations": [
                                    {
                                      "message": "PvcCreate is immutable",
                                      "rule": "self == oldSelf"
                                    }
                                  ]
                                },
                                "mountPath": {
                                  "description": "MountPath within the container at which the volume should be mounted.\nMust start by \"/\" and cannot contain ':'.",
                                  "type": "string"
                                },
                                "ref": {
                                  "description": "Reference to an existing field",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                }
                              },
                              "x-kubernetes-validations": [
                                {
                                  "message": "One selection is required between ref and create.",
                                  "rule": "[has(self.ref), has(self.create)].exists_one(c, c)"
                                },
                                {
                                  "message": "Mount path must start with '/' and must not contain ':'",
                                  "rule": "self.mountPath.matches('^/[^:]*$')"
                                }
                              ]
                            }
                          },
                          "x-kubernetes-validations": [
                            {
                              "message": "Ephemeral stores must have absolute paths.",
                              "rule": "(!has(self.pvc) && has(self.path)) ? self.path.startsWith('/') : true"
                            },
                            {
                              "message": "PVC path must be a file name only, with no slashes.",
                              "rule": "(has(self.pvc) && has(self.path)) ? !self.path.startsWith('/') : true"
                            },
                            {
                              "message": "Online store does not support S3 or GS buckets.",
                              "rule": "has(self.path) ? !(self.path.startsWith('s3://') || self.path.startsWith('gs://')) : true"
                            }
                          ]
                        },
                        "store": {
                          "description": "OnlineStoreDBStorePersistence configures the DB store persistence for the online store service",
                          "type": "object",
                          "required": [
                            "secretRef",
                            "type"
                          ],
                          "properties": {
                            "secretKeyName": {
                              "description": "By default, the selected store \"type\" is used as the SecretKeyName",
                              "type": "string"
                            },
                            "secretRef": {
                              "description": "Data store parameters should be placed as-is from the \"feature_store.yaml\" under the secret key.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "type": {
                              "description": "Type of the persistence type you want to use.",
                              "type": "string",
                              "enum": [
                                "snowflake.online",
                                "redis",
                                "ikv",
                                "datastore",
                                "dynamodb",
                                "bigtable",
                                "postgres",
                                "cassandra",
                                "mysql",
                                "hazelcast",
                                "singlestore",
                                "hbase",
                                "elasticsearch",
                                "qdrant",
                                "couchbase.online",
                                "milvus"
                              ]
                            }
                          }
                        }
                      },
                      "x-kubernetes-validations": [
                        {
                          "message": "One selection required between file or store.",
                          "rule": "[has(self.file), has(self.store)].exists_one(c, c)"
                        }
                      ]
                    },
                    "server": {
                      "description": "Creates a feature server container",
                      "type": "object",
                      "properties": {
                        "env": {
                          "type": "array",
                          "items": {
                            "description": "EnvVar represents an environment variable present in a Container.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                                "type": "string"
                              },
                              "valueFrom": {
                                "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                "type": "object",
                                "properties": {
                                  "configMapKeyRef": {
                                    "description": "Selects a key of a ConfigMap.",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to select.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the ConfigMap or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "fieldRef": {
                                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                                    "type": "object",
                                    "required": [
                                      "fieldPath"
                                    ],
                                    "properties": {
                                      "apiVersion": {
                                        "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                        "type": "string"
                                      },
                                      "fieldPath": {
                                        "description": "Path of the field to select in the specified API version.",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "resourceFieldRef": {
                                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                                    "type": "object",
                                    "required": [
                                      "resource"
                                    ],
                                    "properties": {
                                      "containerName": {
                                        "description": "Container name: required for volumes, optional for env vars",
                                        "type": "string"
                                      },
                                      "divisor": {
                                        "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "resource": {
                                        "description": "Required: resource to select",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "secretKeyRef": {
                                    "description": "Selects a key of a secret in the pod's namespace",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the Secret or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "envFrom": {
                          "type": "array",
                          "items": {
                            "description": "EnvFromSource represents the source of a set of ConfigMaps",
                            "type": "object",
                            "properties": {
                              "configMapRef": {
                                "description": "The ConfigMap to select from",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "prefix": {
                                "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "secretRef": {
                                "description": "The Secret to select from",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          }
                        },
                        "image": {
                          "type": "string"
                        },
                        "imagePullPolicy": {
                          "description": "PullPolicy describes a policy for if/when to pull a container image",
                          "type": "string"
                        },
                        "logLevel": {
                          "description": "LogLevel sets the logging level for the server\nAllowed values: \"debug\", \"info\", \"warning\", \"error\", \"critical\".",
                          "type": "string",
                          "enum": [
                            "debug",
                            "info",
                            "warning",
                            "error",
                            "critical"
                          ]
                        },
                        "resources": {
                          "description": "ResourceRequirements describes the compute resource requirements.",
                          "type": "object",
                          "properties": {
                            "claims": {
                              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.",
                              "type": "array",
                              "items": {
                                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used.",
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-list-map-keys": [
                                "name"
                              ],
                              "x-kubernetes-list-type": "map"
                            },
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required.",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        },
                        "tls": {
                          "description": "TlsConfigs configures server TLS for a feast service.",
                          "type": "object",
                          "properties": {
                            "disable": {
                              "description": "will disable TLS for the feast service. useful in an openshift cluster, for example, where TLS is configured by default",
                              "type": "boolean"
                            },
                            "secretKeyNames": {
                              "description": "SecretKeyNames defines the secret key names for the TLS key and cert.",
                              "type": "object",
                              "properties": {
                                "tlsCrt": {
                                  "description": "defaults to \"tls.crt\"",
                                  "type": "string"
                                },
                                "tlsKey": {
                                  "description": "defaults to \"tls.key\"",
                                  "type": "string"
                                }
                              }
                            },
                            "secretRef": {
                              "description": "references the local k8s secret where the TLS key and cert reside",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            }
                          },
                          "x-kubernetes-validations": [
                            {
                              "message": "`secretRef` required if `disable` is false.",
                              "rule": "(!has(self.disable) || !self.disable) ? has(self.secretRef) : true"
                            }
                          ]
                        },
                        "volumeMounts": {
                          "description": "VolumeMounts defines the list of volumes that should be mounted into the feast container.",
                          "type": "array",
                          "items": {
                            "description": "VolumeMount describes a mounting of a Volume within a container.",
                            "type": "object",
                            "required": [
                              "mountPath",
                              "name"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                                "type": "string"
                              },
                              "mountPropagation": {
                                "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.",
                                "type": "string"
                              },
                              "name": {
                                "description": "This must match the Name of a Volume.",
                                "type": "string"
                              },
                              "readOnly": {
                                "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
                                "type": "boolean"
                              },
                              "recursiveReadOnly": {
                                "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.",
                                "type": "string"
                              },
                              "subPath": {
                                "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
                                "type": "string"
                              },
                              "subPathExpr": {
                                "description": "Expanded path within the volume from which the container's volume should be mounted.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "registry": {
                  "description": "Registry configures the registry service. One selection is required. Local is the default setting.",
                  "type": "object",
                  "properties": {
                    "local": {
                      "description": "LocalRegistryConfig configures the registry service",
                      "type": "object",
                      "properties": {
                        "persistence": {
                          "description": "RegistryPersistence configures the persistence settings for the registry service",
                          "type": "object",
                          "properties": {
                            "file": {
                              "description": "RegistryFilePersistence configures the file-based persistence for the registry service",
                              "type": "object",
                              "properties": {
                                "path": {
                                  "type": "string"
                                },
                                "pvc": {
                                  "description": "PvcConfig defines the settings for a persistent file store based on PVCs.",
                                  "type": "object",
                                  "required": [
                                    "mountPath"
                                  ],
                                  "properties": {
                                    "create": {
                                      "description": "Settings for creating a new PVC",
                                      "type": "object",
                                      "properties": {
                                        "accessModes": {
                                          "description": "AccessModes k8s persistent volume access modes. Defaults to [\"ReadWriteOnce\"].",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "resources": {
                                          "description": "Resources describes the storage resource requirements for a volume.",
                                          "type": "object",
                                          "properties": {
                                            "limits": {
                                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "x-kubernetes-int-or-string": true
                                              }
                                            },
                                            "requests": {
                                              "description": "Requests describes the minimum amount of compute resources required.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "x-kubernetes-int-or-string": true
                                              }
                                            }
                                          }
                                        },
                                        "storageClassName": {
                                          "description": "StorageClassName is the name of an existing StorageClass to which this persistent volume belongs.",
                                          "type": "string"
                                        }
                                      },
                                      "x-kubernetes-validations": [
                                        {
                                          "message": "PvcCreate is immutable",
                                          "rule": "self == oldSelf"
                                        }
                                      ]
                                    },
                                    "mountPath": {
                                      "description": "MountPath within the container at which the volume should be mounted.\nMust start by \"/\" and cannot contain ':'.",
                                      "type": "string"
                                    },
                                    "ref": {
                                      "description": "Reference to an existing field",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                          "type": "string"
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    }
                                  },
                                  "x-kubernetes-validations": [
                                    {
                                      "message": "One selection is required between ref and create.",
                                      "rule": "[has(self.ref), has(self.create)].exists_one(c, c)"
                                    },
                                    {
                                      "message": "Mount path must start with '/' and must not contain ':'",
                                      "rule": "self.mountPath.matches('^/[^:]*$')"
                                    }
                                  ]
                                },
                                "s3_additional_kwargs": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-validations": [
                                {
                                  "message": "Registry files must use absolute paths or be S3 ('s3://') or GS ('gs://') object store URIs.",
                                  "rule": "(!has(self.pvc) && has(self.path)) ? (self.path.startsWith('/') || self.path.startsWith('s3://') || self.path.startsWith('gs://')) : true"
                                },
                                {
                                  "message": "PVC path must be a file name only, with no slashes.",
                                  "rule": "(has(self.pvc) && has(self.path)) ? !self.path.startsWith('/') : true"
                                },
                                {
                                  "message": "PVC persistence does not support S3 or GS object store URIs.",
                                  "rule": "(has(self.pvc) && has(self.path)) ? !(self.path.startsWith('s3://') || self.path.startsWith('gs://')) : true"
                                },
                                {
                                  "message": "Additional S3 settings are available only for S3 object store URIs.",
                                  "rule": "(has(self.s3_additional_kwargs) && has(self.path)) ? self.path.startsWith('s3://') : true"
                                }
                              ]
                            },
                            "store": {
                              "description": "RegistryDBStorePersistence configures the DB store persistence for the registry service",
                              "type": "object",
                              "required": [
                                "secretRef",
                                "type"
                              ],
                              "properties": {
                                "secretKeyName": {
                                  "description": "By default, the selected store \"type\" is used as the SecretKeyName",
                                  "type": "string"
                                },
                                "secretRef": {
                                  "description": "Data store parameters should be placed as-is from the \"feature_store.yaml\" under the secret key.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "type": {
                                  "description": "Type of the persistence type you want to use.",
                                  "type": "string",
                                  "enum": [
                                    "sql",
                                    "snowflake.registry"
                                  ]
                                }
                              }
                            }
                          },
                          "x-kubernetes-validations": [
                            {
                              "message": "One selection required between file or store.",
                              "rule": "[has(self.file), has(self.store)].exists_one(c, c)"
                            }
                          ]
                        },
                        "server": {
                          "description": "Creates a registry server container",
                          "type": "object",
                          "properties": {
                            "env": {
                              "type": "array",
                              "items": {
                                "description": "EnvVar represents an environment variable present in a Container.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                                    "type": "string"
                                  },
                                  "valueFrom": {
                                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                    "type": "object",
                                    "properties": {
                                      "configMapKeyRef": {
                                        "description": "Selects a key of a ConfigMap.",
                                        "type": "object",
                                        "required": [
                                          "key"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "The key to select.",
                                            "type": "string"
                                          },
                                          "name": {
                                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                            "type": "string"
                                          },
                                          "optional": {
                                            "description": "Specify whether the ConfigMap or its key must be defined",
                                            "type": "boolean"
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "fieldRef": {
                                        "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                                        "type": "object",
                                        "required": [
                                          "fieldPath"
                                        ],
                                        "properties": {
                                          "apiVersion": {
                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                            "type": "string"
                                          },
                                          "fieldPath": {
                                            "description": "Path of the field to select in the specified API version.",
                                            "type": "string"
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "resourceFieldRef": {
                                        "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                                        "type": "object",
                                        "required": [
                                          "resource"
                                        ],
                                        "properties": {
                                          "containerName": {
                                            "description": "Container name: required for volumes, optional for env vars",
                                            "type": "string"
                                          },
                                          "divisor": {
                                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                            "x-kubernetes-int-or-string": true
                                          },
                                          "resource": {
                                            "description": "Required: resource to select",
                                            "type": "string"
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "secretKeyRef": {
                                        "description": "Selects a key of a secret in the pod's namespace",
                                        "type": "object",
                                        "required": [
                                          "key"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                                            "type": "string"
                                          },
                                          "name": {
                                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                            "type": "string"
                                          },
                                          "optional": {
                                            "description": "Specify whether the Secret or its key must be defined",
                                            "type": "boolean"
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "envFrom": {
                              "type": "array",
                              "items": {
                                "description": "EnvFromSource represents the source of a set of ConfigMaps",
                                "type": "object",
                                "properties": {
                                  "configMapRef": {
                                    "description": "The ConfigMap to select from",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the ConfigMap must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "prefix": {
                                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                                    "type": "string"
                                  },
                                  "secretRef": {
                                    "description": "The Secret to select from",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the Secret must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  }
                                }
                              }
                            },
                            "image": {
                              "type": "string"
                            },
                            "imagePullPolicy": {
                              "description": "PullPolicy describes a policy for if/when to pull a container image",
                              "type": "string"
                            },
                            "logLevel": {
                              "description": "LogLevel sets the logging level for the server\nAllowed values: \"debug\", \"info\", \"warning\", \"error\", \"critical\".",
                              "type": "string",
                              "enum": [
                                "debug",
                                "info",
                                "warning",
                                "error",
                                "critical"
                              ]
                            },
                            "resources": {
                              "description": "ResourceRequirements describes the compute resource requirements.",
                              "type": "object",
                              "properties": {
                                "claims": {
                                  "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.",
                                  "type": "array",
                                  "items": {
                                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used.",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-list-map-keys": [
                                    "name"
                                  ],
                                  "x-kubernetes-list-type": "map"
                                },
                                "limits": {
                                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "x-kubernetes-int-or-string": true
                                  }
                                },
                                "requests": {
                                  "description": "Requests describes the minimum amount of compute resources required.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "x-kubernetes-int-or-string": true
                                  }
                                }
                              }
                            },
                            "tls": {
                              "description": "TlsConfigs configures server TLS for a feast service.",
                              "type": "object",
                              "properties": {
                                "disable": {
                                  "description": "will disable TLS for the feast service. useful in an openshift cluster, for example, where TLS is configured by default",
                                  "type": "boolean"
                                },
                                "secretKeyNames": {
                                  "description": "SecretKeyNames defines the secret key names for the TLS key and cert.",
                                  "type": "object",
                                  "properties": {
                                    "tlsCrt": {
                                      "description": "defaults to \"tls.crt\"",
                                      "type": "string"
                                    },
                                    "tlsKey": {
                                      "description": "defaults to \"tls.key\"",
                                      "type": "string"
                                    }
                                  }
                                },
                                "secretRef": {
                                  "description": "references the local k8s secret where the TLS key and cert reside",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                }
                              },
                              "x-kubernetes-validations": [
                                {
                                  "message": "`secretRef` required if `disable` is false.",
                                  "rule": "(!has(self.disable) || !self.disable) ? has(self.secretRef) : true"
                                }
                              ]
                            },
                            "volumeMounts": {
                              "description": "VolumeMounts defines the list of volumes that should be mounted into the feast container.",
                              "type": "array",
                              "items": {
                                "description": "VolumeMount describes a mounting of a Volume within a container.",
                                "type": "object",
                                "required": [
                                  "mountPath",
                                  "name"
                                ],
                                "properties": {
                                  "mountPath": {
                                    "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                                    "type": "string"
                                  },
                                  "mountPropagation": {
                                    "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "This must match the Name of a Volume.",
                                    "type": "string"
                                  },
                                  "readOnly": {
                                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
                                    "type": "boolean"
                                  },
                                  "recursiveReadOnly": {
                                    "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.",
                                    "type": "string"
                                  },
                                  "subPath": {
                                    "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
                                    "type": "string"
                                  },
                                  "subPathExpr": {
                                    "description": "Expanded path within the volume from which the container's volume should be mounted.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "remote": {
                      "description": "RemoteRegistryConfig points to a remote feast registry server.",
                      "type": "object",
                      "properties": {
                        "feastRef": {
                          "description": "Reference to an existing `FeatureStore` CR in the same k8s cluster.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the FeatureStore",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the FeatureStore",
                              "type": "string"
                            }
                          }
                        },
                        "hostname": {
                          "description": "Host address of the remote registry service - <domain>:<port>, e.g. `registry.<namespace>.svc.cluster.local:80`",
                          "type": "string"
                        },
                        "tls": {
                          "description": "TlsRemoteRegistryConfigs configures client TLS for a remote feast registry.",
                          "type": "object",
                          "required": [
                            "certName",
                            "configMapRef"
                          ],
                          "properties": {
                            "certName": {
                              "description": "defines the configmap key name for the client TLS cert.",
                              "type": "string"
                            },
                            "configMapRef": {
                              "description": "references the local k8s configmap where the TLS cert resides",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            }
                          }
                        }
                      },
                      "x-kubernetes-validations": [
                        {
                          "message": "One selection required.",
                          "rule": "[has(self.hostname), has(self.feastRef)].exists_one(c, c)"
                        }
                      ]
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "One selection required.",
                      "rule": "[has(self.local), has(self.remote)].exists_one(c, c)"
                    }
                  ]
                },
                "ui": {
                  "description": "Creates a UI server container",
                  "type": "object",
                  "properties": {
                    "env": {
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          }
                        }
                      }
                    },
                    "envFrom": {
                      "type": "array",
                      "items": {
                        "description": "EnvFromSource represents the source of a set of ConfigMaps",
                        "type": "object",
                        "properties": {
                          "configMapRef": {
                            "description": "The ConfigMap to select from",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "prefix": {
                            "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "secretRef": {
                            "description": "The Secret to select from",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          }
                        }
                      }
                    },
                    "image": {
                      "type": "string"
                    },
                    "imagePullPolicy": {
                      "description": "PullPolicy describes a policy for if/when to pull a container image",
                      "type": "string"
                    },
                    "logLevel": {
                      "description": "LogLevel sets the logging level for the server\nAllowed values: \"debug\", \"info\", \"warning\", \"error\", \"critical\".",
                      "type": "string",
                      "enum": [
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical"
                      ]
                    },
                    "resources": {
                      "description": "ResourceRequirements describes the compute resource requirements.",
                      "type": "object",
                      "properties": {
                        "claims": {
                          "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.",
                          "type": "array",
                          "items": {
                            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "limits": {
                          "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "requests": {
                          "description": "Requests describes the minimum amount of compute resources required.",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      }
                    },
                    "tls": {
                      "description": "TlsConfigs configures server TLS for a feast service.",
                      "type": "object",
                      "properties": {
                        "disable": {
                          "description": "will disable TLS for the feast service. useful in an openshift cluster, for example, where TLS is configured by default",
                          "type": "boolean"
                        },
                        "secretKeyNames": {
                          "description": "SecretKeyNames defines the secret key names for the TLS key and cert.",
                          "type": "object",
                          "properties": {
                            "tlsCrt": {
                              "description": "defaults to \"tls.crt\"",
                              "type": "string"
                            },
                            "tlsKey": {
                              "description": "defaults to \"tls.key\"",
                              "type": "string"
                            }
                          }
                        },
                        "secretRef": {
                          "description": "references the local k8s secret where the TLS key and cert reside",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        }
                      },
                      "x-kubernetes-validations": [
                        {
                          "message": "`secretRef` required if `disable` is false.",
                          "rule": "(!has(self.disable) || !self.disable) ? has(self.secretRef) : true"
                        }
                      ]
                    },
                    "volumeMounts": {
                      "description": "VolumeMounts defines the list of volumes that should be mounted into the feast container.",
                      "type": "array",
                      "items": {
                        "description": "VolumeMount describes a mounting of a Volume within a container.",
                        "type": "object",
                        "required": [
                          "mountPath",
                          "name"
                        ],
                        "properties": {
                          "mountPath": {
                            "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                            "type": "string"
                          },
                          "mountPropagation": {
                            "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.",
                            "type": "string"
                          },
                          "name": {
                            "description": "This must match the Name of a Volume.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
                            "type": "boolean"
                          },
                          "recursiveReadOnly": {
                            "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.",
                            "type": "string"
                          },
                          "subPath": {
                            "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
                            "type": "string"
                          },
                          "subPathExpr": {
                            "description": "Expanded path within the volume from which the container's volume should be mounted.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "volumes": {
                  "description": "Volumes specifies the volumes to mount in the FeatureStore deployment.",
                  "type": "array",
                  "items": {
                    "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "awsElasticBlockStore": {
                        "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to th",
                        "type": "object",
                        "required": [
                          "volumeID"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "fsType is the filesystem type of the volume that you want to mount.",
                            "type": "string"
                          },
                          "partition": {
                            "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "readOnly": {
                            "description": "readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.",
                            "type": "boolean"
                          },
                          "volumeID": {
                            "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.",
                            "type": "string"
                          }
                        }
                      },
                      "azureDisk": {
                        "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                        "type": "object",
                        "required": [
                          "diskName",
                          "diskURI"
                        ],
                        "properties": {
                          "cachingMode": {
                            "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.",
                            "type": "string"
                          },
                          "diskName": {
                            "description": "diskName is the Name of the data disk in the blob storage",
                            "type": "string"
                          },
                          "diskURI": {
                            "description": "diskURI is the URI of data disk in the blob storage",
                            "type": "string"
                          },
                          "fsType": {
                            "description": "fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage accoun",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          }
                        }
                      },
                      "azureFile": {
                        "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                        "type": "object",
                        "required": [
                          "secretName",
                          "shareName"
                        ],
                        "properties": {
                          "readOnly": {
                            "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "secretName": {
                            "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
                            "type": "string"
                          },
                          "shareName": {
                            "description": "shareName is the azure share Name",
                            "type": "string"
                          }
                        }
                      },
                      "cephfs": {
                        "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
                        "type": "object",
                        "required": [
                          "monitors"
                        ],
                        "properties": {
                          "monitors": {
                            "description": "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "path": {
                            "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "secretFile": {
                            "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.",
                            "type": "string"
                          },
                          "secretRef": {
                            "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "user": {
                            "description": "user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.",
                            "type": "string"
                          }
                        }
                      },
                      "cinder": {
                        "description": "cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.",
                        "type": "object",
                        "required": [
                          "volumeID"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "volumeID": {
                            "description": "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                            "type": "string"
                          }
                        }
                      },
                      "configMap": {
                        "description": "configMap represents a configMap that should populate this volume",
                        "type": "object",
                        "properties": {
                          "defaultMode": {
                            "description": "defaultMode is optional: mode bits used to set permissions on created files by default.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "items": {
                            "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volum",
                            "type": "array",
                            "items": {
                              "description": "Maps a string key to a path within a volume.",
                              "type": "object",
                              "required": [
                                "key",
                                "path"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the key to project.",
                                  "type": "string"
                                },
                                "mode": {
                                  "description": "mode is Optional: mode bits used to set permissions on this file.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "path": {
                                  "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.",
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "name": {
                            "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                            "type": "string"
                          },
                          "optional": {
                            "description": "optional specify whether the ConfigMap or its keys must be defined",
                            "type": "boolean"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "csi": {
                        "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta fea",
                        "type": "object",
                        "required": [
                          "driver"
                        ],
                        "properties": {
                          "driver": {
                            "description": "driver is the name of the CSI driver that handles this volume.",
                            "type": "string"
                          },
                          "fsType": {
                            "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".",
                            "type": "string"
                          },
                          "nodePublishSecretRef": {
                            "description": "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to c",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "readOnly": {
                            "description": "readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).",
                            "type": "boolean"
                          },
                          "volumeAttributes": {
                            "description": "volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "downwardAPI": {
                        "description": "downwardAPI represents downward API about the pod that should populate this volume",
                        "type": "object",
                        "properties": {
                          "defaultMode": {
                            "description": "Optional: mode bits to use on created files by default.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "items": {
                            "description": "Items is a list of downward API volume file",
                            "type": "array",
                            "items": {
                              "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                              "type": "object",
                              "required": [
                                "path"
                              ],
                              "properties": {
                                "fieldRef": {
                                  "description": "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.",
                                  "type": "object",
                                  "required": [
                                    "fieldPath"
                                  ],
                                  "properties": {
                                    "apiVersion": {
                                      "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                      "type": "string"
                                    },
                                    "fieldPath": {
                                      "description": "Path of the field to select in the specified API version.",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "mode": {
                                  "description": "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal valu",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "path": {
                                  "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path.",
                                  "type": "string"
                                },
                                "resourceFieldRef": {
                                  "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.",
                                  "type": "object",
                                  "required": [
                                    "resource"
                                  ],
                                  "properties": {
                                    "containerName": {
                                      "description": "Container name: required for volumes, optional for env vars",
                                      "type": "string"
                                    },
                                    "divisor": {
                                      "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "resource": {
                                      "description": "Required: resource to select",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        }
                      },
                      "emptyDir": {
                        "description": "emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.",
                        "type": "object",
                        "properties": {
                          "medium": {
                            "description": "medium represents what type of storage medium should back this directory.",
                            "type": "string"
                          },
                          "sizeLimit": {
                            "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume.",
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "ephemeral": {
                        "description": "ephemeral represents a volume that is handled by a cluster storage driver.",
                        "type": "object",
                        "properties": {
                          "volumeClaimTemplate": {
                            "description": "Will be used to create a stand-alone PVC to provision the volume.",
                            "type": "object",
                            "required": [
                              "spec"
                            ],
                            "properties": {
                              "metadata": {
                                "description": "May contain labels and annotations that will be copied into the PVC\nwhen creating it.",
                                "type": "object"
                              },
                              "spec": {
                                "description": "The specification for the PersistentVolumeClaim.",
                                "type": "object",
                                "properties": {
                                  "accessModes": {
                                    "description": "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "dataSource": {
                                    "description": "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.",
                                    "type": "object",
                                    "required": [
                                      "kind",
                                      "name"
                                    ],
                                    "properties": {
                                      "apiGroup": {
                                        "description": "APIGroup is the group for the resource being referenced.",
                                        "type": "string"
                                      },
                                      "kind": {
                                        "description": "Kind is the type of resource being referenced",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name is the name of resource being referenced",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "dataSourceRef": {
                                    "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired.",
                                    "type": "object",
                                    "required": [
                                      "kind",
                                      "name"
                                    ],
                                    "properties": {
                                      "apiGroup": {
                                        "description": "APIGroup is the group for the resource being referenced.",
                                        "type": "string"
                                      },
                                      "kind": {
                                        "description": "Kind is the type of resource being referenced",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name is the name of resource being referenced",
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "description": "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "resources": {
                                    "description": "resources represents the minimum resources the volume should have.",
                                    "type": "object",
                                    "properties": {
                                      "limits": {
                                        "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                          "x-kubernetes-int-or-string": true
                                        }
                                      },
                                      "requests": {
                                        "description": "Requests describes the minimum amount of compute resources required.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                          "x-kubernetes-int-or-string": true
                                        }
                                      }
                                    }
                                  },
                                  "selector": {
                                    "description": "selector is a label query over volumes to consider for binding.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "type": "array",
                                        "items": {
                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "key is the label key that the selector applies to.",
                                              "type": "string"
                                            },
                                            "operator": {
                                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                              "type": "string"
                                            },
                                            "values": {
                                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "x-kubernetes-list-type": "atomic"
                                            }
                                          }
                                        },
                                        "x-kubernetes-list-type": "atomic"
                                      },
                                      "matchLabels": {
                                        "description": "matchLabels is a map of {key,value} pairs.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "storageClassName": {
                                    "description": "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.",
                                    "type": "string"
                                  },
                                  "volumeAttributesClassName": {
                                    "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.",
                                    "type": "string"
                                  },
                                  "volumeMode": {
                                    "description": "volumeMode defines what type of volume is required by the claim.",
                                    "type": "string"
                                  },
                                  "volumeName": {
                                    "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "fc": {
                        "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
                        "type": "object",
                        "properties": {
                          "fsType": {
                            "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                            "type": "string"
                          },
                          "lun": {
                            "description": "lun is Optional: FC target lun number",
                            "type": "integer",
                            "format": "int32"
                          },
                          "readOnly": {
                            "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "targetWWNs": {
                            "description": "targetWWNs is Optional: FC target worldwide names (WWNs)",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "wwids": {
                            "description": "wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, ",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        }
                      },
                      "flexVolume": {
                        "description": "flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.",
                        "type": "object",
                        "required": [
                          "driver"
                        ],
                        "properties": {
                          "driver": {
                            "description": "driver is the name of the driver to use for this volume.",
                            "type": "string"
                          },
                          "fsType": {
                            "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                            "type": "string"
                          },
                          "options": {
                            "description": "options is Optional: this field holds extra command options if any.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "readOnly": {
                            "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugi",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          }
                        }
                      },
                      "flocker": {
                        "description": "flocker represents a Flocker volume attached to a kubelet's host machine.",
                        "type": "object",
                        "properties": {
                          "datasetName": {
                            "description": "datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker\nshould be considered as depreca",
                            "type": "string"
                          },
                          "datasetUUID": {
                            "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
                            "type": "string"
                          }
                        }
                      },
                      "gcePersistentDisk": {
                        "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the po",
                        "type": "object",
                        "required": [
                          "pdName"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "fsType is filesystem type of the volume that you want to mount.",
                            "type": "string"
                          },
                          "partition": {
                            "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "pdName": {
                            "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.",
                            "type": "boolean"
                          }
                        }
                      },
                      "gitRepo": {
                        "description": "gitRepo represents a git repository at a particular revision.\nDEPRECATED: GitRepo is deprecated.",
                        "type": "object",
                        "required": [
                          "repository"
                        ],
                        "properties": {
                          "directory": {
                            "description": "directory is the target directory name.\nMust not contain or start with '..'.  If '.",
                            "type": "string"
                          },
                          "repository": {
                            "description": "repository is the URL",
                            "type": "string"
                          },
                          "revision": {
                            "description": "revision is the commit hash for the specified revision.",
                            "type": "string"
                          }
                        }
                      },
                      "glusterfs": {
                        "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.",
                        "type": "object",
                        "required": [
                          "endpoints",
                          "path"
                        ],
                        "properties": {
                          "endpoints": {
                            "description": "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.",
                            "type": "string"
                          },
                          "path": {
                            "description": "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.",
                            "type": "boolean"
                          }
                        }
                      },
                      "hostPath": {
                        "description": "hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container.",
                        "type": "object",
                        "required": [
                          "path"
                        ],
                        "properties": {
                          "path": {
                            "description": "path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.",
                            "type": "string"
                          },
                          "type": {
                            "description": "type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                            "type": "string"
                          }
                        }
                      },
                      "iscsi": {
                        "description": "iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.",
                        "type": "object",
                        "required": [
                          "iqn",
                          "lun",
                          "targetPortal"
                        ],
                        "properties": {
                          "chapAuthDiscovery": {
                            "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
                            "type": "boolean"
                          },
                          "chapAuthSession": {
                            "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
                            "type": "boolean"
                          },
                          "fsType": {
                            "description": "fsType is the filesystem type of the volume that you want to mount.",
                            "type": "string"
                          },
                          "initiatorName": {
                            "description": "initiatorName is the custom iSCSI Initiator Name.",
                            "type": "string"
                          },
                          "iqn": {
                            "description": "iqn is the target iSCSI Qualified Name.",
                            "type": "string"
                          },
                          "iscsiInterface": {
                            "description": "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).",
                            "type": "string"
                          },
                          "lun": {
                            "description": "lun represents iSCSI Target Lun number.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "portals": {
                            "description": "portals is the iSCSI Target Portal List.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "readOnly": {
                            "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "targetPortal": {
                            "description": "targetPortal is iSCSI Target Portal.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.",
                        "type": "string"
                      },
                      "nfs": {
                        "description": "nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.",
                        "type": "object",
                        "required": [
                          "path",
                          "server"
                        ],
                        "properties": {
                          "path": {
                            "description": "path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.",
                            "type": "boolean"
                          },
                          "server": {
                            "description": "server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.",
                            "type": "string"
                          }
                        }
                      },
                      "persistentVolumeClaim": {
                        "description": "persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.",
                        "type": "object",
                        "required": [
                          "claimName"
                        ],
                        "properties": {
                          "claimName": {
                            "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.",
                            "type": "boolean"
                          }
                        }
                      },
                      "photonPersistentDisk": {
                        "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                        "type": "object",
                        "required": [
                          "pdID"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                            "type": "string"
                          },
                          "pdID": {
                            "description": "pdID is the ID that identifies Photon Controller persistent disk",
                            "type": "string"
                          }
                        }
                      },
                      "portworxVolume": {
                        "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
                        "type": "object",
                        "required": [
                          "volumeID"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "volumeID": {
                            "description": "volumeID uniquely identifies a Portworx volume",
                            "type": "string"
                          }
                        }
                      },
                      "projected": {
                        "description": "projected items for all in one resources secrets, configmaps, and downward API",
                        "type": "object",
                        "properties": {
                          "defaultMode": {
                            "description": "defaultMode are the mode bits used to set permissions on created files by default.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "sources": {
                            "description": "sources is the list of volume projections",
                            "type": "array",
                            "items": {
                              "description": "Projection that may be projected along with other supported volume types",
                              "type": "object",
                              "properties": {
                                "clusterTrustBundle": {
                                  "description": "ClusterTrustBundle allows a pod to access the `.spec.",
                                  "type": "object",
                                  "required": [
                                    "path"
                                  ],
                                  "properties": {
                                    "labelSelector": {
                                      "description": "Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              }
                                            }
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "name": {
                                      "description": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.",
                                      "type": "string"
                                    },
                                    "optional": {
                                      "description": "If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.",
                                      "type": "boolean"
                                    },
                                    "path": {
                                      "description": "Relative path from the volume root to write the bundle.",
                                      "type": "string"
                                    },
                                    "signerName": {
                                      "description": "Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "configMap": {
                                  "description": "configMap information about the configMap data to project",
                                  "type": "object",
                                  "properties": {
                                    "items": {
                                      "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volum",
                                      "type": "array",
                                      "items": {
                                        "description": "Maps a string key to a path within a volume.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "path"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "key is the key to project.",
                                            "type": "string"
                                          },
                                          "mode": {
                                            "description": "mode is Optional: mode bits used to set permissions on this file.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "path": {
                                            "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "name": {
                                      "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                      "type": "string"
                                    },
                                    "optional": {
                                      "description": "optional specify whether the ConfigMap or its keys must be defined",
                                      "type": "boolean"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "downwardAPI": {
                                  "description": "downwardAPI information about the downwardAPI data to project",
                                  "type": "object",
                                  "properties": {
                                    "items": {
                                      "description": "Items is a list of DownwardAPIVolume file",
                                      "type": "array",
                                      "items": {
                                        "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                                        "type": "object",
                                        "required": [
                                          "path"
                                        ],
                                        "properties": {
                                          "fieldRef": {
                                            "description": "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.",
                                            "type": "object",
                                            "required": [
                                              "fieldPath"
                                            ],
                                            "properties": {
                                              "apiVersion": {
                                                "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                                "type": "string"
                                              },
                                              "fieldPath": {
                                                "description": "Path of the field to select in the specified API version.",
                                                "type": "string"
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "mode": {
                                            "description": "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal valu",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "path": {
                                            "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path.",
                                            "type": "string"
                                          },
                                          "resourceFieldRef": {
                                            "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.",
                                            "type": "object",
                                            "required": [
                                              "resource"
                                            ],
                                            "properties": {
                                              "containerName": {
                                                "description": "Container name: required for volumes, optional for env vars",
                                                "type": "string"
                                              },
                                              "divisor": {
                                                "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "x-kubernetes-int-or-string": true
                                              },
                                              "resource": {
                                                "description": "Required: resource to select",
                                                "type": "string"
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  }
                                },
                                "secret": {
                                  "description": "secret information about the secret data to project",
                                  "type": "object",
                                  "properties": {
                                    "items": {
                                      "description": "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume a",
                                      "type": "array",
                                      "items": {
                                        "description": "Maps a string key to a path within a volume.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "path"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "key is the key to project.",
                                            "type": "string"
                                          },
                                          "mode": {
                                            "description": "mode is Optional: mode bits used to set permissions on this file.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "path": {
                                            "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "name": {
                                      "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                      "type": "string"
                                    },
                                    "optional": {
                                      "description": "optional field specify whether the Secret or its key must be defined",
                                      "type": "boolean"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "serviceAccountToken": {
                                  "description": "serviceAccountToken is information about the serviceAccountToken data to project",
                                  "type": "object",
                                  "required": [
                                    "path"
                                  ],
                                  "properties": {
                                    "audience": {
                                      "description": "audience is the intended audience of the token.",
                                      "type": "string"
                                    },
                                    "expirationSeconds": {
                                      "description": "expirationSeconds is the requested duration of validity of the service\naccount token.",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "path": {
                                      "description": "path is the path relative to the mount point of the file to project the\ntoken into.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        }
                      },
                      "quobyte": {
                        "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
                        "type": "object",
                        "required": [
                          "registry",
                          "volume"
                        ],
                        "properties": {
                          "group": {
                            "description": "group to map volume access to\nDefault is no group",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.",
                            "type": "boolean"
                          },
                          "registry": {
                            "description": "registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple ent",
                            "type": "string"
                          },
                          "tenant": {
                            "description": "tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by",
                            "type": "string"
                          },
                          "user": {
                            "description": "user to map volume access to\nDefaults to serivceaccount user",
                            "type": "string"
                          },
                          "volume": {
                            "description": "volume is a string that references an already created Quobyte volume by name.",
                            "type": "string"
                          }
                        }
                      },
                      "rbd": {
                        "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.",
                        "type": "object",
                        "required": [
                          "image",
                          "monitors"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "fsType is the filesystem type of the volume that you want to mount.",
                            "type": "string"
                          },
                          "image": {
                            "description": "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                            "type": "string"
                          },
                          "keyring": {
                            "description": "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.",
                            "type": "string"
                          },
                          "monitors": {
                            "description": "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "pool": {
                            "description": "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "user": {
                            "description": "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                            "type": "string"
                          }
                        }
                      },
                      "scaleIO": {
                        "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
                        "type": "object",
                        "required": [
                          "gateway",
                          "secretRef",
                          "system"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                            "type": "string"
                          },
                          "gateway": {
                            "description": "gateway is the host address of the ScaleIO API Gateway.",
                            "type": "string"
                          },
                          "protectionDomain": {
                            "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "secretRef references to the secret for ScaleIO user and other\nsensitive information.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "sslEnabled": {
                            "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false",
                            "type": "boolean"
                          },
                          "storageMode": {
                            "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.",
                            "type": "string"
                          },
                          "storagePool": {
                            "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
                            "type": "string"
                          },
                          "system": {
                            "description": "system is the name of the storage system as configured in ScaleIO.",
                            "type": "string"
                          },
                          "volumeName": {
                            "description": "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.",
                            "type": "string"
                          }
                        }
                      },
                      "secret": {
                        "description": "secret represents a secret that should populate this volume.\nMore info: https://kubernetes.",
                        "type": "object",
                        "properties": {
                          "defaultMode": {
                            "description": "defaultMode is Optional: mode bits used to set permissions on created files by default.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "items": {
                            "description": "items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume a",
                            "type": "array",
                            "items": {
                              "description": "Maps a string key to a path within a volume.",
                              "type": "object",
                              "required": [
                                "key",
                                "path"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the key to project.",
                                  "type": "string"
                                },
                                "mode": {
                                  "description": "mode is Optional: mode bits used to set permissions on this file.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "path": {
                                  "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.",
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "optional": {
                            "description": "optional field specify whether the Secret or its keys must be defined",
                            "type": "boolean"
                          },
                          "secretName": {
                            "description": "secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.",
                            "type": "string"
                          }
                        }
                      },
                      "storageos": {
                        "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
                        "type": "object",
                        "properties": {
                          "fsType": {
                            "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "volumeName": {
                            "description": "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.",
                            "type": "string"
                          },
                          "volumeNamespace": {
                            "description": "volumeNamespace specifies the scope of the volume within StorageOS.",
                            "type": "string"
                          }
                        }
                      },
                      "vsphereVolume": {
                        "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
                        "type": "object",
                        "required": [
                          "volumePath"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx.",
                            "type": "string"
                          },
                          "storagePolicyID": {
                            "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
                            "type": "string"
                          },
                          "storagePolicyName": {
                            "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
                            "type": "string"
                          },
                          "volumePath": {
                            "description": "volumePath is the path that identifies vSphere volume vmdk",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "clientConfigMap": {
          "description": "ConfigMap in this namespace containing a client `feature_store.yaml` for this feast deployment",
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          }
        },
        "cronJob": {
          "description": "CronJob in this namespace for this feast deployment",
          "type": "string"
        },
        "feastVersion": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "serviceHostnames": {
          "description": "ServiceHostnames defines the service hostnames in the format of <domain>:<port>, e.g. example.svc.cluster.local:80",
          "type": "object",
          "properties": {
            "offlineStore": {
              "type": "string"
            },
            "onlineStore": {
              "type": "string"
            },
            "registry": {
              "type": "string"
            },
            "ui": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "feast.dev",
      "kind": "FeatureStore",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}