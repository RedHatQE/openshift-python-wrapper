{
  "description": "MigPlan is the Schema for the migplans API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "MigPlanSpec defines the desired state of MigPlan",
      "type": "object",
      "properties": {
        "closed": {
          "description": "If the migration was successful for a migplan, this value can be set True indicating that after one successful migration no new migrations can be carried out for this migplan.",
          "type": "boolean"
        },
        "destMigClusterRef": {
          "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n---\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.\n 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular\n    restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".\n    Those cannot be well described when embedded.\n 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity\n    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple\n    and the version of the actual struct is irrelevant.\n 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type\n    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.\n\n\nInstead of using this type, create a locally provided and used type that is well-focused on your reference.\nFor example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "hooks": {
          "description": "Holds a reference to a MigHook along with the desired phase to run it in.",
          "type": "array",
          "items": {
            "description": "MigPlanHook hold a reference to a MigHook along with the desired phase to run it in",
            "type": "object",
            "required": [
              "executionNamespace",
              "phase",
              "reference",
              "serviceAccount"
            ],
            "properties": {
              "executionNamespace": {
                "description": "Holds the name of the namespace where hooks should be implemented.",
                "type": "string"
              },
              "phase": {
                "description": "Indicates the phase when the hooks will be executed. Acceptable values are: PreBackup, PostBackup, PreRestore, and PostRestore.",
                "type": "string"
              },
              "reference": {
                "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n---\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.\n 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular\n    restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".\n    Those cannot be well described when embedded.\n 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity\n    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple\n    and the version of the actual struct is irrelevant.\n 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type\n    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.\n\n\nInstead of using this type, create a locally provided and used type that is well-focused on your reference.\nFor example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
                "type": "object",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                  },
                  "fieldPath": {
                    "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                    "type": "string"
                  },
                  "resourceVersion": {
                    "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                    "type": "string"
                  },
                  "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "serviceAccount": {
                "description": "Holds the name of the service account to be used for running hooks.",
                "type": "string"
              }
            }
          }
        },
        "includedResources": {
          "description": "IncludedResources optional list of included resources in Velero Backup\nWhen not set, all the resources are included in the backup",
          "type": "array",
          "items": {
            "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying\nconcepts during lookup stages without having partially valid types",
            "type": "object",
            "required": [
              "group",
              "kind"
            ],
            "properties": {
              "group": {
                "type": "string"
              },
              "kind": {
                "type": "string"
              }
            }
          }
        },
        "indirectImageMigration": {
          "description": "If set True, disables direct image migrations.",
          "type": "boolean"
        },
        "indirectVolumeMigration": {
          "description": "If set True, disables direct volume migrations.",
          "type": "boolean"
        },
        "labelSelector": {
          "description": "LabelSelector optional label selector on the included resources in Velero Backup",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "liveMigrate": {
          "description": "LiveMigrate optional flag to enable live migration of VMs during direct volume migration\nOnly running VMs when the plan is executed will be live migrated",
          "type": "boolean"
        },
        "migStorageRef": {
          "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n---\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.\n 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular\n    restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".\n    Those cannot be well described when embedded.\n 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity\n    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple\n    and the version of the actual struct is irrelevant.\n 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type\n    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.\n\n\nInstead of using this type, create a locally provided and used type that is well-focused on your reference.\nFor example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "namespaces": {
          "description": "Holds names of all the namespaces to be included in migration.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "persistentVolumes": {
          "type": "array",
          "items": {
            "description": "Name - The PV name.\nCapacity - The PV storage capacity.\nStorageClass - The PV storage class name.\nSupported - Lists of what is supported.\nSelection - Choices made from supported.\nPVC - Associated PVC.\nNFS - NFS properties.\nstaged - A PV has been explicitly added/updated.",
            "type": "object",
            "required": [
              "selection",
              "supported"
            ],
            "properties": {
              "capacity": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              },
              "capacityConfirmed": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              },
              "proposedCapacity": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "x-kubernetes-int-or-string": true
              },
              "pvc": {
                "description": "PVC",
                "type": "object",
                "properties": {
                  "accessModes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "hasReference": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  },
                  "volumeMode": {
                    "description": "PersistentVolumeMode describes how a volume is intended to be consumed, either Block or Filesystem.",
                    "type": "string"
                  }
                }
              },
              "selection": {
                "description": "Selection\nAction - The PV migration action (move|copy|skip)\nStorageClass - The PV storage class name to use in the destination cluster.\nAccessMode   - The PV access mode to use in the destination cluster, if different from src PVC AccessMode\nCopyMethod   - The PV copy method to use ('filesystem' for restic copy, or 'snapshot' for velero snapshot plugin)\nVerify       - Whether or not to verify copied volume data if CopyMethod is 'filesystem'",
                "type": "object",
                "properties": {
                  "accessMode": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string"
                  },
                  "copyMethod": {
                    "type": "string"
                  },
                  "storageClass": {
                    "type": "string"
                  },
                  "verify": {
                    "type": "boolean"
                  }
                }
              },
              "storageClass": {
                "type": "string"
              },
              "supported": {
                "description": "Supported\nActions     - The list of supported actions\nCopyMethods - The list of supported copy methods",
                "type": "object",
                "required": [
                  "actions",
                  "copyMethods"
                ],
                "properties": {
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "copyMethods": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "refresh": {
          "description": "If set True, the controller is forced to check if the migplan is in Ready state or not.",
          "type": "boolean"
        },
        "srcMigClusterRef": {
          "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n---\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.\n 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular\n    restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".\n    Those cannot be well described when embedded.\n 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity\n    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple\n    and the version of the actual struct is irrelevant.\n 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type\n    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.\n\n\nInstead of using this type, create a locally provided and used type that is well-focused on your reference.\nFor example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        }
      }
    },
    "status": {
      "description": "MigPlanStatus defines the observed state of MigPlan",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition\nType - The condition type.\nStatus - The condition status.\nReason - The reason for the condition.\nMessage - The human readable description of the condition.\nDurable - The condition is not un-staged.\nItems - A list of `items` associated with the condition used to replace [] in `Message`.\nstaging - A condition has been explicitly set/updated.",
            "type": "object",
            "required": [
              "category",
              "lastTransitionTime",
              "status",
              "type"
            ],
            "properties": {
              "category": {
                "type": "string"
              },
              "durable": {
                "type": "boolean"
              },
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        },
        "destStorageClasses": {
          "type": "array",
          "items": {
            "description": "StorageClass is an available storage class in the cluster\nName - the storage class name\nProvisioner - the dynamic provisioner for the storage class\nDefault - whether or not this storage class is the default\nAccessModes - access modes supported by the dynamic provisioner",
            "type": "object",
            "properties": {
              "default": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              },
              "provisioner": {
                "type": "string"
              },
              "volumeAccessModes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "accessModes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "volumeMode": {
                      "description": "PersistentVolumeMode describes how a volume is intended to be consumed, either Block or Filesystem.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "excludedResources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "incompatibleNamespaces": {
          "type": "array",
          "items": {
            "description": "IncompatibleNamespace - namespace, which is noticed\nto contain resources incompatible by the migration",
            "type": "object",
            "required": [
              "gvks",
              "name"
            ],
            "properties": {
              "gvks": {
                "type": "array",
                "items": {
                  "description": "IncompatibleGVK - custom structure for printing GVKs lowercase",
                  "type": "object",
                  "required": [
                    "group",
                    "kind",
                    "version"
                  ],
                  "properties": {
                    "group": {
                      "type": "string"
                    },
                    "kind": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    }
                  }
                }
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "namespaces": {
          "type": "array",
          "items": {
            "description": "UnhealthyNamespace is a store for unhealthy resources in a namespace",
            "type": "object",
            "required": [
              "name",
              "workloads"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "workloads": {
                "type": "array",
                "items": {
                  "description": "Workload is a store for unhealthy resource and it's dependents",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "resources": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "observedDigest": {
          "type": "string"
        },
        "srcStorageClasses": {
          "type": "array",
          "items": {
            "description": "StorageClass is an available storage class in the cluster\nName - the storage class name\nProvisioner - the dynamic provisioner for the storage class\nDefault - whether or not this storage class is the default\nAccessModes - access modes supported by the dynamic provisioner",
            "type": "object",
            "properties": {
              "default": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              },
              "provisioner": {
                "type": "string"
              },
              "volumeAccessModes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "accessModes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "volumeMode": {
                      "description": "PersistentVolumeMode describes how a volume is intended to be consumed, either Block or Filesystem.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "suffix": {
          "type": "string"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "migration.openshift.io",
      "kind": "MigPlan",
      "version": "v1alpha1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}