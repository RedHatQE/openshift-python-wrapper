{
  "description": "MigCluster is the Schema for the migclusters API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "MigClusterSpec defines the desired state of MigCluster",
      "type": "object",
      "required": [
        "isHostCluster"
      ],
      "properties": {
        "azureResourceGroup": {
          "description": "For azure clusters -- it's the resource group that in-cluster volumes use.",
          "type": "string"
        },
        "caBundle": {
          "description": "If the migcluster needs SSL verification for connections a user can supply a custom CA bundle. This field is required only when spec.Insecure is set false",
          "type": "string",
          "format": "byte"
        },
        "exposedRegistryPath": {
          "description": "Stores the path of registry route when using direct migration.",
          "type": "string"
        },
        "insecure": {
          "description": "If set false, user will need to provide CA bundle for TLS connection to the remote cluster.",
          "type": "boolean"
        },
        "isHostCluster": {
          "description": "Specifies if the cluster is host (where the controller is installed) or not. This is a required field.",
          "type": "boolean"
        },
        "refresh": {
          "description": "If set True, forces the controller to run a full suite of validations on migcluster.",
          "type": "boolean"
        },
        "restartRestic": {
          "description": "An override setting to tell the controller that the source cluster restic needs to be restarted after stage pod creation.",
          "type": "boolean"
        },
        "serviceAccountSecretRef": {
          "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n---\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.\n 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular\n    restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".\n    Those cannot be well described when embedded.\n 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity\n    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple\n    and the version of the actual struct is irrelevant.\n 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type\n    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.\n\n\nInstead of using this type, create a locally provided and used type that is well-focused on your reference.\nFor example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "url": {
          "description": "Stores the url of the remote cluster. The field is only required for the source cluster object.",
          "type": "string"
        }
      }
    },
    "status": {
      "description": "MigClusterStatus defines the observed state of MigCluster",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition\nType - The condition type.\nStatus - The condition status.\nReason - The reason for the condition.\nMessage - The human readable description of the condition.\nDurable - The condition is not un-staged.\nItems - A list of `items` associated with the condition used to replace [] in `Message`.\nstaging - A condition has been explicitly set/updated.",
            "type": "object",
            "required": [
              "category",
              "lastTransitionTime",
              "status",
              "type"
            ],
            "properties": {
              "category": {
                "type": "string"
              },
              "durable": {
                "type": "boolean"
              },
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        },
        "observedDigest": {
          "type": "string"
        },
        "operatorVersion": {
          "type": "string"
        },
        "registryPath": {
          "type": "string"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "migration.openshift.io",
      "kind": "MigCluster",
      "version": "v1alpha1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}