{
  "description": "PreprovisioningImage is the Schema for the preprovisioningimages API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "PreprovisioningImageSpec defines the desired state of PreprovisioningImage.",
      "type": "object",
      "properties": {
        "acceptFormats": {
          "description": "acceptFormats is a list of acceptable image formats.",
          "type": "array",
          "items": {
            "description": "ImageFormat enumerates the allowed image formats",
            "type": "string",
            "enum": [
              "iso",
              "initrd"
            ]
          }
        },
        "architecture": {
          "description": "architecture is the processor architecture for which to build the image.",
          "type": "string"
        },
        "networkDataName": {
          "description": "networkDataName is the name of a Secret in the local namespace that contains network data to build in to the image.",
          "type": "string"
        }
      }
    },
    "status": {
      "description": "PreprovisioningImageStatus defines the observed state of PreprovisioningImage.",
      "type": "object",
      "properties": {
        "architecture": {
          "description": "architecture is the processor architecture for which the image is built",
          "type": "string"
        },
        "conditions": {
          "description": "conditions describe the state of the built image",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "extraKernelParams": {
          "description": "extraKernelParams is a string with extra parameters to pass to the kernel when booting the image over network. Only makes sense for initrd images.",
          "type": "string"
        },
        "format": {
          "description": "format is the type of image that is available at the download url: either iso or initrd.",
          "type": "string",
          "enum": [
            "iso",
            "initrd"
          ]
        },
        "imageUrl": {
          "description": "imageUrl is the URL from which the built image can be downloaded.",
          "type": "string"
        },
        "kernelUrl": {
          "description": "kernelUrl is the URL from which the kernel of the image can be downloaded. Only makes sense for initrd images.",
          "type": "string"
        },
        "networkData": {
          "description": "networkData is a reference to the version of the Secret containing the network data used to build the image.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "metal3.io",
      "kind": "PreprovisioningImage",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}