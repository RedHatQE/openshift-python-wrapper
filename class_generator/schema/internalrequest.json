{
  "description": "InternalRequest is the Schema for the internalrequests API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "InternalRequestSpec defines the desired state of InternalRequest.",
      "type": "object",
      "properties": {
        "params": {
          "description": "Params is the list of optional parameters to pass to the Tekton pipeline kubebuilder:pruning:PreserveUnknownFields",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "pipeline": {
          "description": "Pipeline contains the details of the pipeline to execute for the InternalRequest",
          "type": "object",
          "required": [
            "pipelineRef"
          ],
          "properties": {
            "params": {
              "description": "Params is a slice of parameters for a given resolver",
              "type": "array",
              "items": {
                "description": "Param defines the parameters for a given resolver in PipelineRef",
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "description": "Name is the name of the parameter",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is the value of the parameter",
                    "type": "string"
                  }
                }
              }
            },
            "pipelineRef": {
              "description": "PipelineRef is the reference to the Pipeline",
              "type": "object",
              "required": [
                "params",
                "resolver"
              ],
              "properties": {
                "params": {
                  "description": "Params is a slice of parameters for a given resolver",
                  "type": "array",
                  "items": {
                    "description": "Param defines the parameters for a given resolver in PipelineRef",
                    "type": "object",
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name is the name of the parameter",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value is the value of the parameter",
                        "type": "string"
                      }
                    }
                  }
                },
                "resolver": {
                  "description": "Resolver is the name of a Tekton resolver to be used (e.g. git)",
                  "type": "string"
                }
              }
            },
            "serviceAccountName": {
              "description": "ServiceAccountName is the ServiceAccount to use during the execution of the Pipeline",
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            },
            "timeouts": {
              "description": "Timeouts defines the different Timeouts to use in the PipelineRun execution",
              "type": "object",
              "properties": {
                "finally": {
                  "description": "Finally sets the maximum allowed duration of this pipeline's finally",
                  "type": "string"
                },
                "pipeline": {
                  "description": "Pipeline sets the maximum allowed duration for execution of the entire pipeline. The sum of individual timeouts for tasks and finally must not exceed this value.",
                  "type": "string"
                },
                "tasks": {
                  "description": "Tasks sets the maximum allowed duration of this pipeline's tasks",
                  "type": "string"
                }
              }
            }
          }
        },
        "request": {
          "description": "Request is the name of the internal internalrequest which will be translated into a Tekton pipeline",
          "type": "string",
          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
        },
        "serviceAccount": {
          "description": "ServiceAccount defines the serviceAccount to use in the InternalRequest PipelineRun execution. If none is passed, the default Tekton ServiceAccount will be used",
          "type": "string",
          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
        },
        "timeouts": {
          "description": "Timeouts defines the different Timeouts to use in the InternalRequest PipelineRun execution",
          "type": "object",
          "properties": {
            "finally": {
              "description": "Finally sets the maximum allowed duration of this pipeline's finally",
              "type": "string"
            },
            "pipeline": {
              "description": "Pipeline sets the maximum allowed duration for execution of the entire pipeline. The sum of individual timeouts for tasks and finally must not exceed this value.",
              "type": "string"
            },
            "tasks": {
              "description": "Tasks sets the maximum allowed duration of this pipeline's tasks",
              "type": "string"
            }
          }
        }
      }
    },
    "status": {
      "description": "InternalRequestStatus defines the observed state of InternalRequest.",
      "type": "object",
      "properties": {
        "completionTime": {
          "description": "CompletionTime is the time the InternalRequest PipelineRun completed",
          "type": "string",
          "format": "date-time"
        },
        "conditions": {
          "description": "Conditions represent the latest available observations for the internalrequest",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          }
        },
        "results": {
          "description": "Results is the list of optional results as seen in the Tekton PipelineRun kubebuilder:pruning:PreserveUnknownFields",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "startTime": {
          "description": "StartTime is the time when the InternalRequest PipelineRun was created and set to run",
          "type": "string",
          "format": "date-time"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "appstudio.redhat.com",
      "kind": "InternalRequest",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}