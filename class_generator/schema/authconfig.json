{
  "description": "AuthConfig is the schema for Authorino's AuthConfig API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "Specifies the desired state of the AuthConfig resource, i.e. the authencation/authorization scheme to be applied to protect the matching service hosts.",
      "type": "object",
      "required": [
        "hosts"
      ],
      "properties": {
        "authentication": {
          "description": "Authentication configs. At least one config MUST evaluate to a valid identity object for the auth request to be successful.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "anonymous": {
                "description": "Anonymous access.",
                "type": "object"
              },
              "apiKey": {
                "description": "Authentication based on API keys stored in Kubernetes secrets.",
                "type": "object",
                "required": [
                  "selector"
                ],
                "properties": {
                  "allNamespaces": {
                    "description": "Whether Authorino should look for API key secrets in all namespaces or only in the same namespace as the AuthConfig. Enabling this option in namespaced Authorino instances has no effect.",
                    "type": "boolean"
                  },
                  "selector": {
                    "description": "Label selector used by Authorino to match secrets from the cluster storing valid credentials to authenticate to this service",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "cache": {
                "description": "Caching options for the resolved object returned when applying this config. Omit it to avoid caching objects for this config.",
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "Key used to store the entry in the cache. The resolved key must be unique within the scope of this particular config.",
                    "type": "object",
                    "properties": {
                      "selector": {
                        "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Static value",
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  },
                  "ttl": {
                    "description": "Duration (in seconds) of the external data in the cache before pulled again from the source.",
                    "type": "integer"
                  }
                }
              },
              "credentials": {
                "description": "Defines where credentials are required to be passed in the request for authentication based on this config. If omitted, it defaults to credentials passed in the HTTP Authorization header and the \"Bearer\" prefix prepended to the secret credential value.",
                "type": "object",
                "properties": {
                  "authorizationHeader": {
                    "type": "object",
                    "properties": {
                      "prefix": {
                        "type": "string"
                      }
                    }
                  },
                  "cookie": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "customHeader": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "queryString": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "defaults": {
                "description": "Set default property values (claims) for the resolved identity object, that are set before appending the object to the authorization JSON. If the property is already present in the resolved identity object, the default value is ignored. It requires the resolved identity object to always be a JSON object. Do not use this option with identity objects of other JSON types (array, string, etc).",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "selector": {
                      "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Static value",
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              },
              "jwt": {
                "description": "Authentication based on JWT tokens.",
                "type": "object",
                "properties": {
                  "issuerUrl": {
                    "description": "URL of the issuer of the JWT. If `jwksUrl` is omitted, Authorino will append the path to the OpenID Connect Well-Known Discovery endpoint (i.e. \"/.well-known/openid-configuration\") to this URL, to discover the OIDC configuration where to obtain the \"jkws_uri\" claim from. The value must coincide with the value of  the \"iss\" (issuer) claim of the discovered OpenID Connect configuration.",
                    "type": "string"
                  },
                  "ttl": {
                    "description": "Decides how long to wait before refreshing the JWKS (in seconds). If omitted, Authorino will never refresh the JWKS.",
                    "type": "integer"
                  }
                }
              },
              "kubernetesTokenReview": {
                "description": "Authentication by Kubernetes token review.",
                "type": "object",
                "properties": {
                  "audiences": {
                    "description": "The list of audiences (scopes) that must be claimed in a Kubernetes authentication token supplied in the request, and reviewed by Authorino. If omitted, Authorino will review tokens expecting the host name of the requested protected service amongst the audiences.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "metrics": {
                "description": "Whether this config should generate individual observability metrics",
                "type": "boolean"
              },
              "oauth2Introspection": {
                "description": "Authentication by OAuth2 token introspection.",
                "type": "object",
                "required": [
                  "credentialsRef",
                  "endpoint"
                ],
                "properties": {
                  "credentialsRef": {
                    "description": "Reference to a Kubernetes secret in the same namespace, that stores client credentials to the OAuth2 server.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    }
                  },
                  "endpoint": {
                    "description": "The full URL of the token introspection endpoint.",
                    "type": "string"
                  },
                  "tokenTypeHint": {
                    "description": "The token type hint for the token introspection. If omitted, it defaults to \"access_token\".",
                    "type": "string"
                  }
                }
              },
              "overrides": {
                "description": "Overrides the resolved identity object by setting the additional properties (claims) specified in this config, before appending the object to the authorization JSON. It requires the resolved identity object to always be a JSON object. Do not use this option with identity objects of other JSON types (array, string, etc).",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "selector": {
                      "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Static value",
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              },
              "plain": {
                "description": "Identity object extracted from the context. Use this method when authentication is performed beforehand by a proxy and the resulting object passed to Authorino as JSON in the auth request.",
                "type": "object",
                "required": [
                  "selector"
                ],
                "properties": {
                  "selector": {
                    "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                    "type": "string"
                  }
                }
              },
              "priority": {
                "description": "Priority group of the config. All configs in the same priority group are evaluated concurrently; consecutive priority groups are evaluated sequentially.",
                "type": "integer"
              },
              "when": {
                "description": "Conditions for Authorino to enforce this config. If omitted, the config will be enforced for all requests. If present, all conditions must match for the config to be enforced; otherwise, the config will be skipped.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "all": {
                      "description": "A list of pattern expressions to be evaluated as a logical AND.",
                      "type": "array",
                      "items": {
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    },
                    "any": {
                      "description": "A list of pattern expressions to be evaluated as a logical OR.",
                      "type": "array",
                      "items": {
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    },
                    "operator": {
                      "description": "The binary operator to be applied to the content fetched from the authorization JSON, for comparison with \"value\". Possible values are: \"eq\" (equal to), \"neq\" (not equal to), \"incl\" (includes; for arrays), \"excl\" (excludes; for arrays), \"matches\" (regex)",
                      "type": "string",
                      "enum": [
                        "eq",
                        "neq",
                        "incl",
                        "excl",
                        "matches"
                      ]
                    },
                    "patternRef": {
                      "description": "Reference to a named set of pattern expressions",
                      "type": "string"
                    },
                    "selector": {
                      "description": "Path selector to fetch content from the authorization JSON (e.g. 'request.method'). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. Authorino custom JSON path modifiers are also supported.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The value of reference for the comparison with the content fetched from the authorization JSON. If used with the \"matches\" operator, the value must compile to a valid Golang regex.",
                      "type": "string"
                    }
                  }
                }
              },
              "x509": {
                "description": "Authentication based on client X.509 certificates. The certificates presented by the clients must be signed by a trusted CA whose certificates are stored in Kubernetes secrets.",
                "type": "object",
                "required": [
                  "selector"
                ],
                "properties": {
                  "allNamespaces": {
                    "description": "Whether Authorino should look for TLS secrets in all namespaces or only in the same namespace as the AuthConfig. Enabling this option in namespaced Authorino instances has no effect.",
                    "type": "boolean"
                  },
                  "selector": {
                    "description": "Label selector used by Authorino to match secrets from the cluster storing trusted CA certificates to validate clients trying to authenticate to this service",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "authorization": {
          "description": "Authorization policies. All policies MUST evaluate to \"allowed = true\" for the auth request be successful.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "cache": {
                "description": "Caching options for the resolved object returned when applying this config. Omit it to avoid caching objects for this config.",
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "Key used to store the entry in the cache. The resolved key must be unique within the scope of this particular config.",
                    "type": "object",
                    "properties": {
                      "selector": {
                        "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Static value",
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  },
                  "ttl": {
                    "description": "Duration (in seconds) of the external data in the cache before pulled again from the source.",
                    "type": "integer"
                  }
                }
              },
              "kubernetesSubjectAccessReview": {
                "description": "Authorization by Kubernetes SubjectAccessReview",
                "type": "object",
                "properties": {
                  "groups": {
                    "description": "Groups the user must be a member of or, if `user` is omitted, the groups to check for authorization in the Kubernetes RBAC.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "resourceAttributes": {
                    "description": "Use resourceAttributes to check permissions on Kubernetes resources. If omitted, it performs a non-resource SubjectAccessReview, with verb and path inferred from the request.",
                    "type": "object",
                    "properties": {
                      "group": {
                        "description": "API group of the resource. Use '*' for all API groups.",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      },
                      "name": {
                        "description": "Resource name Omit it to check for authorization on all resources of the specified kind.",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      },
                      "namespace": {
                        "description": "Namespace where the user must have permissions on the resource.",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      },
                      "resource": {
                        "description": "Resource kind Use '*' for all resource kinds.",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      },
                      "subresource": {
                        "description": "Subresource kind",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      },
                      "verb": {
                        "description": "Verb to check for authorization on the resource. Use '*' for all verbs.",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      }
                    }
                  },
                  "user": {
                    "description": "User to check for authorization in the Kubernetes RBAC. Omit it to check for group authorization only.",
                    "type": "object",
                    "properties": {
                      "selector": {
                        "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Static value",
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  }
                }
              },
              "metrics": {
                "description": "Whether this config should generate individual observability metrics",
                "type": "boolean"
              },
              "opa": {
                "description": "Open Policy Agent (OPA) Rego policy.",
                "type": "object",
                "properties": {
                  "allValues": {
                    "description": "Returns the value of all Rego rules in the virtual document. Values can be read in subsequent evaluators/phases of the Auth Pipeline. Otherwise, only the default `allow` rule will be exposed. Returning all Rego rules can affect performance of OPA policies during reconciliation (policy precompile) and at runtime.",
                    "type": "boolean"
                  },
                  "externalPolicy": {
                    "description": "Settings for fetching the OPA policy from an external registry. Use it alternatively to 'rego'. For the configurations of the HTTP request, the following options are not implemented: 'method', 'body', 'bodyParameters', 'contentType', 'headers', 'oauth2'. Use it only with: 'url', 'sharedSecret', 'credentials'.",
                    "type": "object",
                    "required": [
                      "url"
                    ],
                    "properties": {
                      "body": {
                        "description": "Raw body of the HTTP request. Supersedes 'bodyParameters'; use either one or the other. Use it with method=POST; for GET requests, set parameters as query string in the 'endpoint' (placeholders can be used).",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      },
                      "bodyParameters": {
                        "description": "Custom parameters to encode in the body of the HTTP request. Superseded by 'body'; use either one or the other. Use it with method=POST; for GET requests, set parameters as query string in the 'endpoint' (placeholders can be used).",
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "selector": {
                              "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Static value",
                              "x-kubernetes-preserve-unknown-fields": true
                            }
                          }
                        }
                      },
                      "contentType": {
                        "description": "Content-Type of the request body. Shapes how 'bodyParameters' are encoded. Use it with method=POST; for GET requests, Content-Type is automatically set to 'text/plain'.",
                        "type": "string",
                        "enum": [
                          "application/x-www-form-urlencoded",
                          "application/json"
                        ]
                      },
                      "credentials": {
                        "description": "Defines where client credentials will be passed in the request to the service. If omitted, it defaults to client credentials passed in the HTTP Authorization header and the \"Bearer\" prefix expected prepended to the secret value.",
                        "type": "object",
                        "properties": {
                          "authorizationHeader": {
                            "type": "object",
                            "properties": {
                              "prefix": {
                                "type": "string"
                              }
                            }
                          },
                          "cookie": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            }
                          },
                          "customHeader": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            }
                          },
                          "queryString": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "headers": {
                        "description": "Custom headers in the HTTP request.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "selector": {
                              "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Static value",
                              "x-kubernetes-preserve-unknown-fields": true
                            }
                          }
                        }
                      },
                      "method": {
                        "description": "HTTP verb used in the request to the service. Accepted values: GET (default), POST. When the request method is POST, the authorization JSON is passed in the body of the request.",
                        "type": "string",
                        "enum": [
                          "GET",
                          "POST",
                          "PUT",
                          "PATCH",
                          "DELETE",
                          "HEAD",
                          "OPTIONS",
                          "CONNECT",
                          "TRACE"
                        ]
                      },
                      "oauth2": {
                        "description": "Authentication with the HTTP service by OAuth2 Client Credentials grant.",
                        "type": "object",
                        "required": [
                          "clientId",
                          "clientSecretRef",
                          "tokenUrl"
                        ],
                        "properties": {
                          "cache": {
                            "description": "Caches and reuses the token until expired. Set it to false to force fetch the token at every authorization request regardless of expiration.",
                            "type": "boolean"
                          },
                          "clientId": {
                            "description": "OAuth2 Client ID.",
                            "type": "string"
                          },
                          "clientSecretRef": {
                            "description": "Reference to a Kuberentes Secret key that stores that OAuth2 Client Secret.",
                            "type": "object",
                            "required": [
                              "key",
                              "name"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the secret in the Authorino's namespace to select from.",
                                "type": "string"
                              }
                            }
                          },
                          "extraParams": {
                            "description": "Optional extra parameters for the requests to the token URL.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "scopes": {
                            "description": "Optional scopes for the client credentials grant, if supported by he OAuth2 server.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tokenUrl": {
                            "description": "Token endpoint URL of the OAuth2 resource server.",
                            "type": "string"
                          }
                        }
                      },
                      "sharedSecretRef": {
                        "description": "Reference to a Secret key whose value will be passed by Authorino in the request. The HTTP service can use the shared secret to authenticate the origin of the request. Ignored if used together with oauth2.",
                        "type": "object",
                        "required": [
                          "key",
                          "name"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the secret in the Authorino's namespace to select from.",
                            "type": "string"
                          }
                        }
                      },
                      "ttl": {
                        "description": "Duration (in seconds) of the external data in the cache before pulled again from the source.",
                        "type": "integer"
                      },
                      "url": {
                        "description": "Endpoint URL of the HTTP service. The value can include variable placeholders in the format \"{selector}\", where \"selector\" is any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson and selects value from the authorization JSON. E.g. https://ext-auth-server.io/metadata?p={request.path}",
                        "type": "string"
                      }
                    }
                  },
                  "rego": {
                    "description": "Authorization policy as a Rego language document. The Rego document must include the \"allow\" condition, set by Authorino to \"false\" by default (i.e. requests are unauthorized unless changed). The Rego document must NOT include the \"package\" declaration in line 1.",
                    "type": "string"
                  }
                }
              },
              "patternMatching": {
                "description": "Pattern-matching authorization rules.",
                "type": "object",
                "required": [
                  "patterns"
                ],
                "properties": {
                  "patterns": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "description": "A list of pattern expressions to be evaluated as a logical AND.",
                          "type": "array",
                          "items": {
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        },
                        "any": {
                          "description": "A list of pattern expressions to be evaluated as a logical OR.",
                          "type": "array",
                          "items": {
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        },
                        "operator": {
                          "description": "The binary operator to be applied to the content fetched from the authorization JSON, for comparison with \"value\". Possible values are: \"eq\" (equal to), \"neq\" (not equal to), \"incl\" (includes; for arrays), \"excl\" (excludes; for arrays), \"matches\" (regex)",
                          "type": "string",
                          "enum": [
                            "eq",
                            "neq",
                            "incl",
                            "excl",
                            "matches"
                          ]
                        },
                        "patternRef": {
                          "description": "Reference to a named set of pattern expressions",
                          "type": "string"
                        },
                        "selector": {
                          "description": "Path selector to fetch content from the authorization JSON (e.g. 'request.method'). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. Authorino custom JSON path modifiers are also supported.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value of reference for the comparison with the content fetched from the authorization JSON. If used with the \"matches\" operator, the value must compile to a valid Golang regex.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "priority": {
                "description": "Priority group of the config. All configs in the same priority group are evaluated concurrently; consecutive priority groups are evaluated sequentially.",
                "type": "integer"
              },
              "spicedb": {
                "description": "Authorization decision delegated to external Authzed/SpiceDB server.",
                "type": "object",
                "required": [
                  "endpoint"
                ],
                "properties": {
                  "endpoint": {
                    "description": "Hostname and port number to the GRPC interface of the SpiceDB server (e.g. spicedb:50051).",
                    "type": "string"
                  },
                  "insecure": {
                    "description": "Insecure HTTP connection (i.e. disables TLS verification)",
                    "type": "boolean"
                  },
                  "permission": {
                    "description": "The name of the permission (or relation) on which to execute the check.",
                    "type": "object",
                    "properties": {
                      "selector": {
                        "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Static value",
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  },
                  "resource": {
                    "description": "The resource on which to check the permission or relation.",
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      },
                      "name": {
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      }
                    }
                  },
                  "sharedSecretRef": {
                    "description": "Reference to a Secret key whose value will be used by Authorino to authenticate with the Authzed service.",
                    "type": "object",
                    "required": [
                      "key",
                      "name"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the secret in the Authorino's namespace to select from.",
                        "type": "string"
                      }
                    }
                  },
                  "subject": {
                    "description": "The subject that will be checked for the permission or relation.",
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      },
                      "name": {
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "when": {
                "description": "Conditions for Authorino to enforce this config. If omitted, the config will be enforced for all requests. If present, all conditions must match for the config to be enforced; otherwise, the config will be skipped.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "all": {
                      "description": "A list of pattern expressions to be evaluated as a logical AND.",
                      "type": "array",
                      "items": {
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    },
                    "any": {
                      "description": "A list of pattern expressions to be evaluated as a logical OR.",
                      "type": "array",
                      "items": {
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    },
                    "operator": {
                      "description": "The binary operator to be applied to the content fetched from the authorization JSON, for comparison with \"value\". Possible values are: \"eq\" (equal to), \"neq\" (not equal to), \"incl\" (includes; for arrays), \"excl\" (excludes; for arrays), \"matches\" (regex)",
                      "type": "string",
                      "enum": [
                        "eq",
                        "neq",
                        "incl",
                        "excl",
                        "matches"
                      ]
                    },
                    "patternRef": {
                      "description": "Reference to a named set of pattern expressions",
                      "type": "string"
                    },
                    "selector": {
                      "description": "Path selector to fetch content from the authorization JSON (e.g. 'request.method'). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. Authorino custom JSON path modifiers are also supported.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The value of reference for the comparison with the content fetched from the authorization JSON. If used with the \"matches\" operator, the value must compile to a valid Golang regex.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "callbacks": {
          "description": "Callback functions. Authorino sends callbacks at the end of the auth pipeline to the endpoints specified in this config.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "required": [
              "http"
            ],
            "properties": {
              "cache": {
                "description": "Caching options for the resolved object returned when applying this config. Omit it to avoid caching objects for this config.",
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "Key used to store the entry in the cache. The resolved key must be unique within the scope of this particular config.",
                    "type": "object",
                    "properties": {
                      "selector": {
                        "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Static value",
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  },
                  "ttl": {
                    "description": "Duration (in seconds) of the external data in the cache before pulled again from the source.",
                    "type": "integer"
                  }
                }
              },
              "http": {
                "description": "Settings of the external HTTP request",
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "body": {
                    "description": "Raw body of the HTTP request. Supersedes 'bodyParameters'; use either one or the other. Use it with method=POST; for GET requests, set parameters as query string in the 'endpoint' (placeholders can be used).",
                    "type": "object",
                    "properties": {
                      "selector": {
                        "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Static value",
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  },
                  "bodyParameters": {
                    "description": "Custom parameters to encode in the body of the HTTP request. Superseded by 'body'; use either one or the other. Use it with method=POST; for GET requests, set parameters as query string in the 'endpoint' (placeholders can be used).",
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "selector": {
                          "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Static value",
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      }
                    }
                  },
                  "contentType": {
                    "description": "Content-Type of the request body. Shapes how 'bodyParameters' are encoded. Use it with method=POST; for GET requests, Content-Type is automatically set to 'text/plain'.",
                    "type": "string",
                    "enum": [
                      "application/x-www-form-urlencoded",
                      "application/json"
                    ]
                  },
                  "credentials": {
                    "description": "Defines where client credentials will be passed in the request to the service. If omitted, it defaults to client credentials passed in the HTTP Authorization header and the \"Bearer\" prefix expected prepended to the secret value.",
                    "type": "object",
                    "properties": {
                      "authorizationHeader": {
                        "type": "object",
                        "properties": {
                          "prefix": {
                            "type": "string"
                          }
                        }
                      },
                      "cookie": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        }
                      },
                      "customHeader": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        }
                      },
                      "queryString": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "headers": {
                    "description": "Custom headers in the HTTP request.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "selector": {
                          "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Static value",
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      }
                    }
                  },
                  "method": {
                    "description": "HTTP verb used in the request to the service. Accepted values: GET (default), POST. When the request method is POST, the authorization JSON is passed in the body of the request.",
                    "type": "string",
                    "enum": [
                      "GET",
                      "POST",
                      "PUT",
                      "PATCH",
                      "DELETE",
                      "HEAD",
                      "OPTIONS",
                      "CONNECT",
                      "TRACE"
                    ]
                  },
                  "oauth2": {
                    "description": "Authentication with the HTTP service by OAuth2 Client Credentials grant.",
                    "type": "object",
                    "required": [
                      "clientId",
                      "clientSecretRef",
                      "tokenUrl"
                    ],
                    "properties": {
                      "cache": {
                        "description": "Caches and reuses the token until expired. Set it to false to force fetch the token at every authorization request regardless of expiration.",
                        "type": "boolean"
                      },
                      "clientId": {
                        "description": "OAuth2 Client ID.",
                        "type": "string"
                      },
                      "clientSecretRef": {
                        "description": "Reference to a Kuberentes Secret key that stores that OAuth2 Client Secret.",
                        "type": "object",
                        "required": [
                          "key",
                          "name"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the secret in the Authorino's namespace to select from.",
                            "type": "string"
                          }
                        }
                      },
                      "extraParams": {
                        "description": "Optional extra parameters for the requests to the token URL.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "scopes": {
                        "description": "Optional scopes for the client credentials grant, if supported by he OAuth2 server.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "tokenUrl": {
                        "description": "Token endpoint URL of the OAuth2 resource server.",
                        "type": "string"
                      }
                    }
                  },
                  "sharedSecretRef": {
                    "description": "Reference to a Secret key whose value will be passed by Authorino in the request. The HTTP service can use the shared secret to authenticate the origin of the request. Ignored if used together with oauth2.",
                    "type": "object",
                    "required": [
                      "key",
                      "name"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the secret in the Authorino's namespace to select from.",
                        "type": "string"
                      }
                    }
                  },
                  "url": {
                    "description": "Endpoint URL of the HTTP service. The value can include variable placeholders in the format \"{selector}\", where \"selector\" is any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson and selects value from the authorization JSON. E.g. https://ext-auth-server.io/metadata?p={request.path}",
                    "type": "string"
                  }
                }
              },
              "metrics": {
                "description": "Whether this config should generate individual observability metrics",
                "type": "boolean"
              },
              "priority": {
                "description": "Priority group of the config. All configs in the same priority group are evaluated concurrently; consecutive priority groups are evaluated sequentially.",
                "type": "integer"
              },
              "when": {
                "description": "Conditions for Authorino to enforce this config. If omitted, the config will be enforced for all requests. If present, all conditions must match for the config to be enforced; otherwise, the config will be skipped.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "all": {
                      "description": "A list of pattern expressions to be evaluated as a logical AND.",
                      "type": "array",
                      "items": {
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    },
                    "any": {
                      "description": "A list of pattern expressions to be evaluated as a logical OR.",
                      "type": "array",
                      "items": {
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    },
                    "operator": {
                      "description": "The binary operator to be applied to the content fetched from the authorization JSON, for comparison with \"value\". Possible values are: \"eq\" (equal to), \"neq\" (not equal to), \"incl\" (includes; for arrays), \"excl\" (excludes; for arrays), \"matches\" (regex)",
                      "type": "string",
                      "enum": [
                        "eq",
                        "neq",
                        "incl",
                        "excl",
                        "matches"
                      ]
                    },
                    "patternRef": {
                      "description": "Reference to a named set of pattern expressions",
                      "type": "string"
                    },
                    "selector": {
                      "description": "Path selector to fetch content from the authorization JSON (e.g. 'request.method'). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. Authorino custom JSON path modifiers are also supported.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The value of reference for the comparison with the content fetched from the authorization JSON. If used with the \"matches\" operator, the value must compile to a valid Golang regex.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "hosts": {
          "description": "The list of public host names of the services protected by this authentication/authorization scheme. Authorino uses the requested host to lookup for the corresponding authentication/authorization configs to enforce.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Metadata sources. Authorino fetches auth metadata as JSON from sources specified in this config.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "cache": {
                "description": "Caching options for the resolved object returned when applying this config. Omit it to avoid caching objects for this config.",
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "Key used to store the entry in the cache. The resolved key must be unique within the scope of this particular config.",
                    "type": "object",
                    "properties": {
                      "selector": {
                        "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Static value",
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  },
                  "ttl": {
                    "description": "Duration (in seconds) of the external data in the cache before pulled again from the source.",
                    "type": "integer"
                  }
                }
              },
              "http": {
                "description": "External source of auth metadata via HTTP request",
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "body": {
                    "description": "Raw body of the HTTP request. Supersedes 'bodyParameters'; use either one or the other. Use it with method=POST; for GET requests, set parameters as query string in the 'endpoint' (placeholders can be used).",
                    "type": "object",
                    "properties": {
                      "selector": {
                        "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Static value",
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  },
                  "bodyParameters": {
                    "description": "Custom parameters to encode in the body of the HTTP request. Superseded by 'body'; use either one or the other. Use it with method=POST; for GET requests, set parameters as query string in the 'endpoint' (placeholders can be used).",
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "selector": {
                          "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Static value",
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      }
                    }
                  },
                  "contentType": {
                    "description": "Content-Type of the request body. Shapes how 'bodyParameters' are encoded. Use it with method=POST; for GET requests, Content-Type is automatically set to 'text/plain'.",
                    "type": "string",
                    "enum": [
                      "application/x-www-form-urlencoded",
                      "application/json"
                    ]
                  },
                  "credentials": {
                    "description": "Defines where client credentials will be passed in the request to the service. If omitted, it defaults to client credentials passed in the HTTP Authorization header and the \"Bearer\" prefix expected prepended to the secret value.",
                    "type": "object",
                    "properties": {
                      "authorizationHeader": {
                        "type": "object",
                        "properties": {
                          "prefix": {
                            "type": "string"
                          }
                        }
                      },
                      "cookie": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        }
                      },
                      "customHeader": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        }
                      },
                      "queryString": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "headers": {
                    "description": "Custom headers in the HTTP request.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "selector": {
                          "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Static value",
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      }
                    }
                  },
                  "method": {
                    "description": "HTTP verb used in the request to the service. Accepted values: GET (default), POST. When the request method is POST, the authorization JSON is passed in the body of the request.",
                    "type": "string",
                    "enum": [
                      "GET",
                      "POST",
                      "PUT",
                      "PATCH",
                      "DELETE",
                      "HEAD",
                      "OPTIONS",
                      "CONNECT",
                      "TRACE"
                    ]
                  },
                  "oauth2": {
                    "description": "Authentication with the HTTP service by OAuth2 Client Credentials grant.",
                    "type": "object",
                    "required": [
                      "clientId",
                      "clientSecretRef",
                      "tokenUrl"
                    ],
                    "properties": {
                      "cache": {
                        "description": "Caches and reuses the token until expired. Set it to false to force fetch the token at every authorization request regardless of expiration.",
                        "type": "boolean"
                      },
                      "clientId": {
                        "description": "OAuth2 Client ID.",
                        "type": "string"
                      },
                      "clientSecretRef": {
                        "description": "Reference to a Kuberentes Secret key that stores that OAuth2 Client Secret.",
                        "type": "object",
                        "required": [
                          "key",
                          "name"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the secret in the Authorino's namespace to select from.",
                            "type": "string"
                          }
                        }
                      },
                      "extraParams": {
                        "description": "Optional extra parameters for the requests to the token URL.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "scopes": {
                        "description": "Optional scopes for the client credentials grant, if supported by he OAuth2 server.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "tokenUrl": {
                        "description": "Token endpoint URL of the OAuth2 resource server.",
                        "type": "string"
                      }
                    }
                  },
                  "sharedSecretRef": {
                    "description": "Reference to a Secret key whose value will be passed by Authorino in the request. The HTTP service can use the shared secret to authenticate the origin of the request. Ignored if used together with oauth2.",
                    "type": "object",
                    "required": [
                      "key",
                      "name"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the secret in the Authorino's namespace to select from.",
                        "type": "string"
                      }
                    }
                  },
                  "url": {
                    "description": "Endpoint URL of the HTTP service. The value can include variable placeholders in the format \"{selector}\", where \"selector\" is any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson and selects value from the authorization JSON. E.g. https://ext-auth-server.io/metadata?p={request.path}",
                    "type": "string"
                  }
                }
              },
              "metrics": {
                "description": "Whether this config should generate individual observability metrics",
                "type": "boolean"
              },
              "priority": {
                "description": "Priority group of the config. All configs in the same priority group are evaluated concurrently; consecutive priority groups are evaluated sequentially.",
                "type": "integer"
              },
              "uma": {
                "description": "User-Managed Access (UMA) source of resource data.",
                "type": "object",
                "required": [
                  "credentialsRef",
                  "endpoint"
                ],
                "properties": {
                  "credentialsRef": {
                    "description": "Reference to a Kubernetes secret in the same namespace, that stores client credentials to the resource registration API of the UMA server.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    }
                  },
                  "endpoint": {
                    "description": "The endpoint of the UMA server. The value must coincide with the \"issuer\" claim of the UMA config discovered from the well-known uma configuration endpoint.",
                    "type": "string"
                  }
                }
              },
              "userInfo": {
                "description": "OpendID Connect UserInfo linked to an OIDC authentication config specified in this same AuthConfig.",
                "type": "object",
                "required": [
                  "identitySource"
                ],
                "properties": {
                  "identitySource": {
                    "description": "The name of an OIDC-enabled JWT authentication config whose OpenID Connect configuration discovered includes the OIDC \"userinfo_endpoint\" claim.",
                    "type": "string"
                  }
                }
              },
              "when": {
                "description": "Conditions for Authorino to enforce this config. If omitted, the config will be enforced for all requests. If present, all conditions must match for the config to be enforced; otherwise, the config will be skipped.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "all": {
                      "description": "A list of pattern expressions to be evaluated as a logical AND.",
                      "type": "array",
                      "items": {
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    },
                    "any": {
                      "description": "A list of pattern expressions to be evaluated as a logical OR.",
                      "type": "array",
                      "items": {
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    },
                    "operator": {
                      "description": "The binary operator to be applied to the content fetched from the authorization JSON, for comparison with \"value\". Possible values are: \"eq\" (equal to), \"neq\" (not equal to), \"incl\" (includes; for arrays), \"excl\" (excludes; for arrays), \"matches\" (regex)",
                      "type": "string",
                      "enum": [
                        "eq",
                        "neq",
                        "incl",
                        "excl",
                        "matches"
                      ]
                    },
                    "patternRef": {
                      "description": "Reference to a named set of pattern expressions",
                      "type": "string"
                    },
                    "selector": {
                      "description": "Path selector to fetch content from the authorization JSON (e.g. 'request.method'). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. Authorino custom JSON path modifiers are also supported.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The value of reference for the comparison with the content fetched from the authorization JSON. If used with the \"matches\" operator, the value must compile to a valid Golang regex.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "patterns": {
          "description": "Named sets of patterns that can be referred in `when` conditions and in pattern-matching authorization policy rules.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "operator": {
                  "description": "The binary operator to be applied to the content fetched from the authorization JSON, for comparison with \"value\". Possible values are: \"eq\" (equal to), \"neq\" (not equal to), \"incl\" (includes; for arrays), \"excl\" (excludes; for arrays), \"matches\" (regex)",
                  "type": "string",
                  "enum": [
                    "eq",
                    "neq",
                    "incl",
                    "excl",
                    "matches"
                  ]
                },
                "selector": {
                  "description": "Path selector to fetch content from the authorization JSON (e.g. 'request.method'). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. Authorino custom JSON path modifiers are also supported.",
                  "type": "string"
                },
                "value": {
                  "description": "The value of reference for the comparison with the content fetched from the authorization JSON. If used with the \"matches\" operator, the value must compile to a valid Golang regex.",
                  "type": "string"
                }
              }
            }
          }
        },
        "response": {
          "description": "Response items. Authorino builds custom responses to the client of the auth request.",
          "type": "object",
          "properties": {
            "success": {
              "description": "Response items to be included in the auth response when the request is authenticated and authorized. For integration of Authorino via proxy, the proxy must use these settings to propagate dynamic metadata and/or inject data in the request.",
              "type": "object",
              "properties": {
                "dynamicMetadata": {
                  "description": "Custom success response items wrapped as HTTP headers. For integration of Authorino via proxy, the proxy must use these settings to propagate dynamic metadata. See https://www.envoyproxy.io/docs/envoy/latest/configuration/advanced/well_known_dynamic_metadata",
                  "type": "object",
                  "additionalProperties": {
                    "description": "Settings of the success custom response item.",
                    "type": "object",
                    "properties": {
                      "cache": {
                        "description": "Caching options for the resolved object returned when applying this config. Omit it to avoid caching objects for this config.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "Key used to store the entry in the cache. The resolved key must be unique within the scope of this particular config.",
                            "type": "object",
                            "properties": {
                              "selector": {
                                "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Static value",
                                "x-kubernetes-preserve-unknown-fields": true
                              }
                            }
                          },
                          "ttl": {
                            "description": "Duration (in seconds) of the external data in the cache before pulled again from the source.",
                            "type": "integer"
                          }
                        }
                      },
                      "json": {
                        "description": "JSON object Specify it as the list of properties of the object, whose values can combine static values and values selected from the authorization JSON.",
                        "type": "object",
                        "required": [
                          "properties"
                        ],
                        "properties": {
                          "properties": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "selector": {
                                  "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Static value",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              }
                            }
                          }
                        }
                      },
                      "key": {
                        "description": "The key used to add the custom response item (name of the HTTP header or root property of the Dynamic Metadata object). If omitted, it will be set to the name of the response config.",
                        "type": "string"
                      },
                      "metrics": {
                        "description": "Whether this config should generate individual observability metrics",
                        "type": "boolean"
                      },
                      "plain": {
                        "description": "Plain text content",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      },
                      "priority": {
                        "description": "Priority group of the config. All configs in the same priority group are evaluated concurrently; consecutive priority groups are evaluated sequentially.",
                        "type": "integer"
                      },
                      "when": {
                        "description": "Conditions for Authorino to enforce this config. If omitted, the config will be enforced for all requests. If present, all conditions must match for the config to be enforced; otherwise, the config will be skipped.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "description": "A list of pattern expressions to be evaluated as a logical AND.",
                              "type": "array",
                              "items": {
                                "x-kubernetes-preserve-unknown-fields": true
                              }
                            },
                            "any": {
                              "description": "A list of pattern expressions to be evaluated as a logical OR.",
                              "type": "array",
                              "items": {
                                "x-kubernetes-preserve-unknown-fields": true
                              }
                            },
                            "operator": {
                              "description": "The binary operator to be applied to the content fetched from the authorization JSON, for comparison with \"value\". Possible values are: \"eq\" (equal to), \"neq\" (not equal to), \"incl\" (includes; for arrays), \"excl\" (excludes; for arrays), \"matches\" (regex)",
                              "type": "string",
                              "enum": [
                                "eq",
                                "neq",
                                "incl",
                                "excl",
                                "matches"
                              ]
                            },
                            "patternRef": {
                              "description": "Reference to a named set of pattern expressions",
                              "type": "string"
                            },
                            "selector": {
                              "description": "Path selector to fetch content from the authorization JSON (e.g. 'request.method'). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. Authorino custom JSON path modifiers are also supported.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value of reference for the comparison with the content fetched from the authorization JSON. If used with the \"matches\" operator, the value must compile to a valid Golang regex.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "wristband": {
                        "description": "Authorino Festival Wristband token",
                        "type": "object",
                        "required": [
                          "issuer",
                          "signingKeyRefs"
                        ],
                        "properties": {
                          "customClaims": {
                            "description": "Any claims to be added to the wristband token apart from the standard JWT claims (iss, iat, exp) added by default.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "selector": {
                                  "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Static value",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              }
                            }
                          },
                          "issuer": {
                            "description": "The endpoint to the Authorino service that issues the wristband (format: <scheme>://<host>:<port>/<realm>, where <realm> = <namespace>/<authorino-auth-config-resource-name/wristband-config-name)",
                            "type": "string"
                          },
                          "signingKeyRefs": {
                            "description": "Reference by name to Kubernetes secrets and corresponding signing algorithms. The secrets must contain a `key.pem` entry whose value is the signing key formatted as PEM.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "algorithm",
                                "name"
                              ],
                              "properties": {
                                "algorithm": {
                                  "description": "Algorithm to sign the wristband token using the signing key provided",
                                  "type": "string",
                                  "enum": [
                                    "ES256",
                                    "ES384",
                                    "ES512",
                                    "RS256",
                                    "RS384",
                                    "RS512"
                                  ]
                                },
                                "name": {
                                  "description": "Name of the signing key. The value is used to reference the Kubernetes secret that stores the key and in the `kid` claim of the wristband token header.",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "tokenDuration": {
                            "description": "Time span of the wristband token, in seconds.",
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                },
                "headers": {
                  "description": "Custom success response items wrapped as HTTP headers. For integration of Authorino via proxy, the proxy must use these settings to inject data in the request.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "cache": {
                        "description": "Caching options for the resolved object returned when applying this config. Omit it to avoid caching objects for this config.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "Key used to store the entry in the cache. The resolved key must be unique within the scope of this particular config.",
                            "type": "object",
                            "properties": {
                              "selector": {
                                "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Static value",
                                "x-kubernetes-preserve-unknown-fields": true
                              }
                            }
                          },
                          "ttl": {
                            "description": "Duration (in seconds) of the external data in the cache before pulled again from the source.",
                            "type": "integer"
                          }
                        }
                      },
                      "json": {
                        "description": "JSON object Specify it as the list of properties of the object, whose values can combine static values and values selected from the authorization JSON.",
                        "type": "object",
                        "required": [
                          "properties"
                        ],
                        "properties": {
                          "properties": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "selector": {
                                  "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Static value",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              }
                            }
                          }
                        }
                      },
                      "key": {
                        "description": "The key used to add the custom response item (name of the HTTP header or root property of the Dynamic Metadata object). If omitted, it will be set to the name of the response config.",
                        "type": "string"
                      },
                      "metrics": {
                        "description": "Whether this config should generate individual observability metrics",
                        "type": "boolean"
                      },
                      "plain": {
                        "description": "Plain text content",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Static value",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      },
                      "priority": {
                        "description": "Priority group of the config. All configs in the same priority group are evaluated concurrently; consecutive priority groups are evaluated sequentially.",
                        "type": "integer"
                      },
                      "when": {
                        "description": "Conditions for Authorino to enforce this config. If omitted, the config will be enforced for all requests. If present, all conditions must match for the config to be enforced; otherwise, the config will be skipped.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "description": "A list of pattern expressions to be evaluated as a logical AND.",
                              "type": "array",
                              "items": {
                                "x-kubernetes-preserve-unknown-fields": true
                              }
                            },
                            "any": {
                              "description": "A list of pattern expressions to be evaluated as a logical OR.",
                              "type": "array",
                              "items": {
                                "x-kubernetes-preserve-unknown-fields": true
                              }
                            },
                            "operator": {
                              "description": "The binary operator to be applied to the content fetched from the authorization JSON, for comparison with \"value\". Possible values are: \"eq\" (equal to), \"neq\" (not equal to), \"incl\" (includes; for arrays), \"excl\" (excludes; for arrays), \"matches\" (regex)",
                              "type": "string",
                              "enum": [
                                "eq",
                                "neq",
                                "incl",
                                "excl",
                                "matches"
                              ]
                            },
                            "patternRef": {
                              "description": "Reference to a named set of pattern expressions",
                              "type": "string"
                            },
                            "selector": {
                              "description": "Path selector to fetch content from the authorization JSON (e.g. 'request.method'). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. Authorino custom JSON path modifiers are also supported.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value of reference for the comparison with the content fetched from the authorization JSON. If used with the \"matches\" operator, the value must compile to a valid Golang regex.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "wristband": {
                        "description": "Authorino Festival Wristband token",
                        "type": "object",
                        "required": [
                          "issuer",
                          "signingKeyRefs"
                        ],
                        "properties": {
                          "customClaims": {
                            "description": "Any claims to be added to the wristband token apart from the standard JWT claims (iss, iat, exp) added by default.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "selector": {
                                  "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Static value",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              }
                            }
                          },
                          "issuer": {
                            "description": "The endpoint to the Authorino service that issues the wristband (format: <scheme>://<host>:<port>/<realm>, where <realm> = <namespace>/<authorino-auth-config-resource-name/wristband-config-name)",
                            "type": "string"
                          },
                          "signingKeyRefs": {
                            "description": "Reference by name to Kubernetes secrets and corresponding signing algorithms. The secrets must contain a `key.pem` entry whose value is the signing key formatted as PEM.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "algorithm",
                                "name"
                              ],
                              "properties": {
                                "algorithm": {
                                  "description": "Algorithm to sign the wristband token using the signing key provided",
                                  "type": "string",
                                  "enum": [
                                    "ES256",
                                    "ES384",
                                    "ES512",
                                    "RS256",
                                    "RS384",
                                    "RS512"
                                  ]
                                },
                                "name": {
                                  "description": "Name of the signing key. The value is used to reference the Kubernetes secret that stores the key and in the `kid` claim of the wristband token header.",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "tokenDuration": {
                            "description": "Time span of the wristband token, in seconds.",
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "unauthenticated": {
              "description": "Customizations on the denial status attributes when the request is unauthenticated. For integration of Authorino via proxy, the proxy must honour the response status attributes specified in this config. Default: 401 Unauthorized",
              "type": "object",
              "properties": {
                "body": {
                  "description": "HTTP response body to override the default denial body.",
                  "type": "object",
                  "properties": {
                    "selector": {
                      "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Static value",
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                },
                "code": {
                  "description": "HTTP status code to override the default denial status code.",
                  "type": "integer",
                  "format": "int64",
                  "maximum": 599,
                  "minimum": 300
                },
                "headers": {
                  "description": "HTTP response headers to override the default denial headers.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "selector": {
                        "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Static value",
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  }
                },
                "message": {
                  "description": "HTTP message to override the default denial message.",
                  "type": "object",
                  "properties": {
                    "selector": {
                      "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Static value",
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              }
            },
            "unauthorized": {
              "description": "Customizations on the denial status attributes when the request is unauthorized. For integration of Authorino via proxy, the proxy must honour the response status attributes specified in this config. Default: 403 Forbidden",
              "type": "object",
              "properties": {
                "body": {
                  "description": "HTTP response body to override the default denial body.",
                  "type": "object",
                  "properties": {
                    "selector": {
                      "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Static value",
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                },
                "code": {
                  "description": "HTTP status code to override the default denial status code.",
                  "type": "integer",
                  "format": "int64",
                  "maximum": 599,
                  "minimum": 300
                },
                "headers": {
                  "description": "HTTP response headers to override the default denial headers.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "selector": {
                        "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Static value",
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  }
                },
                "message": {
                  "description": "HTTP message to override the default denial message.",
                  "type": "object",
                  "properties": {
                    "selector": {
                      "description": "Simple path selector to fetch content from the authorization JSON (e.g. 'request.method') or a string template with variables that resolve to patterns (e.g. \"Hello, {auth.identity.name}!\"). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. The following Authorino custom modifiers are supported: @extract:{sep:\" \",pos:0}, @replace{old:\"\",new:\"\"}, @case:upper|lower, @base64:encode|decode and @strip.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Static value",
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              }
            }
          }
        },
        "when": {
          "description": "Overall conditions for the AuthConfig to be enforced. If omitted, the AuthConfig will be enforced at all requests. If present, all conditions must match for the AuthConfig to be enforced; otherwise, Authorino skips the AuthConfig and returns to the auth request with status OK.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "all": {
                "description": "A list of pattern expressions to be evaluated as a logical AND.",
                "type": "array",
                "items": {
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "any": {
                "description": "A list of pattern expressions to be evaluated as a logical OR.",
                "type": "array",
                "items": {
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "operator": {
                "description": "The binary operator to be applied to the content fetched from the authorization JSON, for comparison with \"value\". Possible values are: \"eq\" (equal to), \"neq\" (not equal to), \"incl\" (includes; for arrays), \"excl\" (excludes; for arrays), \"matches\" (regex)",
                "type": "string",
                "enum": [
                  "eq",
                  "neq",
                  "incl",
                  "excl",
                  "matches"
                ]
              },
              "patternRef": {
                "description": "Reference to a named set of pattern expressions",
                "type": "string"
              },
              "selector": {
                "description": "Path selector to fetch content from the authorization JSON (e.g. 'request.method'). Any pattern supported by https://pkg.go.dev/github.com/tidwall/gjson can be used. Authorino custom JSON path modifiers are also supported.",
                "type": "string"
              },
              "value": {
                "description": "The value of reference for the comparison with the content fetched from the authorization JSON. If used with the \"matches\" operator, the value must compile to a valid Golang regex.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "status": {
      "description": "AuthConfigStatus defines the observed state of AuthConfig",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transit from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "lastUpdatedTime": {
                "description": "Last time the condition was updated",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "Human readable message indicating details about last transition.",
                "type": "string"
              },
              "reason": {
                "description": "(brief) reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition",
                "type": "string"
              }
            }
          }
        },
        "summary": {
          "type": "object",
          "required": [
            "festivalWristbandEnabled",
            "hostsReady",
            "numAuthorizationPolicies",
            "numHostsReady",
            "numIdentitySources",
            "numMetadataSources",
            "numResponseItems",
            "ready"
          ],
          "properties": {
            "festivalWristbandEnabled": {
              "description": "Indicator of whether the AuthConfig issues Festival Wristband tokens on successful evaluation of the AuthConfig (access granted)",
              "type": "boolean"
            },
            "hostsReady": {
              "description": "Lists the hosts from spec.hosts linked to the resource in the index",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "numAuthorizationPolicies": {
              "description": "Number of authorization policies in the AuthConfig",
              "type": "integer",
              "format": "int64"
            },
            "numHostsReady": {
              "description": "Number of hosts from spec.hosts linked to the resource in the index, compared to the total number of hosts in spec.hosts",
              "type": "string"
            },
            "numIdentitySources": {
              "description": "Number of trusted sources of identity for authentication in the AuthConfig",
              "type": "integer",
              "format": "int64"
            },
            "numMetadataSources": {
              "description": "Number of sources of external metadata in the AuthConfig",
              "type": "integer",
              "format": "int64"
            },
            "numResponseItems": {
              "description": "Number of custom authorization response items in the AuthConfig",
              "type": "integer",
              "format": "int64"
            },
            "ready": {
              "description": "Whether all hosts from spec.hosts have been linked to the resource in the index",
              "type": "boolean"
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "authorino.kuadrant.io",
      "kind": "AuthConfig",
      "version": "v1beta2"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}