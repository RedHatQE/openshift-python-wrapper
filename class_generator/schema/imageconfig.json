{
  "description": "The ImageConfig resource is used to configure settings for package images.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ImageConfigSpec contains the configuration for matching images.",
      "type": "object",
      "required": [
        "matchImages"
      ],
      "properties": {
        "matchImages": {
          "description": "MatchImages is a list of image matching rules. This ImageConfig will\nmatch an image if any one of these rules is satisfied. In the case where\nmultiple ImageConfigs match an image for a given purpose the one with the\nmost specific match will be used. If multiple rules of equal specificity\nmatch an arbitrary one will be selected.",
          "type": "array",
          "items": {
            "description": "ImageMatch defines a rule for matching image.",
            "type": "object",
            "required": [
              "prefix"
            ],
            "properties": {
              "prefix": {
                "description": "Prefix is the prefix that should be matched. When multiple prefix rules\nmatch an image path, the longest one takes precedence.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of match.",
                "type": "string",
                "enum": [
                  "Prefix"
                ]
              }
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "matchImages should have at least one element.",
              "rule": "size(self) > 0"
            }
          ]
        },
        "registry": {
          "description": "Registry is the configuration for the registry.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "Authentication is the authentication information for the registry.",
              "type": "object",
              "required": [
                "pullSecretRef"
              ],
              "properties": {
                "pullSecretRef": {
                  "description": "PullSecretRef is a reference to a secret that contains the credentials for\nthe registry.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                }
              }
            }
          }
        },
        "rewriteImage": {
          "description": "RewriteImage defines how a matched image's path should be rewritten.",
          "type": "object",
          "required": [
            "prefix"
          ],
          "properties": {
            "prefix": {
              "description": "Prefix is the prefix that will replace the portion of the image's path\nmatched by the prefix in the ImageMatch. If multiple prefixes matched,\nthe longest one will be replaced.",
              "type": "string"
            }
          }
        },
        "verification": {
          "description": "Verification contains the configuration for verifying the image.",
          "type": "object",
          "required": [
            "provider"
          ],
          "properties": {
            "cosign": {
              "description": "Cosign is the configuration for verifying the image using cosign.",
              "type": "object",
              "required": [
                "authorities"
              ],
              "properties": {
                "authorities": {
                  "description": "Authorities defines the rules for discovering and validating signatures.",
                  "type": "array",
                  "items": {
                    "description": "CosignAuthority defines the rules for discovering and validating signatures.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "attestations": {
                        "description": "Attestations is a list of individual attestations for this authority,\nonce the signature for this authority has been verified.",
                        "type": "array",
                        "items": {
                          "description": "Attestation defines the type of attestation to validate and optionally\napply a policy decision to it. Authority block is used to verify the\nspecified attestation types, and if Policy is specified, then it's applied\nonly after the validation of the Attestation signature has been verified.",
                          "type": "object",
                          "required": [
                            "name",
                            "predicateType"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the attestation.",
                              "type": "string"
                            },
                            "predicateType": {
                              "description": "PredicateType defines which predicate type to verify. Matches cosign\nverify-attestation options.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "key": {
                        "description": "Key defines the type of key to validate the image.",
                        "type": "object",
                        "required": [
                          "hashAlgorithm",
                          "secretRef"
                        ],
                        "properties": {
                          "hashAlgorithm": {
                            "description": "HashAlgorithm always defaults to sha256 if the algorithm hasn't been explicitly set",
                            "type": "string"
                          },
                          "secretRef": {
                            "description": "SecretRef sets a reference to a secret with the key.",
                            "type": "object",
                            "required": [
                              "key",
                              "name"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the secret.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "keyless": {
                        "description": "Keyless sets the configuration to verify the authority against a Fulcio\ninstance.",
                        "type": "object",
                        "required": [
                          "identities"
                        ],
                        "properties": {
                          "identities": {
                            "description": "Identities sets a list of identities.",
                            "type": "array",
                            "items": {
                              "description": "Identity may contain the issuer and/or the subject found in the transparency\nlog.\nIssuer/Subject uses a strict match, while IssuerRegExp and SubjectRegExp\napply a regexp for matching.",
                              "type": "object",
                              "properties": {
                                "issuer": {
                                  "description": "Issuer defines the issuer for this identity.",
                                  "type": "string"
                                },
                                "issuerRegExp": {
                                  "description": "IssuerRegExp specifies a regular expression to match the issuer for this identity.\nThis has precedence over the Issuer field.",
                                  "type": "string"
                                },
                                "subject": {
                                  "description": "Subject defines the subject for this identity.",
                                  "type": "string"
                                },
                                "subjectRegExp": {
                                  "description": "SubjectRegExp specifies a regular expression to match the subject for this identity.\nThis has precedence over the Subject field.",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "insecureIgnoreSCT": {
                            "description": "InsecureIgnoreSCT omits verifying if a certificate contains an embedded SCT",
                            "type": "boolean"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name for this authority.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "provider": {
              "description": "Provider is the provider that should be used to verify the image.",
              "type": "string",
              "enum": [
                "Cosign"
              ]
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "pkg.crossplane.io",
      "kind": "ImageConfig",
      "version": "v1beta1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}