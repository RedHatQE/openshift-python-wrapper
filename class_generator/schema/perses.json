{
  "description": "Perses is the Schema for the perses API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "PersesSpec defines the desired state of Perses",
      "type": "object",
      "properties": {
        "affinity": {
          "description": "Affinity is a group of affinity scheduling rules.",
          "type": "object",
          "properties": {
            "nodeAffinity": {
              "description": "Describes node affinity scheduling rules for the pod.",
              "type": "object",
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.",
                  "type": "array",
                  "items": {
                    "description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                    "type": "object",
                    "required": [
                      "preference",
                      "weight"
                    ],
                    "properties": {
                      "preference": {
                        "description": "A node selector term, associated with the corresponding weight.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "A list of node selector requirements by node's labels.",
                            "type": "array",
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchFields": {
                            "description": "A list of node selector requirements by node's fields.",
                            "type": "array",
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "weight": {
                        "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.",
                  "type": "object",
                  "required": [
                    "nodeSelectorTerms"
                  ],
                  "properties": {
                    "nodeSelectorTerms": {
                      "description": "Required. A list of node selector terms. The terms are ORed.",
                      "type": "array",
                      "items": {
                        "description": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "A list of node selector requirements by node's labels.",
                            "type": "array",
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchFields": {
                            "description": "A list of node selector requirements by node's fields.",
                            "type": "array",
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                }
              }
            },
            "podAffinity": {
              "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
              "type": "object",
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                  "type": "array",
                  "items": {
                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                    "type": "object",
                    "required": [
                      "podAffinityTerm",
                      "weight"
                    ],
                    "properties": {
                      "podAffinityTerm": {
                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "matchLabelKeys": {
                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "mismatchLabelKeys": {
                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "namespaceSelector": {
                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "namespaces": {
                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      },
                      "weight": {
                        "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                  "type": "array",
                  "items": {
                    "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running",
                    "type": "object",
                    "required": [
                      "topologyKey"
                    ],
                    "properties": {
                      "labelSelector": {
                        "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "matchLabelKeys": {
                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "mismatchLabelKeys": {
                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "namespaceSelector": {
                        "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "namespaces": {
                        "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "topologyKey": {
                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-type": "atomic"
                }
              }
            },
            "podAntiAffinity": {
              "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
              "type": "object",
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                  "type": "array",
                  "items": {
                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                    "type": "object",
                    "required": [
                      "podAffinityTerm",
                      "weight"
                    ],
                    "properties": {
                      "podAffinityTerm": {
                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "matchLabelKeys": {
                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "mismatchLabelKeys": {
                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "namespaceSelector": {
                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "namespaces": {
                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      },
                      "weight": {
                        "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                  "type": "array",
                  "items": {
                    "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running",
                    "type": "object",
                    "required": [
                      "topologyKey"
                    ],
                    "properties": {
                      "labelSelector": {
                        "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "matchLabelKeys": {
                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "mismatchLabelKeys": {
                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "namespaceSelector": {
                        "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              }
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "namespaces": {
                        "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "topologyKey": {
                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-type": "atomic"
                }
              }
            }
          }
        },
        "args": {
          "description": "Args extra arguments to pass to perses",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "client": {
          "description": "Perses client configuration",
          "type": "object",
          "properties": {
            "tls": {
              "description": "TLS the equivalent to the tls_config for perses client",
              "type": "object",
              "required": [
                "enable"
              ],
              "properties": {
                "caCert": {
                  "description": "CaCert to verify the perses certificate",
                  "type": "object",
                  "required": [
                    "certPath",
                    "type"
                  ],
                  "properties": {
                    "certPath": {
                      "description": "Path to Certificate",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of certificate k8s resource (when type is secret or configmap)",
                      "type": "string"
                    },
                    "privateKeyPath": {
                      "description": "Path to Private key certificate",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type source type of certificate",
                      "type": "string",
                      "enum": [
                        "secret",
                        "configmap",
                        "file"
                      ]
                    }
                  }
                },
                "enable": {
                  "description": "Enable TLS connection to perses",
                  "type": "boolean"
                },
                "insecureSkipVerify": {
                  "description": "InsecureSkipVerify skip verify of perses certificate",
                  "type": "boolean"
                },
                "userCert": {
                  "description": "UserCert client cert/key for mTLS",
                  "type": "object",
                  "required": [
                    "certPath",
                    "type"
                  ],
                  "properties": {
                    "certPath": {
                      "description": "Path to Certificate",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of certificate k8s resource (when type is secret or configmap)",
                      "type": "string"
                    },
                    "privateKeyPath": {
                      "description": "Path to Private key certificate",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type source type of certificate",
                      "type": "string",
                      "enum": [
                        "secret",
                        "configmap",
                        "file"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "config": {
          "type": "object",
          "properties": {
            "api_prefix": {
              "description": "Use it in case you want to prefix the API path.",
              "type": "string"
            },
            "database": {
              "description": "Database contains the different configuration depending on the database you want to use",
              "type": "object",
              "properties": {
                "file": {
                  "type": "object",
                  "required": [
                    "folder"
                  ],
                  "properties": {
                    "case_sensitive": {
                      "type": "boolean"
                    },
                    "extension": {
                      "type": "string"
                    },
                    "folder": {
                      "type": "string"
                    }
                  }
                },
                "sql": {
                  "type": "object",
                  "required": [
                    "allow_all_files",
                    "allow_cleartext_passwords",
                    "allow_fallback_to_plaintext",
                    "allow_native_passwords",
                    "allow_old_passwords",
                    "case_sensitive",
                    "check_conn_liveness",
                    "client_found_rows",
                    "columns_with_alias",
                    "db_name",
                    "interpolate_params",
                    "max_allowed_packet",
                    "multi_statements",
                    "parse_time",
                    "read_timeout",
                    "reject_read_only",
                    "server_pub_key",
                    "timeout",
                    "write_timeout"
                  ],
                  "properties": {
                    "addr": {
                      "description": "Network address (requires Net)",
                      "type": "string"
                    },
                    "allow_all_files": {
                      "description": "Allow all files to be used with LOAD DATA LOCAL INFILE",
                      "type": "boolean"
                    },
                    "allow_cleartext_passwords": {
                      "description": "Allows the cleartext client side plugin",
                      "type": "boolean"
                    },
                    "allow_fallback_to_plaintext": {
                      "description": "Allows fallback to unencrypted connection if server does not support TLS",
                      "type": "boolean"
                    },
                    "allow_native_passwords": {
                      "description": "Allows the native password authentication method",
                      "type": "boolean"
                    },
                    "allow_old_passwords": {
                      "description": "Allows the old insecure password method",
                      "type": "boolean"
                    },
                    "case_sensitive": {
                      "type": "boolean"
                    },
                    "check_conn_liveness": {
                      "description": "Check connections for liveness before using them",
                      "type": "boolean"
                    },
                    "client_found_rows": {
                      "description": "Return number of matching rows instead of rows changed",
                      "type": "boolean"
                    },
                    "collation": {
                      "description": "Connection collation",
                      "type": "string"
                    },
                    "columns_with_alias": {
                      "description": "Prepend table alias to column names",
                      "type": "boolean"
                    },
                    "db_name": {
                      "description": "Database name",
                      "type": "string"
                    },
                    "interpolate_params": {
                      "description": "Interpolate placeholders into query string",
                      "type": "boolean"
                    },
                    "loc": {
                      "description": "Location for time.Time values",
                      "type": "object"
                    },
                    "max_allowed_packet": {
                      "description": "Max packet size allowed",
                      "type": "integer"
                    },
                    "multi_statements": {
                      "description": "Allow multiple statements in one query",
                      "type": "boolean"
                    },
                    "net": {
                      "description": "Network type",
                      "type": "string"
                    },
                    "parse_time": {
                      "description": "Parse time values to time.Time",
                      "type": "boolean"
                    },
                    "password": {
                      "description": "Password (requires User)",
                      "type": "string"
                    },
                    "password_file": {
                      "description": "PasswordFile is a path to a file that contains a password",
                      "type": "string"
                    },
                    "read_timeout": {
                      "description": "I/O read timeout",
                      "type": "string",
                      "format": "duration",
                      "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                    },
                    "reject_read_only": {
                      "description": "Reject read-only connections",
                      "type": "boolean"
                    },
                    "server_pub_key": {
                      "description": "Server public key name",
                      "type": "string"
                    },
                    "timeout": {
                      "description": "Dial timeout",
                      "type": "string",
                      "format": "duration",
                      "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                    },
                    "tls_config": {
                      "description": "TLS configuration",
                      "type": "object",
                      "required": [
                        "insecure_skip_verify"
                      ],
                      "properties": {
                        "ca": {
                          "description": "Text of the CA cert to use for the targets.",
                          "type": "string"
                        },
                        "ca_file": {
                          "description": "The CA cert to use for the targets.",
                          "type": "string"
                        },
                        "ca_ref": {
                          "description": "CARef is the name of the secret within the secret manager to use as the CA cert for the\ntargets.",
                          "type": "string"
                        },
                        "cert": {
                          "description": "Text of the client cert file for the targets.",
                          "type": "string"
                        },
                        "cert_file": {
                          "description": "The client cert file for the targets.",
                          "type": "string"
                        },
                        "cert_ref": {
                          "description": "CertRef is the name of the secret within the secret manager to use as the client cert for\nthe targets.",
                          "type": "string"
                        },
                        "insecure_skip_verify": {
                          "description": "Disable target certificate validation.",
                          "type": "boolean"
                        },
                        "key": {
                          "description": "Text of the client key file for the targets.",
                          "type": "string"
                        },
                        "key_file": {
                          "description": "The client key file for the targets.",
                          "type": "string"
                        },
                        "key_ref": {
                          "description": "KeyRef is the name of the secret within the secret manager to use as the client key for\nthe targets.",
                          "type": "string"
                        },
                        "max_version": {
                          "description": "Maximum TLS version.",
                          "type": "integer"
                        },
                        "min_version": {
                          "description": "Minimum TLS version.",
                          "type": "integer"
                        },
                        "server_name": {
                          "description": "Used to verify the hostname for the targets.",
                          "type": "string"
                        }
                      }
                    },
                    "user": {
                      "description": "Username",
                      "type": "string"
                    },
                    "write_timeout": {
                      "description": "I/O write timeout",
                      "type": "string",
                      "format": "duration",
                      "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                    }
                  }
                }
              }
            },
            "ephemeral_dashboard": {
              "description": "EphemeralDashboard contains the config about the ephemeral dashboard feature",
              "type": "object",
              "required": [
                "cleanup_interval",
                "enable"
              ],
              "properties": {
                "cleanup_interval": {
                  "description": "The interval at which to trigger the cleanup of ephemeral dashboards, based on their TTLs.",
                  "type": "string",
                  "format": "duration",
                  "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                },
                "enable": {
                  "description": "When true user will be able to use the ephemeral dashboard at project level.",
                  "type": "boolean"
                }
              }
            },
            "ephemeral_dashboards_cleanup_interval": {
              "description": "EphemeralDashboardsCleanupInterval is the interval at which the ephemeral dashboards are cleaned up\nDEPRECATED.\nPlease use the config EphemeralDashboard instead.",
              "type": "string",
              "format": "duration",
              "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
            },
            "frontend": {
              "description": "Frontend contains any config that will be used by the frontend itself.",
              "type": "object",
              "required": [
                "disable",
                "explorer"
              ],
              "properties": {
                "disable": {
                  "description": "When it is true, Perses won't serve the frontend anymore, and any other config set here will be ignored",
                  "type": "boolean"
                },
                "explorer": {
                  "description": "Explorer is activating the different kind of explorer supported.\nBe sure you have installed an associated plugin for each explorer type.",
                  "type": "object",
                  "required": [
                    "enable"
                  ],
                  "properties": {
                    "enable": {
                      "type": "boolean"
                    }
                  }
                },
                "important_dashboards": {
                  "description": "ImportantDashboards contains important dashboard selectors",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "dashboard",
                      "project"
                    ],
                    "properties": {
                      "dashboard": {
                        "description": "Dashboard is the name of the dashboard (dashboard.metadata.name)",
                        "type": "string"
                      },
                      "project": {
                        "description": "Project is the name of the project (dashboard.metadata.project)",
                        "type": "string"
                      }
                    }
                  }
                },
                "information": {
                  "description": "Information contains markdown content to be display on the home page",
                  "type": "string"
                },
                "time_range": {
                  "description": "TimeRange contains the time range configuration for the dropdown",
                  "type": "object",
                  "required": [
                    "disable_custom"
                  ],
                  "properties": {
                    "disable_custom": {
                      "type": "boolean"
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "duration",
                        "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                      }
                    }
                  }
                }
              }
            },
            "global_datasource_discovery": {
              "description": "GlobalDatasourceDiscovery is the configuration that helps to generate a list of global datasource based on the discovery chosen.\nBe careful: the data coming from the discovery will totally override what exists in the database.\nNote that this is an experimental feature. Behavior and config may change in the future.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "discovery_name"
                ],
                "properties": {
                  "discovery_name": {
                    "description": "The name of the discovery config. It is used for logging purposes only",
                    "type": "string"
                  },
                  "http_sd": {
                    "description": "HTTP-based service discovery provides a more generic way to generate a set of global datasource and serves as an interface to plug in custom service discovery mechanisms.\nIt fetches an HTTP endpoint containing a list of zero or more global datasources.\nThe target must reply with an HTTP 200 response.\nThe HTTP header Content-Type must be application/json, and the body must be valid array of JSON.",
                    "type": "object",
                    "required": [
                      "url"
                    ],
                    "properties": {
                      "authorization": {
                        "description": "The HTTP authorization credentials for the targets.",
                        "type": "object",
                        "properties": {
                          "credentials": {
                            "type": "string"
                          },
                          "credentialsFile": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          }
                        }
                      },
                      "basic_auth": {
                        "type": "object",
                        "required": [
                          "username"
                        ],
                        "properties": {
                          "password": {
                            "type": "string"
                          },
                          "passwordFile": {
                            "description": "PasswordFile is a path to a file that contains a password",
                            "type": "string"
                          },
                          "username": {
                            "type": "string"
                          }
                        }
                      },
                      "headers": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "native_auth": {
                        "type": "object",
                        "required": [
                          "login",
                          "password"
                        ],
                        "properties": {
                          "login": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          }
                        }
                      },
                      "oauth": {
                        "type": "object",
                        "required": [
                          "authStyle",
                          "clientID",
                          "clientSecret",
                          "clientSecretfile",
                          "endpointParams",
                          "scopes",
                          "tokenURL"
                        ],
                        "properties": {
                          "authStyle": {
                            "description": "AuthStyle optionally specifies how the endpoint wants the\nclient ID & client secret sent. The zero value means to\nauto-detect.",
                            "type": "integer"
                          },
                          "clientID": {
                            "description": "ClientID is the application's ID.",
                            "type": "string"
                          },
                          "clientSecret": {
                            "description": "ClientSecret is the application's secret.",
                            "type": "string"
                          },
                          "clientSecretfile": {
                            "type": "string"
                          },
                          "endpointParams": {
                            "description": "EndpointParams specifies additional parameters for requests to the token endpoint.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "scopes": {
                            "description": "Scope specifies optional requested permissions.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tokenURL": {
                            "description": "TokenURL is the resource server's token endpoint\nURL. This is a constant specific to each server.",
                            "type": "string"
                          }
                        }
                      },
                      "tls_config": {
                        "description": "TLSConfig to use to connect to the targets.",
                        "type": "object",
                        "properties": {
                          "ca": {
                            "description": "Text of the CA cert to use for the targets.",
                            "type": "string"
                          },
                          "caFile": {
                            "description": "The CA cert to use for the targets.",
                            "type": "string"
                          },
                          "cert": {
                            "description": "Text of the client cert file for the targets.",
                            "type": "string"
                          },
                          "certFile": {
                            "description": "The client cert file for the targets.",
                            "type": "string"
                          },
                          "insecureSkipVerify": {
                            "description": "Disable target certificate validation.",
                            "type": "boolean"
                          },
                          "key": {
                            "description": "Text of the client key file for the targets.",
                            "type": "string"
                          },
                          "keyFile": {
                            "description": "The client key file for the targets.",
                            "type": "string"
                          },
                          "maxVersion": {
                            "description": "Maximum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).\nIf unset, Perses will use Go default maximum version, which is TLS 1.3.\nSee MaxVersion in https://pkg.go.dev/crypto/tls#Config.",
                            "type": "string"
                          },
                          "minVersion": {
                            "description": "Minimum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).\nIf unset, Perses will use Go default minimum version, which is TLS 1.2.\nSee MinVersion in https://pkg.go.dev/crypto/tls#Config.",
                            "type": "string"
                          },
                          "serverName": {
                            "description": "Used to verify the hostname for the targets.",
                            "type": "string"
                          }
                        }
                      },
                      "url": {
                        "type": "object"
                      }
                    }
                  },
                  "kubernetes_sd": {
                    "description": "Kubernetes SD configurations allow retrieving global datasource from Kubernetes' REST API\nand always staying synchronized with the cluster state.",
                    "type": "object",
                    "required": [
                      "datasource_plugin_kind",
                      "namespace"
                    ],
                    "properties": {
                      "datasource_plugin_kind": {
                        "description": "DatasourcePluginKind is the name of the datasource plugin that should be filled when creating datasources found.",
                        "type": "string"
                      },
                      "labels": {
                        "description": "The labels used to filter the list of resource when contacting the Kubernetes API.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "namespace": {
                        "description": "Kubernetes namespace to constraint the query to only one namespace.\nLeave empty if you are looking for datasource cross-namespace.",
                        "type": "string"
                      },
                      "pod_configuration": {
                        "description": "Configuration when you want to discover the pods in Kubernetes",
                        "type": "object",
                        "properties": {
                          "container_name": {
                            "description": "Name of the container the target address points to.",
                            "type": "string"
                          },
                          "container_port_name": {
                            "description": "Name of the container port.",
                            "type": "string"
                          },
                          "container_port_number": {
                            "description": "Number of the container port.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "enable": {
                            "description": "If set to true, Perses server will discovery the pod",
                            "type": "boolean"
                          }
                        }
                      },
                      "service_configuration": {
                        "description": "Configuration when you want to discover the services in Kubernetes",
                        "type": "object",
                        "properties": {
                          "enable": {
                            "description": "If set to true, Perses server will discovery the service",
                            "type": "boolean"
                          },
                          "port_name": {
                            "description": "Name of the service port for the target.",
                            "type": "string"
                          },
                          "port_number": {
                            "description": "Number of the service port for the target.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "service_type": {
                            "description": "The type of the service.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "refresh_interval": {
                    "description": "Refresh interval to re-query the endpoint.",
                    "type": "string",
                    "format": "duration",
                    "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                  }
                }
              }
            },
            "provisioning": {
              "description": "Provisioning contains the provisioning config that can be used if you want to provide default resources.",
              "type": "object",
              "properties": {
                "folders": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "interval": {
                  "description": "Interval is the refresh frequency",
                  "type": "string",
                  "format": "duration",
                  "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                }
              }
            },
            "schemas": {
              "description": "Schemas contain the configuration to get access to the CUE schemas",
              "type": "object",
              "properties": {
                "datasources_path": {
                  "type": "string"
                },
                "interval": {
                  "type": "string",
                  "format": "duration",
                  "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                },
                "panels_path": {
                  "type": "string"
                },
                "queries_path": {
                  "type": "string"
                },
                "variables_path": {
                  "type": "string"
                }
              }
            },
            "security": {
              "description": "Security contains any configuration that changes the API behavior like the endpoints exposed or if the permissions are activated.",
              "type": "object",
              "required": [
                "cookie",
                "enable_auth",
                "readonly"
              ],
              "properties": {
                "authentication": {
                  "description": "Authentication contains configuration regarding management of access/refresh token",
                  "type": "object",
                  "required": [
                    "disable_sign_up",
                    "providers"
                  ],
                  "properties": {
                    "access_token_ttl": {
                      "description": "AccessTokenTTL is the time to live of the access token. By default, it is 15 minutes.",
                      "type": "string",
                      "format": "duration",
                      "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                    },
                    "disable_sign_up": {
                      "description": "DisableSignUp deactivates the Sign-up page in the UI.\nIt also disables the endpoint that gives the possibility to create a user.",
                      "type": "boolean"
                    },
                    "providers": {
                      "description": "Providers configure the different authentication providers",
                      "type": "object",
                      "required": [
                        "enable_native"
                      ],
                      "properties": {
                        "enable_native": {
                          "type": "boolean"
                        },
                        "oauth": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "auth_url",
                              "client_id",
                              "device_auth_url",
                              "http",
                              "name",
                              "slug_id",
                              "token_url",
                              "user_infos_url"
                            ],
                            "properties": {
                              "auth_url": {
                                "type": "object"
                              },
                              "client_credentials": {
                                "type": "object",
                                "required": [
                                  "client_id",
                                  "client_secret",
                                  "scopes"
                                ],
                                "properties": {
                                  "client_id": {
                                    "description": "Hidden special type for storing secrets.",
                                    "type": "string"
                                  },
                                  "client_secret": {
                                    "description": "Hidden special type for storing secrets.",
                                    "type": "string"
                                  },
                                  "scopes": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "client_id": {
                                "description": "Hidden special type for storing secrets.",
                                "type": "string"
                              },
                              "client_secret": {
                                "description": "Hidden special type for storing secrets.",
                                "type": "string"
                              },
                              "custom_login_property": {
                                "type": "string"
                              },
                              "device_auth_url": {
                                "type": "object"
                              },
                              "device_code": {
                                "type": "object",
                                "required": [
                                  "client_id",
                                  "client_secret",
                                  "scopes"
                                ],
                                "properties": {
                                  "client_id": {
                                    "description": "Hidden special type for storing secrets.",
                                    "type": "string"
                                  },
                                  "client_secret": {
                                    "description": "Hidden special type for storing secrets.",
                                    "type": "string"
                                  },
                                  "scopes": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "http": {
                                "type": "object",
                                "required": [
                                  "timeout",
                                  "tls_config"
                                ],
                                "properties": {
                                  "timeout": {
                                    "type": "string",
                                    "format": "duration",
                                    "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                                  },
                                  "tls_config": {
                                    "type": "object",
                                    "properties": {
                                      "ca": {
                                        "description": "Text of the CA cert to use for the targets.",
                                        "type": "string"
                                      },
                                      "caFile": {
                                        "description": "The CA cert to use for the targets.",
                                        "type": "string"
                                      },
                                      "cert": {
                                        "description": "Text of the client cert file for the targets.",
                                        "type": "string"
                                      },
                                      "certFile": {
                                        "description": "The client cert file for the targets.",
                                        "type": "string"
                                      },
                                      "insecureSkipVerify": {
                                        "description": "Disable target certificate validation.",
                                        "type": "boolean"
                                      },
                                      "key": {
                                        "description": "Text of the client key file for the targets.",
                                        "type": "string"
                                      },
                                      "keyFile": {
                                        "description": "The client key file for the targets.",
                                        "type": "string"
                                      },
                                      "maxVersion": {
                                        "description": "Maximum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).\nIf unset, Perses will use Go default maximum version, which is TLS 1.3.\nSee MaxVersion in https://pkg.go.dev/crypto/tls#Config.",
                                        "type": "string"
                                      },
                                      "minVersion": {
                                        "description": "Minimum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).\nIf unset, Perses will use Go default minimum version, which is TLS 1.2.\nSee MinVersion in https://pkg.go.dev/crypto/tls#Config.",
                                        "type": "string"
                                      },
                                      "serverName": {
                                        "description": "Used to verify the hostname for the targets.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "name": {
                                "type": "string"
                              },
                              "redirect_uri": {
                                "type": "object"
                              },
                              "scopes": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "slug_id": {
                                "type": "string"
                              },
                              "token_url": {
                                "type": "object"
                              },
                              "user_infos_url": {
                                "type": "object"
                              }
                            }
                          }
                        },
                        "oidc": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "client_id",
                              "disable_pkce",
                              "http",
                              "issuer",
                              "name",
                              "slug_id"
                            ],
                            "properties": {
                              "client_credentials": {
                                "type": "object",
                                "required": [
                                  "client_id",
                                  "client_secret",
                                  "scopes"
                                ],
                                "properties": {
                                  "client_id": {
                                    "description": "Hidden special type for storing secrets.",
                                    "type": "string"
                                  },
                                  "client_secret": {
                                    "description": "Hidden special type for storing secrets.",
                                    "type": "string"
                                  },
                                  "scopes": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "client_id": {
                                "description": "Hidden special type for storing secrets.",
                                "type": "string"
                              },
                              "client_secret": {
                                "description": "Hidden special type for storing secrets.",
                                "type": "string"
                              },
                              "device_code": {
                                "type": "object",
                                "required": [
                                  "client_id",
                                  "client_secret",
                                  "scopes"
                                ],
                                "properties": {
                                  "client_id": {
                                    "description": "Hidden special type for storing secrets.",
                                    "type": "string"
                                  },
                                  "client_secret": {
                                    "description": "Hidden special type for storing secrets.",
                                    "type": "string"
                                  },
                                  "scopes": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "disable_pkce": {
                                "type": "boolean"
                              },
                              "discovery_url": {
                                "type": "object"
                              },
                              "http": {
                                "type": "object",
                                "required": [
                                  "timeout",
                                  "tls_config"
                                ],
                                "properties": {
                                  "timeout": {
                                    "type": "string",
                                    "format": "duration",
                                    "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                                  },
                                  "tls_config": {
                                    "type": "object",
                                    "properties": {
                                      "ca": {
                                        "description": "Text of the CA cert to use for the targets.",
                                        "type": "string"
                                      },
                                      "caFile": {
                                        "description": "The CA cert to use for the targets.",
                                        "type": "string"
                                      },
                                      "cert": {
                                        "description": "Text of the client cert file for the targets.",
                                        "type": "string"
                                      },
                                      "certFile": {
                                        "description": "The client cert file for the targets.",
                                        "type": "string"
                                      },
                                      "insecureSkipVerify": {
                                        "description": "Disable target certificate validation.",
                                        "type": "boolean"
                                      },
                                      "key": {
                                        "description": "Text of the client key file for the targets.",
                                        "type": "string"
                                      },
                                      "keyFile": {
                                        "description": "The client key file for the targets.",
                                        "type": "string"
                                      },
                                      "maxVersion": {
                                        "description": "Maximum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).\nIf unset, Perses will use Go default maximum version, which is TLS 1.3.\nSee MaxVersion in https://pkg.go.dev/crypto/tls#Config.",
                                        "type": "string"
                                      },
                                      "minVersion": {
                                        "description": "Minimum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).\nIf unset, Perses will use Go default minimum version, which is TLS 1.2.\nSee MinVersion in https://pkg.go.dev/crypto/tls#Config.",
                                        "type": "string"
                                      },
                                      "serverName": {
                                        "description": "Used to verify the hostname for the targets.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "issuer": {
                                "type": "object"
                              },
                              "name": {
                                "type": "string"
                              },
                              "redirect_uri": {
                                "type": "object"
                              },
                              "scopes": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "slug_id": {
                                "type": "string"
                              },
                              "url_params": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "refresh_token_ttl": {
                      "description": "RefreshTokenTTL is the time to live of the refresh token.\nThe refresh token is used to get a new access token when it is expired.\nBy default, it is 24 hours.",
                      "type": "string",
                      "format": "duration",
                      "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                    }
                  }
                },
                "authorization": {
                  "description": "Authorization contains all configs around rbac (permissions and roles)",
                  "type": "object",
                  "properties": {
                    "check_latest_update_interval": {
                      "description": "CheckLatestUpdateInterval that checks if the RBAC cache needs to be refreshed with db content. Only for SQL database setup.",
                      "type": "string",
                      "format": "duration",
                      "pattern": "^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$"
                    },
                    "guest_permissions": {
                      "description": "Default permissions for guest users (logged-in users)",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "actions",
                          "scopes"
                        ],
                        "properties": {
                          "actions": {
                            "description": "Actions of the permission (read, create, update, delete, ...)",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "scopes": {
                            "description": "The list of kind targeted by the permission. For example: `Datasource`, `Dashboard`, ...\nWith Role, you can't target global kinds",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "cookie": {
                  "description": "Cookie configuration",
                  "type": "object",
                  "required": [
                    "secure"
                  ],
                  "properties": {
                    "same_site": {
                      "description": "Set the SameSite cookie attribute and prevents the browser from sending the cookie along with cross-site requests.\nThe main goal is to mitigate the risk of cross-origin information leakage.\nThis setting also provides some protection against cross-site request forgery attacks (CSRF)",
                      "type": "integer"
                    },
                    "secure": {
                      "description": "Set to true if you host Perses behind HTTPS. Default is false",
                      "type": "boolean"
                    }
                  }
                },
                "enable_auth": {
                  "description": "When it is true, the authentication and authorization config are considered.\nAnd you will need a valid JWT token to contact most of the endpoints exposed by the API",
                  "type": "boolean"
                },
                "encryption_key": {
                  "description": "EncryptionKey is the secret key used to encrypt and decrypt sensitive data\nstored in the database such as the password of the basic auth for a datasource.\nNote that if it is not provided, it will use a default value.\nOn a production instance, you should set this key.\nAlso note the key size must be exactly 32 bytes long as we are using AES-256 to encrypt the data.",
                  "type": "string"
                },
                "encryption_key_file": {
                  "description": "EncryptionKeyFile is the path to file containing the secret key",
                  "type": "string"
                },
                "readonly": {
                  "description": "Readonly will deactivate any HTTP POST, PUT, DELETE endpoint",
                  "type": "boolean"
                }
              }
            }
          }
        },
        "containerPort": {
          "type": "integer",
          "format": "int32"
        },
        "image": {
          "description": "Image specifies the container image that should be used for the Perses deployment.",
          "type": "string"
        },
        "livenessProbe": {
          "description": "Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.",
          "type": "object",
          "properties": {
            "exec": {
              "description": "Exec specifies a command to execute in the container.",
              "type": "object",
              "properties": {
                "command": {
                  "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "atomic"
                }
              }
            },
            "failureThreshold": {
              "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
              "type": "integer",
              "format": "int32"
            },
            "grpc": {
              "description": "GRPC specifies a GRPC HealthCheckRequest.",
              "type": "object",
              "required": [
                "port"
              ],
              "properties": {
                "port": {
                  "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                  "type": "integer",
                  "format": "int32"
                },
                "service": {
                  "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                  "type": "string"
                }
              }
            },
            "httpGet": {
              "description": "HTTPGet specifies an HTTP GET request to perform.",
              "type": "object",
              "required": [
                "port"
              ],
              "properties": {
                "host": {
                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.",
                  "type": "string"
                },
                "httpHeaders": {
                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                  "type": "array",
                  "items": {
                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                    "type": "object",
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "name": {
                        "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The header field value",
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "path": {
                  "description": "Path to access on the HTTP server.",
                  "type": "string"
                },
                "port": {
                  "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                  "x-kubernetes-int-or-string": true
                },
                "scheme": {
                  "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.",
                  "type": "string"
                }
              }
            },
            "initialDelaySeconds": {
              "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
              "type": "integer",
              "format": "int32"
            },
            "periodSeconds": {
              "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
              "type": "integer",
              "format": "int32"
            },
            "successThreshold": {
              "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
              "type": "integer",
              "format": "int32"
            },
            "tcpSocket": {
              "description": "TCPSocket specifies a connection to a TCP port.",
              "type": "object",
              "required": [
                "port"
              ],
              "properties": {
                "host": {
                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                  "type": "string"
                },
                "port": {
                  "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                  "x-kubernetes-int-or-string": true
                }
              }
            },
            "terminationGracePeriodSeconds": {
              "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
              "type": "integer",
              "format": "int64"
            },
            "timeoutSeconds": {
              "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "metadata": {
          "description": "Metadata to add to deployed pods",
          "type": "object",
          "properties": {
            "annotations": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "nodeSelector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "readinessProbe": {
          "description": "Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.",
          "type": "object",
          "properties": {
            "exec": {
              "description": "Exec specifies a command to execute in the container.",
              "type": "object",
              "properties": {
                "command": {
                  "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "atomic"
                }
              }
            },
            "failureThreshold": {
              "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
              "type": "integer",
              "format": "int32"
            },
            "grpc": {
              "description": "GRPC specifies a GRPC HealthCheckRequest.",
              "type": "object",
              "required": [
                "port"
              ],
              "properties": {
                "port": {
                  "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                  "type": "integer",
                  "format": "int32"
                },
                "service": {
                  "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                  "type": "string"
                }
              }
            },
            "httpGet": {
              "description": "HTTPGet specifies an HTTP GET request to perform.",
              "type": "object",
              "required": [
                "port"
              ],
              "properties": {
                "host": {
                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.",
                  "type": "string"
                },
                "httpHeaders": {
                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                  "type": "array",
                  "items": {
                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                    "type": "object",
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "name": {
                        "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The header field value",
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "path": {
                  "description": "Path to access on the HTTP server.",
                  "type": "string"
                },
                "port": {
                  "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                  "x-kubernetes-int-or-string": true
                },
                "scheme": {
                  "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.",
                  "type": "string"
                }
              }
            },
            "initialDelaySeconds": {
              "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
              "type": "integer",
              "format": "int32"
            },
            "periodSeconds": {
              "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
              "type": "integer",
              "format": "int32"
            },
            "successThreshold": {
              "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
              "type": "integer",
              "format": "int32"
            },
            "tcpSocket": {
              "description": "TCPSocket specifies a connection to a TCP port.",
              "type": "object",
              "required": [
                "port"
              ],
              "properties": {
                "host": {
                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                  "type": "string"
                },
                "port": {
                  "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                  "x-kubernetes-int-or-string": true
                }
              }
            },
            "terminationGracePeriodSeconds": {
              "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
              "type": "integer",
              "format": "int64"
            },
            "timeoutSeconds": {
              "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "replicas": {
          "type": "integer",
          "format": "int32"
        },
        "service": {
          "description": "service specifies the service configuration for the perses instance",
          "type": "object",
          "properties": {
            "annotations": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "name": {
              "type": "string"
            }
          }
        },
        "tls": {
          "description": "tls specifies the tls configuration for the perses instance",
          "type": "object",
          "required": [
            "enable"
          ],
          "properties": {
            "caCert": {
              "description": "CaCert to verify the perses certificate",
              "type": "object",
              "required": [
                "certPath",
                "type"
              ],
              "properties": {
                "certPath": {
                  "description": "Path to Certificate",
                  "type": "string"
                },
                "name": {
                  "description": "Name of certificate k8s resource (when type is secret or configmap)",
                  "type": "string"
                },
                "privateKeyPath": {
                  "description": "Path to Private key certificate",
                  "type": "string"
                },
                "type": {
                  "description": "Type source type of certificate",
                  "type": "string",
                  "enum": [
                    "secret",
                    "configmap",
                    "file"
                  ]
                }
              }
            },
            "enable": {
              "description": "Enable TLS connection to perses",
              "type": "boolean"
            },
            "insecureSkipVerify": {
              "description": "InsecureSkipVerify skip verify of perses certificate",
              "type": "boolean"
            },
            "userCert": {
              "description": "UserCert client cert/key for mTLS",
              "type": "object",
              "required": [
                "certPath",
                "type"
              ],
              "properties": {
                "certPath": {
                  "description": "Path to Certificate",
                  "type": "string"
                },
                "name": {
                  "description": "Name of certificate k8s resource (when type is secret or configmap)",
                  "type": "string"
                },
                "privateKeyPath": {
                  "description": "Path to Private key certificate",
                  "type": "string"
                },
                "type": {
                  "description": "Type source type of certificate",
                  "type": "string",
                  "enum": [
                    "secret",
                    "configmap",
                    "file"
                  ]
                }
              }
            }
          }
        },
        "tolerations": {
          "type": "array",
          "items": {
            "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple <key,value,effect> using the matching operator <operator>.",
            "type": "object",
            "properties": {
              "effect": {
                "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                "type": "string"
              },
              "key": {
                "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                "type": "string"
              },
              "operator": {
                "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
                "type": "string"
              },
              "tolerationSeconds": {
                "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
                "type": "integer",
                "format": "int64"
              },
              "value": {
                "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "status": {
      "description": "PersesStatus defines the observed state of Perses",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "perses.dev",
      "kind": "Perses",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}