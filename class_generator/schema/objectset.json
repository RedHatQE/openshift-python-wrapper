{
  "description": "ObjectSet reconciles a collection of objects through ordered phases and aggregates their status.\n\nObjectSets behave similarly to Kubernetes ReplicaSets, by managing a collection of objects and\nbeing itself mostly immutable. This object type is able to suspend/pause reconciliation of\nspecific objects to facilitate the transition between revisions.\n\nArchived ObjectSets may stay on the cluster, to store information about previous revisions.\n\nA Cluster-scoped version of this API is available as ClusterObjectSet.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ObjectSetSpec defines the desired state of a ObjectSet.",
      "type": "object",
      "properties": {
        "availabilityProbes": {
          "description": "Availability Probes check objects that are part of the package.\nAll probes need to succeed for a package to be considered Available.\nFailing probes will prevent the reconciliation of objects in later phases.",
          "type": "array",
          "items": {
            "description": "ObjectSetProbe define how ObjectSets check their children for their status.",
            "type": "object",
            "required": [
              "probes",
              "selector"
            ],
            "properties": {
              "probes": {
                "description": "Probe configuration parameters.",
                "type": "array",
                "items": {
                  "description": "Probe defines probe parameters. Only one can be filled.",
                  "type": "object",
                  "properties": {
                    "cel": {
                      "description": "ProbeCELSpec uses Common Expression Language (CEL) to probe an object.\nCEL rules have to evaluate to a boolean to be valid.\nSee:\nhttps://kubernetes.io/docs/reference/using-api/cel\nhttps://github.com/google/cel-go",
                      "type": "object",
                      "required": [
                        "message",
                        "rule"
                      ],
                      "properties": {
                        "message": {
                          "description": "Error message to output if rule evaluates to false.",
                          "type": "string"
                        },
                        "rule": {
                          "description": "CEL rule to evaluate.",
                          "type": "string"
                        }
                      }
                    },
                    "condition": {
                      "description": "ProbeConditionSpec checks whether or not the object reports a condition with given type and status.",
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "status": {
                          "description": "Condition status to probe for.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Condition type to probe for.",
                          "type": "string"
                        }
                      }
                    },
                    "fieldsEqual": {
                      "description": "ProbeFieldsEqualSpec compares two fields specified by JSON Paths.",
                      "type": "object",
                      "required": [
                        "fieldA",
                        "fieldB"
                      ],
                      "properties": {
                        "fieldA": {
                          "description": "First field for comparison.",
                          "type": "string"
                        },
                        "fieldB": {
                          "description": "Second field for comparison.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "selector": {
                "description": "Selector specifies which objects this probe should target.",
                "type": "object",
                "required": [
                  "kind"
                ],
                "properties": {
                  "kind": {
                    "description": "Kind and API Group of the object to probe.",
                    "type": "object",
                    "required": [
                      "group",
                      "kind"
                    ],
                    "properties": {
                      "group": {
                        "description": "Object Group to apply a probe to.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Object Kind to apply a probe to.",
                        "type": "string"
                      }
                    }
                  },
                  "selector": {
                    "description": "Further sub-selects objects based on a Label Selector.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            }
                          }
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  }
                }
              }
            }
          }
        },
        "lifecycleState": {
          "description": "Specifies the lifecycle state of the ObjectSet.",
          "type": "string",
          "enum": [
            "Active",
            "Paused",
            "Archived"
          ]
        },
        "phases": {
          "description": "Reconcile phase configuration for a ObjectSet.\nPhases will be reconciled in order and the contained objects checked\nagainst given probes before continuing with the next phase.",
          "type": "array",
          "items": {
            "description": "ObjectSetTemplatePhase configures the reconcile phase of ObjectSets.",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "class": {
                "description": "If non empty, the ObjectSet controller will delegate phase reconciliation\nto another controller, by creating an ObjectSetPhase object. If set to the\nstring \"default\" the built-in Package Operator ObjectSetPhase controller\nwill reconcile the object in the same way the ObjectSet would. If set to\nany other string, an out-of-tree controller needs to be present to handle\nObjectSetPhase objects.",
                "type": "string"
              },
              "name": {
                "description": "Name of the reconcile phase. Must be unique within a ObjectSet.",
                "type": "string"
              },
              "objects": {
                "description": "Objects belonging to this phase.",
                "type": "array",
                "items": {
                  "description": "ObjectSetObject is an object that is part of the phase of an ObjectSet.",
                  "type": "object",
                  "required": [
                    "object"
                  ],
                  "properties": {
                    "collisionProtection": {
                      "description": "Collision protection prevents Package Operator from working on objects already under\nmanagement by a different operator.",
                      "type": "string"
                    },
                    "conditionMappings": {
                      "description": "Maps conditions from this object into the Package Operator APIs.",
                      "type": "array",
                      "items": {
                        "description": "ConditionMapping maps one condition type to another.",
                        "type": "object",
                        "required": [
                          "destinationType",
                          "sourceType"
                        ],
                        "properties": {
                          "destinationType": {
                            "description": "Destination condition type to report into Package Operator APIs.",
                            "type": "string",
                            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]"
                          },
                          "sourceType": {
                            "description": "Source condition type.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "object": {
                      "x-kubernetes-embedded-resource": true,
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              },
              "slices": {
                "description": "References to ObjectSlices containing objects for this phase.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "previous": {
          "description": "Previous revisions of the ObjectSet to adopt objects from.",
          "type": "array",
          "items": {
            "description": "PreviousRevisionReference references a previous revision of an ObjectSet or ClusterObjectSet.",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name of a previous revision.",
                "type": "string"
              }
            }
          }
        },
        "successDelaySeconds": {
          "description": "Success Delay Seconds applies a wait period from the time an\nObject Set is available to the time it is marked as successful.\nThis can be used to prevent false reporting of success when\nthe underlying objects may initially satisfy the availability\nprobes, but are ultimately unstable.",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-kubernetes-validations": [
        {
          "message": "previous is immutable",
          "rule": "(has(self.previous) == has(oldSelf.previous)) && (!has(self.previous) || (self.previous == oldSelf.previous))"
        },
        {
          "message": "phases is immutable",
          "rule": "(has(self.phases) == has(oldSelf.phases)) && (!has(self.phases) || (self.phases == oldSelf.phases))"
        },
        {
          "message": "availabilityProbes is immutable",
          "rule": "(has(self.availabilityProbes) == has(oldSelf.availabilityProbes)) && (!has(self.availabilityProbes) || (self.availabilityProbes == oldSelf.availabilityProbes))"
        },
        {
          "message": "successDelaySeconds is immutable",
          "rule": "(has(self.successDelaySeconds) == has(oldSelf.successDelaySeconds)) && (!has(self.successDelaySeconds) || (self.successDelaySeconds == oldSelf.successDelaySeconds))"
        }
      ]
    },
    "status": {
      "description": "ObjectSetStatus defines the observed state of a ObjectSet.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions is a list of status conditions ths object is in.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          }
        },
        "controllerOf": {
          "description": "References all objects controlled by this instance.",
          "type": "array",
          "items": {
            "description": "ControlledObjectReference an object controlled by this object.",
            "type": "object",
            "required": [
              "group",
              "kind",
              "name"
            ],
            "properties": {
              "group": {
                "description": "Object Group.",
                "type": "string"
              },
              "kind": {
                "description": "Object Kind.",
                "type": "string"
              },
              "name": {
                "description": "Object Name.",
                "type": "string"
              },
              "namespace": {
                "description": "Object Namespace.",
                "type": "string"
              }
            }
          }
        },
        "remotePhases": {
          "description": "Remote phases aka ObjectSetPhase objects.",
          "type": "array",
          "items": {
            "description": "RemotePhaseReference remote phases aka ObjectSetPhase/ClusterObjectSetPhase objects to which a phase is delegated.",
            "type": "object",
            "required": [
              "name",
              "uid"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "uid": {
                "description": "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.",
                "type": "string"
              }
            }
          }
        },
        "revision": {
          "description": "Computed revision number, monotonically increasing.",
          "type": "integer",
          "format": "int64"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "package-operator.run",
      "kind": "ObjectSet",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}