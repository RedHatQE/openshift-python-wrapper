{
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html",
      "type": "object",
      "required": [
        "host"
      ],
      "properties": {
        "exportTo": {
          "description": "A list of namespaces to which this destination rule is exported.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "host": {
          "description": "The name of a service from the service registry.",
          "type": "string"
        },
        "subsets": {
          "description": "One or more named sets that represent individual versions of a service.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "labels": {
                "description": "Labels apply a filter over the endpoints of a service in the service registry.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "description": "Name of the subset.",
                "type": "string"
              },
              "trafficPolicy": {
                "description": "Traffic policies that apply to this subset.",
                "type": "object",
                "properties": {
                  "connectionPool": {
                    "type": "object",
                    "properties": {
                      "http": {
                        "description": "HTTP connection pool settings.",
                        "type": "object",
                        "properties": {
                          "h2UpgradePolicy": {
                            "description": "Specify if http1.1 connection should be upgraded to http2 for the associated destination.",
                            "type": "string",
                            "enum": [
                              "DEFAULT",
                              "DO_NOT_UPGRADE",
                              "UPGRADE"
                            ]
                          },
                          "http1MaxPendingRequests": {
                            "description": "Maximum number of requests that will be queued while waiting for a ready connection pool connection.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "http2MaxRequests": {
                            "description": "Maximum number of active requests to a destination.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "idleTimeout": {
                            "description": "The idle timeout for upstream connection pool connections.",
                            "type": "string"
                          },
                          "maxRequestsPerConnection": {
                            "description": "Maximum number of requests per connection to a backend.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "maxRetries": {
                            "description": "Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "useClientProtocol": {
                            "description": "If set to true, client protocol will be preserved while initiating connection to backend.",
                            "type": "boolean"
                          }
                        }
                      },
                      "tcp": {
                        "description": "Settings common to both HTTP and TCP upstream connections.",
                        "type": "object",
                        "properties": {
                          "connectTimeout": {
                            "description": "TCP connection timeout.",
                            "type": "string"
                          },
                          "maxConnectionDuration": {
                            "description": "The maximum duration of a connection.",
                            "type": "string"
                          },
                          "maxConnections": {
                            "description": "Maximum number of HTTP1 /TCP connections to a destination host.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "tcpKeepalive": {
                            "description": "If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.",
                            "type": "object",
                            "properties": {
                              "interval": {
                                "description": "The time duration between keep-alive probes.",
                                "type": "string"
                              },
                              "probes": {
                                "description": "Maximum number of keepalive probes to send without response before deciding the connection is dead.",
                                "type": "integer"
                              },
                              "time": {
                                "description": "The time duration a connection needs to be idle before keep-alive probes start being sent.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "loadBalancer": {
                    "description": "Settings controlling the load balancer algorithms.",
                    "type": "object",
                    "properties": {
                      "consistentHash": {
                        "type": "object",
                        "properties": {
                          "httpCookie": {
                            "description": "Hash based on HTTP cookie.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the cookie.",
                                "type": "string"
                              },
                              "path": {
                                "description": "Path to set for the cookie.",
                                "type": "string"
                              },
                              "ttl": {
                                "description": "Lifetime of the cookie.",
                                "type": "string"
                              }
                            }
                          },
                          "httpHeaderName": {
                            "description": "Hash based on a specific HTTP header.",
                            "type": "string"
                          },
                          "httpQueryParameterName": {
                            "description": "Hash based on a specific HTTP query parameter.",
                            "type": "string"
                          },
                          "maglev": {
                            "description": "The Maglev load balancer implements consistent hashing to backend hosts.",
                            "type": "object",
                            "properties": {
                              "tableSize": {
                                "description": "The table size for Maglev hashing.",
                                "type": "integer"
                              }
                            }
                          },
                          "minimumRingSize": {
                            "description": "Deprecated.",
                            "type": "integer"
                          },
                          "ringHash": {
                            "description": "The ring/modulo hash load balancer implements consistent hashing to backend hosts.",
                            "type": "object",
                            "properties": {
                              "minimumRingSize": {
                                "description": "The minimum number of virtual nodes to use for the hash ring.",
                                "type": "integer"
                              }
                            }
                          },
                          "useSourceIp": {
                            "description": "Hash based on the source IP address.",
                            "type": "boolean"
                          }
                        }
                      },
                      "localityLbSetting": {
                        "type": "object",
                        "properties": {
                          "distribute": {
                            "description": "Optional: only one of distribute, failover or failoverPriority can be set.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "from": {
                                  "description": "Originating locality, '/' separated, e.g.",
                                  "type": "string"
                                },
                                "to": {
                                  "description": "Map of upstream localities to traffic distribution weights.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          },
                          "enabled": {
                            "description": "enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety."
                          },
                          "failover": {
                            "description": "Optional: only one of distribute, failover or failoverPriority can be set.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "from": {
                                  "description": "Originating region.",
                                  "type": "string"
                                },
                                "to": {
                                  "description": "Destination region the traffic will fail over to when endpoints in the 'from' region becomes unhealthy.",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "failoverPriority": {
                            "description": "failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "simple": {
                        "type": "string",
                        "enum": [
                          "UNSPECIFIED",
                          "LEAST_CONN",
                          "RANDOM",
                          "PASSTHROUGH",
                          "ROUND_ROBIN",
                          "LEAST_REQUEST"
                        ]
                      },
                      "warmupDurationSecs": {
                        "description": "Represents the warmup duration of Service.",
                        "type": "string"
                      }
                    }
                  },
                  "outlierDetection": {
                    "type": "object",
                    "properties": {
                      "baseEjectionTime": {
                        "description": "Minimum ejection duration.",
                        "type": "string"
                      },
                      "consecutive5xxErrors": {
                        "description": "Number of 5xx errors before a host is ejected from the connection pool."
                      },
                      "consecutiveErrors": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "consecutiveGatewayErrors": {
                        "description": "Number of gateway errors before a host is ejected from the connection pool."
                      },
                      "consecutiveLocalOriginFailures": {
                        "description": "The number of consecutive locally originated failures before ejection occurs."
                      },
                      "interval": {
                        "description": "Time interval between ejection sweep analysis.",
                        "type": "string"
                      },
                      "maxEjectionPercent": {
                        "description": "Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "minHealthPercent": {
                        "description": "Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "splitExternalLocalOriginErrors": {
                        "description": "Determines whether to distinguish local origin failures from external errors.",
                        "type": "boolean"
                      }
                    }
                  },
                  "portLevelSettings": {
                    "description": "Traffic policies specific to individual ports.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "connectionPool": {
                          "type": "object",
                          "properties": {
                            "http": {
                              "description": "HTTP connection pool settings.",
                              "type": "object",
                              "properties": {
                                "h2UpgradePolicy": {
                                  "description": "Specify if http1.1 connection should be upgraded to http2 for the associated destination.",
                                  "type": "string",
                                  "enum": [
                                    "DEFAULT",
                                    "DO_NOT_UPGRADE",
                                    "UPGRADE"
                                  ]
                                },
                                "http1MaxPendingRequests": {
                                  "description": "Maximum number of requests that will be queued while waiting for a ready connection pool connection.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "http2MaxRequests": {
                                  "description": "Maximum number of active requests to a destination.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "idleTimeout": {
                                  "description": "The idle timeout for upstream connection pool connections.",
                                  "type": "string"
                                },
                                "maxRequestsPerConnection": {
                                  "description": "Maximum number of requests per connection to a backend.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "maxRetries": {
                                  "description": "Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "useClientProtocol": {
                                  "description": "If set to true, client protocol will be preserved while initiating connection to backend.",
                                  "type": "boolean"
                                }
                              }
                            },
                            "tcp": {
                              "description": "Settings common to both HTTP and TCP upstream connections.",
                              "type": "object",
                              "properties": {
                                "connectTimeout": {
                                  "description": "TCP connection timeout.",
                                  "type": "string"
                                },
                                "maxConnectionDuration": {
                                  "description": "The maximum duration of a connection.",
                                  "type": "string"
                                },
                                "maxConnections": {
                                  "description": "Maximum number of HTTP1 /TCP connections to a destination host.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "tcpKeepalive": {
                                  "description": "If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.",
                                  "type": "object",
                                  "properties": {
                                    "interval": {
                                      "description": "The time duration between keep-alive probes.",
                                      "type": "string"
                                    },
                                    "probes": {
                                      "description": "Maximum number of keepalive probes to send without response before deciding the connection is dead.",
                                      "type": "integer"
                                    },
                                    "time": {
                                      "description": "The time duration a connection needs to be idle before keep-alive probes start being sent.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "loadBalancer": {
                          "description": "Settings controlling the load balancer algorithms.",
                          "type": "object",
                          "properties": {
                            "consistentHash": {
                              "type": "object",
                              "properties": {
                                "httpCookie": {
                                  "description": "Hash based on HTTP cookie.",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name of the cookie.",
                                      "type": "string"
                                    },
                                    "path": {
                                      "description": "Path to set for the cookie.",
                                      "type": "string"
                                    },
                                    "ttl": {
                                      "description": "Lifetime of the cookie.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "httpHeaderName": {
                                  "description": "Hash based on a specific HTTP header.",
                                  "type": "string"
                                },
                                "httpQueryParameterName": {
                                  "description": "Hash based on a specific HTTP query parameter.",
                                  "type": "string"
                                },
                                "maglev": {
                                  "description": "The Maglev load balancer implements consistent hashing to backend hosts.",
                                  "type": "object",
                                  "properties": {
                                    "tableSize": {
                                      "description": "The table size for Maglev hashing.",
                                      "type": "integer"
                                    }
                                  }
                                },
                                "minimumRingSize": {
                                  "description": "Deprecated.",
                                  "type": "integer"
                                },
                                "ringHash": {
                                  "description": "The ring/modulo hash load balancer implements consistent hashing to backend hosts.",
                                  "type": "object",
                                  "properties": {
                                    "minimumRingSize": {
                                      "description": "The minimum number of virtual nodes to use for the hash ring.",
                                      "type": "integer"
                                    }
                                  }
                                },
                                "useSourceIp": {
                                  "description": "Hash based on the source IP address.",
                                  "type": "boolean"
                                }
                              }
                            },
                            "localityLbSetting": {
                              "type": "object",
                              "properties": {
                                "distribute": {
                                  "description": "Optional: only one of distribute, failover or failoverPriority can be set.",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "from": {
                                        "description": "Originating locality, '/' separated, e.g.",
                                        "type": "string"
                                      },
                                      "to": {
                                        "description": "Map of upstream localities to traffic distribution weights.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                },
                                "enabled": {
                                  "description": "enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety."
                                },
                                "failover": {
                                  "description": "Optional: only one of distribute, failover or failoverPriority can be set.",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "from": {
                                        "description": "Originating region.",
                                        "type": "string"
                                      },
                                      "to": {
                                        "description": "Destination region the traffic will fail over to when endpoints in the 'from' region becomes unhealthy.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "failoverPriority": {
                                  "description": "failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "simple": {
                              "type": "string",
                              "enum": [
                                "UNSPECIFIED",
                                "LEAST_CONN",
                                "RANDOM",
                                "PASSTHROUGH",
                                "ROUND_ROBIN",
                                "LEAST_REQUEST"
                              ]
                            },
                            "warmupDurationSecs": {
                              "description": "Represents the warmup duration of Service.",
                              "type": "string"
                            }
                          }
                        },
                        "outlierDetection": {
                          "type": "object",
                          "properties": {
                            "baseEjectionTime": {
                              "description": "Minimum ejection duration.",
                              "type": "string"
                            },
                            "consecutive5xxErrors": {
                              "description": "Number of 5xx errors before a host is ejected from the connection pool."
                            },
                            "consecutiveErrors": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "consecutiveGatewayErrors": {
                              "description": "Number of gateway errors before a host is ejected from the connection pool."
                            },
                            "consecutiveLocalOriginFailures": {
                              "description": "The number of consecutive locally originated failures before ejection occurs."
                            },
                            "interval": {
                              "description": "Time interval between ejection sweep analysis.",
                              "type": "string"
                            },
                            "maxEjectionPercent": {
                              "description": "Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "minHealthPercent": {
                              "description": "Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "splitExternalLocalOriginErrors": {
                              "description": "Determines whether to distinguish local origin failures from external errors.",
                              "type": "boolean"
                            }
                          }
                        },
                        "port": {
                          "description": "Specifies the number of a port on the destination service on which this policy is being applied.",
                          "type": "object",
                          "properties": {
                            "number": {
                              "type": "integer"
                            }
                          }
                        },
                        "tls": {
                          "description": "TLS related settings for connections to the upstream service.",
                          "type": "object",
                          "properties": {
                            "caCertificates": {
                              "description": "OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.",
                              "type": "string"
                            },
                            "clientCertificate": {
                              "description": "REQUIRED if mode is `MUTUAL`.",
                              "type": "string"
                            },
                            "credentialName": {
                              "description": "The name of the secret that holds the TLS certs for the client including the CA certificates.",
                              "type": "string"
                            },
                            "insecureSkipVerify": {
                              "description": "`insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host."
                            },
                            "mode": {
                              "description": "Indicates whether connections to this port should be secured using TLS.",
                              "type": "string",
                              "enum": [
                                "DISABLE",
                                "SIMPLE",
                                "MUTUAL",
                                "ISTIO_MUTUAL"
                              ]
                            },
                            "privateKey": {
                              "description": "REQUIRED if mode is `MUTUAL`.",
                              "type": "string"
                            },
                            "sni": {
                              "description": "SNI string to present to the server during TLS handshake.",
                              "type": "string"
                            },
                            "subjectAltNames": {
                              "description": "A list of alternate names to verify the subject identity in the certificate.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "tls": {
                    "description": "TLS related settings for connections to the upstream service.",
                    "type": "object",
                    "properties": {
                      "caCertificates": {
                        "description": "OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.",
                        "type": "string"
                      },
                      "clientCertificate": {
                        "description": "REQUIRED if mode is `MUTUAL`.",
                        "type": "string"
                      },
                      "credentialName": {
                        "description": "The name of the secret that holds the TLS certs for the client including the CA certificates.",
                        "type": "string"
                      },
                      "insecureSkipVerify": {
                        "description": "`insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host."
                      },
                      "mode": {
                        "description": "Indicates whether connections to this port should be secured using TLS.",
                        "type": "string",
                        "enum": [
                          "DISABLE",
                          "SIMPLE",
                          "MUTUAL",
                          "ISTIO_MUTUAL"
                        ]
                      },
                      "privateKey": {
                        "description": "REQUIRED if mode is `MUTUAL`.",
                        "type": "string"
                      },
                      "sni": {
                        "description": "SNI string to present to the server during TLS handshake.",
                        "type": "string"
                      },
                      "subjectAltNames": {
                        "description": "A list of alternate names to verify the subject identity in the certificate.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "tunnel": {
                    "description": "Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.",
                    "type": "object",
                    "required": [
                      "targetHost",
                      "targetPort"
                    ],
                    "properties": {
                      "protocol": {
                        "description": "Specifies which protocol to use for tunneling the downstream connection.",
                        "type": "string"
                      },
                      "targetHost": {
                        "description": "Specifies a host to which the downstream connection is tunneled.",
                        "type": "string"
                      },
                      "targetPort": {
                        "description": "Specifies a port to which the downstream connection is tunneled.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "trafficPolicy": {
          "description": "Traffic policies to apply (load balancing policy, connection pool sizes, outlier detection).",
          "type": "object",
          "properties": {
            "connectionPool": {
              "type": "object",
              "properties": {
                "http": {
                  "description": "HTTP connection pool settings.",
                  "type": "object",
                  "properties": {
                    "h2UpgradePolicy": {
                      "description": "Specify if http1.1 connection should be upgraded to http2 for the associated destination.",
                      "type": "string",
                      "enum": [
                        "DEFAULT",
                        "DO_NOT_UPGRADE",
                        "UPGRADE"
                      ]
                    },
                    "http1MaxPendingRequests": {
                      "description": "Maximum number of requests that will be queued while waiting for a ready connection pool connection.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "http2MaxRequests": {
                      "description": "Maximum number of active requests to a destination.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "idleTimeout": {
                      "description": "The idle timeout for upstream connection pool connections.",
                      "type": "string"
                    },
                    "maxRequestsPerConnection": {
                      "description": "Maximum number of requests per connection to a backend.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "maxRetries": {
                      "description": "Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "useClientProtocol": {
                      "description": "If set to true, client protocol will be preserved while initiating connection to backend.",
                      "type": "boolean"
                    }
                  }
                },
                "tcp": {
                  "description": "Settings common to both HTTP and TCP upstream connections.",
                  "type": "object",
                  "properties": {
                    "connectTimeout": {
                      "description": "TCP connection timeout.",
                      "type": "string"
                    },
                    "maxConnectionDuration": {
                      "description": "The maximum duration of a connection.",
                      "type": "string"
                    },
                    "maxConnections": {
                      "description": "Maximum number of HTTP1 /TCP connections to a destination host.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "tcpKeepalive": {
                      "description": "If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.",
                      "type": "object",
                      "properties": {
                        "interval": {
                          "description": "The time duration between keep-alive probes.",
                          "type": "string"
                        },
                        "probes": {
                          "description": "Maximum number of keepalive probes to send without response before deciding the connection is dead.",
                          "type": "integer"
                        },
                        "time": {
                          "description": "The time duration a connection needs to be idle before keep-alive probes start being sent.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "loadBalancer": {
              "description": "Settings controlling the load balancer algorithms.",
              "type": "object",
              "properties": {
                "consistentHash": {
                  "type": "object",
                  "properties": {
                    "httpCookie": {
                      "description": "Hash based on HTTP cookie.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the cookie.",
                          "type": "string"
                        },
                        "path": {
                          "description": "Path to set for the cookie.",
                          "type": "string"
                        },
                        "ttl": {
                          "description": "Lifetime of the cookie.",
                          "type": "string"
                        }
                      }
                    },
                    "httpHeaderName": {
                      "description": "Hash based on a specific HTTP header.",
                      "type": "string"
                    },
                    "httpQueryParameterName": {
                      "description": "Hash based on a specific HTTP query parameter.",
                      "type": "string"
                    },
                    "maglev": {
                      "description": "The Maglev load balancer implements consistent hashing to backend hosts.",
                      "type": "object",
                      "properties": {
                        "tableSize": {
                          "description": "The table size for Maglev hashing.",
                          "type": "integer"
                        }
                      }
                    },
                    "minimumRingSize": {
                      "description": "Deprecated.",
                      "type": "integer"
                    },
                    "ringHash": {
                      "description": "The ring/modulo hash load balancer implements consistent hashing to backend hosts.",
                      "type": "object",
                      "properties": {
                        "minimumRingSize": {
                          "description": "The minimum number of virtual nodes to use for the hash ring.",
                          "type": "integer"
                        }
                      }
                    },
                    "useSourceIp": {
                      "description": "Hash based on the source IP address.",
                      "type": "boolean"
                    }
                  }
                },
                "localityLbSetting": {
                  "type": "object",
                  "properties": {
                    "distribute": {
                      "description": "Optional: only one of distribute, failover or failoverPriority can be set.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "from": {
                            "description": "Originating locality, '/' separated, e.g.",
                            "type": "string"
                          },
                          "to": {
                            "description": "Map of upstream localities to traffic distribution weights.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "enabled": {
                      "description": "enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety."
                    },
                    "failover": {
                      "description": "Optional: only one of distribute, failover or failoverPriority can be set.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "from": {
                            "description": "Originating region.",
                            "type": "string"
                          },
                          "to": {
                            "description": "Destination region the traffic will fail over to when endpoints in the 'from' region becomes unhealthy.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "failoverPriority": {
                      "description": "failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "simple": {
                  "type": "string",
                  "enum": [
                    "UNSPECIFIED",
                    "LEAST_CONN",
                    "RANDOM",
                    "PASSTHROUGH",
                    "ROUND_ROBIN",
                    "LEAST_REQUEST"
                  ]
                },
                "warmupDurationSecs": {
                  "description": "Represents the warmup duration of Service.",
                  "type": "string"
                }
              }
            },
            "outlierDetection": {
              "type": "object",
              "properties": {
                "baseEjectionTime": {
                  "description": "Minimum ejection duration.",
                  "type": "string"
                },
                "consecutive5xxErrors": {
                  "description": "Number of 5xx errors before a host is ejected from the connection pool."
                },
                "consecutiveErrors": {
                  "type": "integer",
                  "format": "int32"
                },
                "consecutiveGatewayErrors": {
                  "description": "Number of gateway errors before a host is ejected from the connection pool."
                },
                "consecutiveLocalOriginFailures": {
                  "description": "The number of consecutive locally originated failures before ejection occurs."
                },
                "interval": {
                  "description": "Time interval between ejection sweep analysis.",
                  "type": "string"
                },
                "maxEjectionPercent": {
                  "description": "Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.",
                  "type": "integer",
                  "format": "int32"
                },
                "minHealthPercent": {
                  "description": "Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.",
                  "type": "integer",
                  "format": "int32"
                },
                "splitExternalLocalOriginErrors": {
                  "description": "Determines whether to distinguish local origin failures from external errors.",
                  "type": "boolean"
                }
              }
            },
            "portLevelSettings": {
              "description": "Traffic policies specific to individual ports.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionPool": {
                    "type": "object",
                    "properties": {
                      "http": {
                        "description": "HTTP connection pool settings.",
                        "type": "object",
                        "properties": {
                          "h2UpgradePolicy": {
                            "description": "Specify if http1.1 connection should be upgraded to http2 for the associated destination.",
                            "type": "string",
                            "enum": [
                              "DEFAULT",
                              "DO_NOT_UPGRADE",
                              "UPGRADE"
                            ]
                          },
                          "http1MaxPendingRequests": {
                            "description": "Maximum number of requests that will be queued while waiting for a ready connection pool connection.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "http2MaxRequests": {
                            "description": "Maximum number of active requests to a destination.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "idleTimeout": {
                            "description": "The idle timeout for upstream connection pool connections.",
                            "type": "string"
                          },
                          "maxRequestsPerConnection": {
                            "description": "Maximum number of requests per connection to a backend.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "maxRetries": {
                            "description": "Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "useClientProtocol": {
                            "description": "If set to true, client protocol will be preserved while initiating connection to backend.",
                            "type": "boolean"
                          }
                        }
                      },
                      "tcp": {
                        "description": "Settings common to both HTTP and TCP upstream connections.",
                        "type": "object",
                        "properties": {
                          "connectTimeout": {
                            "description": "TCP connection timeout.",
                            "type": "string"
                          },
                          "maxConnectionDuration": {
                            "description": "The maximum duration of a connection.",
                            "type": "string"
                          },
                          "maxConnections": {
                            "description": "Maximum number of HTTP1 /TCP connections to a destination host.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "tcpKeepalive": {
                            "description": "If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.",
                            "type": "object",
                            "properties": {
                              "interval": {
                                "description": "The time duration between keep-alive probes.",
                                "type": "string"
                              },
                              "probes": {
                                "description": "Maximum number of keepalive probes to send without response before deciding the connection is dead.",
                                "type": "integer"
                              },
                              "time": {
                                "description": "The time duration a connection needs to be idle before keep-alive probes start being sent.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "loadBalancer": {
                    "description": "Settings controlling the load balancer algorithms.",
                    "type": "object",
                    "properties": {
                      "consistentHash": {
                        "type": "object",
                        "properties": {
                          "httpCookie": {
                            "description": "Hash based on HTTP cookie.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the cookie.",
                                "type": "string"
                              },
                              "path": {
                                "description": "Path to set for the cookie.",
                                "type": "string"
                              },
                              "ttl": {
                                "description": "Lifetime of the cookie.",
                                "type": "string"
                              }
                            }
                          },
                          "httpHeaderName": {
                            "description": "Hash based on a specific HTTP header.",
                            "type": "string"
                          },
                          "httpQueryParameterName": {
                            "description": "Hash based on a specific HTTP query parameter.",
                            "type": "string"
                          },
                          "maglev": {
                            "description": "The Maglev load balancer implements consistent hashing to backend hosts.",
                            "type": "object",
                            "properties": {
                              "tableSize": {
                                "description": "The table size for Maglev hashing.",
                                "type": "integer"
                              }
                            }
                          },
                          "minimumRingSize": {
                            "description": "Deprecated.",
                            "type": "integer"
                          },
                          "ringHash": {
                            "description": "The ring/modulo hash load balancer implements consistent hashing to backend hosts.",
                            "type": "object",
                            "properties": {
                              "minimumRingSize": {
                                "description": "The minimum number of virtual nodes to use for the hash ring.",
                                "type": "integer"
                              }
                            }
                          },
                          "useSourceIp": {
                            "description": "Hash based on the source IP address.",
                            "type": "boolean"
                          }
                        }
                      },
                      "localityLbSetting": {
                        "type": "object",
                        "properties": {
                          "distribute": {
                            "description": "Optional: only one of distribute, failover or failoverPriority can be set.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "from": {
                                  "description": "Originating locality, '/' separated, e.g.",
                                  "type": "string"
                                },
                                "to": {
                                  "description": "Map of upstream localities to traffic distribution weights.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          },
                          "enabled": {
                            "description": "enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety."
                          },
                          "failover": {
                            "description": "Optional: only one of distribute, failover or failoverPriority can be set.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "from": {
                                  "description": "Originating region.",
                                  "type": "string"
                                },
                                "to": {
                                  "description": "Destination region the traffic will fail over to when endpoints in the 'from' region becomes unhealthy.",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "failoverPriority": {
                            "description": "failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "simple": {
                        "type": "string",
                        "enum": [
                          "UNSPECIFIED",
                          "LEAST_CONN",
                          "RANDOM",
                          "PASSTHROUGH",
                          "ROUND_ROBIN",
                          "LEAST_REQUEST"
                        ]
                      },
                      "warmupDurationSecs": {
                        "description": "Represents the warmup duration of Service.",
                        "type": "string"
                      }
                    }
                  },
                  "outlierDetection": {
                    "type": "object",
                    "properties": {
                      "baseEjectionTime": {
                        "description": "Minimum ejection duration.",
                        "type": "string"
                      },
                      "consecutive5xxErrors": {
                        "description": "Number of 5xx errors before a host is ejected from the connection pool."
                      },
                      "consecutiveErrors": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "consecutiveGatewayErrors": {
                        "description": "Number of gateway errors before a host is ejected from the connection pool."
                      },
                      "consecutiveLocalOriginFailures": {
                        "description": "The number of consecutive locally originated failures before ejection occurs."
                      },
                      "interval": {
                        "description": "Time interval between ejection sweep analysis.",
                        "type": "string"
                      },
                      "maxEjectionPercent": {
                        "description": "Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "minHealthPercent": {
                        "description": "Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "splitExternalLocalOriginErrors": {
                        "description": "Determines whether to distinguish local origin failures from external errors.",
                        "type": "boolean"
                      }
                    }
                  },
                  "port": {
                    "description": "Specifies the number of a port on the destination service on which this policy is being applied.",
                    "type": "object",
                    "properties": {
                      "number": {
                        "type": "integer"
                      }
                    }
                  },
                  "tls": {
                    "description": "TLS related settings for connections to the upstream service.",
                    "type": "object",
                    "properties": {
                      "caCertificates": {
                        "description": "OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.",
                        "type": "string"
                      },
                      "clientCertificate": {
                        "description": "REQUIRED if mode is `MUTUAL`.",
                        "type": "string"
                      },
                      "credentialName": {
                        "description": "The name of the secret that holds the TLS certs for the client including the CA certificates.",
                        "type": "string"
                      },
                      "insecureSkipVerify": {
                        "description": "`insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host."
                      },
                      "mode": {
                        "description": "Indicates whether connections to this port should be secured using TLS.",
                        "type": "string",
                        "enum": [
                          "DISABLE",
                          "SIMPLE",
                          "MUTUAL",
                          "ISTIO_MUTUAL"
                        ]
                      },
                      "privateKey": {
                        "description": "REQUIRED if mode is `MUTUAL`.",
                        "type": "string"
                      },
                      "sni": {
                        "description": "SNI string to present to the server during TLS handshake.",
                        "type": "string"
                      },
                      "subjectAltNames": {
                        "description": "A list of alternate names to verify the subject identity in the certificate.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "tls": {
              "description": "TLS related settings for connections to the upstream service.",
              "type": "object",
              "properties": {
                "caCertificates": {
                  "description": "OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.",
                  "type": "string"
                },
                "clientCertificate": {
                  "description": "REQUIRED if mode is `MUTUAL`.",
                  "type": "string"
                },
                "credentialName": {
                  "description": "The name of the secret that holds the TLS certs for the client including the CA certificates.",
                  "type": "string"
                },
                "insecureSkipVerify": {
                  "description": "`insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host."
                },
                "mode": {
                  "description": "Indicates whether connections to this port should be secured using TLS.",
                  "type": "string",
                  "enum": [
                    "DISABLE",
                    "SIMPLE",
                    "MUTUAL",
                    "ISTIO_MUTUAL"
                  ]
                },
                "privateKey": {
                  "description": "REQUIRED if mode is `MUTUAL`.",
                  "type": "string"
                },
                "sni": {
                  "description": "SNI string to present to the server during TLS handshake.",
                  "type": "string"
                },
                "subjectAltNames": {
                  "description": "A list of alternate names to verify the subject identity in the certificate.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "tunnel": {
              "description": "Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.",
              "type": "object",
              "required": [
                "targetHost",
                "targetPort"
              ],
              "properties": {
                "protocol": {
                  "description": "Specifies which protocol to use for tunneling the downstream connection.",
                  "type": "string"
                },
                "targetHost": {
                  "description": "Specifies a host to which the downstream connection is tunneled.",
                  "type": "string"
                },
                "targetPort": {
                  "description": "Specifies a port to which the downstream connection is tunneled.",
                  "type": "integer"
                }
              }
            }
          }
        },
        "workloadSelector": {
          "description": "Criteria used to select the specific set of pods/VMs on which this `DestinationRule` configuration should be applied.",
          "type": "object",
          "properties": {
            "matchLabels": {
              "description": "One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "status": {
      "x-kubernetes-preserve-unknown-fields": true
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "networking.istio.io",
      "kind": "DestinationRule",
      "version": "v1beta1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}