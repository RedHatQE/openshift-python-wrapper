{
  "description": "ClusterExternalSecret is the Schema for the clusterexternalsecrets API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ClusterExternalSecretSpec defines the desired state of ClusterExternalSecret.",
      "type": "object",
      "required": [
        "externalSecretSpec"
      ],
      "properties": {
        "externalSecretMetadata": {
          "description": "The metadata of the external secrets to be created",
          "type": "object",
          "properties": {
            "annotations": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "externalSecretName": {
          "description": "The name of the external secrets to be created.\nDefaults to the name of the ClusterExternalSecret",
          "type": "string",
          "maxLength": 253,
          "minLength": 1,
          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
        },
        "externalSecretSpec": {
          "description": "The spec for the ExternalSecrets to be created",
          "type": "object",
          "properties": {
            "data": {
              "description": "Data defines the connection between the Kubernetes Secret keys and the Provider data",
              "type": "array",
              "items": {
                "description": "ExternalSecretData defines the connection between the Kubernetes Secret key (spec.data.<key>) and the Provider data.",
                "type": "object",
                "required": [
                  "remoteRef",
                  "secretKey"
                ],
                "properties": {
                  "remoteRef": {
                    "description": "RemoteRef points to the remote secret and defines\nwhich secret (version/property/..) to fetch.",
                    "type": "object",
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "conversionStrategy": {
                        "description": "Used to define a conversion Strategy",
                        "type": "string",
                        "enum": [
                          "Default",
                          "Unicode"
                        ]
                      },
                      "decodingStrategy": {
                        "description": "Used to define a decoding Strategy",
                        "type": "string",
                        "enum": [
                          "Auto",
                          "Base64",
                          "Base64URL",
                          "None"
                        ]
                      },
                      "key": {
                        "description": "Key is the key used in the Provider, mandatory",
                        "type": "string"
                      },
                      "metadataPolicy": {
                        "description": "Policy for fetching tags/labels from provider secrets, possible options are Fetch, None. Defaults to None",
                        "type": "string",
                        "enum": [
                          "None",
                          "Fetch"
                        ]
                      },
                      "property": {
                        "description": "Used to select a specific property of the Provider value (if a map), if supported",
                        "type": "string"
                      },
                      "version": {
                        "description": "Used to select a specific version of the Provider value, if supported",
                        "type": "string"
                      }
                    }
                  },
                  "secretKey": {
                    "description": "The key in the Kubernetes Secret to store the value.",
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1,
                    "pattern": "^[-._a-zA-Z0-9]+$"
                  },
                  "sourceRef": {
                    "description": "SourceRef allows you to override the source\nfrom which the value will be pulled.",
                    "type": "object",
                    "maxProperties": 1,
                    "minProperties": 1,
                    "properties": {
                      "generatorRef": {
                        "description": "GeneratorRef points to a generator custom resource.\n\nDeprecated: The generatorRef is not implemented in .data[].\nthis will be removed with v1.",
                        "type": "object",
                        "required": [
                          "kind",
                          "name"
                        ],
                        "properties": {
                          "apiVersion": {
                            "description": "Specify the apiVersion of the generator resource",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Specify the Kind of the generator resource",
                            "type": "string",
                            "enum": [
                              "ACRAccessToken",
                              "ClusterGenerator",
                              "ECRAuthorizationToken",
                              "Fake",
                              "GCRAccessToken",
                              "GithubAccessToken",
                              "Password",
                              "STSSessionToken",
                              "UUID",
                              "VaultDynamicSecret",
                              "Webhook"
                            ]
                          },
                          "name": {
                            "description": "Specify the name of the generator resource",
                            "type": "string",
                            "maxLength": 253,
                            "minLength": 1,
                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                          }
                        }
                      },
                      "storeRef": {
                        "description": "SecretStoreRef defines which SecretStore to fetch the ExternalSecret data.",
                        "type": "object",
                        "properties": {
                          "kind": {
                            "description": "Kind of the SecretStore resource (SecretStore or ClusterSecretStore)\nDefaults to `SecretStore`",
                            "type": "string",
                            "enum": [
                              "SecretStore",
                              "ClusterSecretStore"
                            ]
                          },
                          "name": {
                            "description": "Name of the SecretStore resource",
                            "type": "string",
                            "maxLength": 253,
                            "minLength": 1,
                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "dataFrom": {
              "description": "DataFrom is used to fetch all properties from a specific Provider data\nIf multiple entries are specified, the Secret keys are merged in the specified order",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "extract": {
                    "description": "Used to extract multiple key/value pairs from one secret\nNote: Extract does not support sourceRef.Generator or sourceRef.GeneratorRef.",
                    "type": "object",
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "conversionStrategy": {
                        "description": "Used to define a conversion Strategy",
                        "type": "string",
                        "enum": [
                          "Default",
                          "Unicode"
                        ]
                      },
                      "decodingStrategy": {
                        "description": "Used to define a decoding Strategy",
                        "type": "string",
                        "enum": [
                          "Auto",
                          "Base64",
                          "Base64URL",
                          "None"
                        ]
                      },
                      "key": {
                        "description": "Key is the key used in the Provider, mandatory",
                        "type": "string"
                      },
                      "metadataPolicy": {
                        "description": "Policy for fetching tags/labels from provider secrets, possible options are Fetch, None. Defaults to None",
                        "type": "string",
                        "enum": [
                          "None",
                          "Fetch"
                        ]
                      },
                      "property": {
                        "description": "Used to select a specific property of the Provider value (if a map), if supported",
                        "type": "string"
                      },
                      "version": {
                        "description": "Used to select a specific version of the Provider value, if supported",
                        "type": "string"
                      }
                    }
                  },
                  "find": {
                    "description": "Used to find secrets based on tags or regular expressions\nNote: Find does not support sourceRef.Generator or sourceRef.GeneratorRef.",
                    "type": "object",
                    "properties": {
                      "conversionStrategy": {
                        "description": "Used to define a conversion Strategy",
                        "type": "string",
                        "enum": [
                          "Default",
                          "Unicode"
                        ]
                      },
                      "decodingStrategy": {
                        "description": "Used to define a decoding Strategy",
                        "type": "string",
                        "enum": [
                          "Auto",
                          "Base64",
                          "Base64URL",
                          "None"
                        ]
                      },
                      "name": {
                        "description": "Finds secrets based on the name.",
                        "type": "object",
                        "properties": {
                          "regexp": {
                            "description": "Finds secrets base",
                            "type": "string"
                          }
                        }
                      },
                      "path": {
                        "description": "A root path to start the find operations.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "Find secrets based on tags.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "rewrite": {
                    "description": "Used to rewrite secret Keys after getting them from the secret Provider\nMultiple Rewrite operations can be provided. They are applied in a layered order (first to last)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "regexp": {
                          "description": "Used to rewrite with regular expressions.\nThe resulting key will be the output of a regexp.ReplaceAll operation.",
                          "type": "object",
                          "required": [
                            "source",
                            "target"
                          ],
                          "properties": {
                            "source": {
                              "description": "Used to define the regular expression of a re.Compiler.",
                              "type": "string"
                            },
                            "target": {
                              "description": "Used to define the target pattern of a ReplaceAll operation.",
                              "type": "string"
                            }
                          }
                        },
                        "transform": {
                          "description": "Used to apply string transformation on the secrets.\nThe resulting key will be the output of the template applied by the operation.",
                          "type": "object",
                          "required": [
                            "template"
                          ],
                          "properties": {
                            "template": {
                              "description": "Used to define the template to apply on the secret name.\n`.value ` will specify the secret name in the template.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "sourceRef": {
                    "description": "SourceRef points to a store or generator\nwhich contains secret values ready to use.\nUse this in combination with Extract or Find pull values out of\na specific SecretStore.\nWhen sourceRef points to a generator Extract or Find is not supported.\nThe generator returns a static map of values",
                    "type": "object",
                    "maxProperties": 1,
                    "minProperties": 1,
                    "properties": {
                      "generatorRef": {
                        "description": "GeneratorRef points to a generator custom resource.",
                        "type": "object",
                        "required": [
                          "kind",
                          "name"
                        ],
                        "properties": {
                          "apiVersion": {
                            "description": "Specify the apiVersion of the generator resource",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Specify the Kind of the generator resource",
                            "type": "string",
                            "enum": [
                              "ACRAccessToken",
                              "ClusterGenerator",
                              "ECRAuthorizationToken",
                              "Fake",
                              "GCRAccessToken",
                              "GithubAccessToken",
                              "Password",
                              "STSSessionToken",
                              "UUID",
                              "VaultDynamicSecret",
                              "Webhook"
                            ]
                          },
                          "name": {
                            "description": "Specify the name of the generator resource",
                            "type": "string",
                            "maxLength": 253,
                            "minLength": 1,
                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                          }
                        }
                      },
                      "storeRef": {
                        "description": "SecretStoreRef defines which SecretStore to fetch the ExternalSecret data.",
                        "type": "object",
                        "properties": {
                          "kind": {
                            "description": "Kind of the SecretStore resource (SecretStore or ClusterSecretStore)\nDefaults to `SecretStore`",
                            "type": "string",
                            "enum": [
                              "SecretStore",
                              "ClusterSecretStore"
                            ]
                          },
                          "name": {
                            "description": "Name of the SecretStore resource",
                            "type": "string",
                            "maxLength": 253,
                            "minLength": 1,
                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "refreshInterval": {
              "description": "RefreshInterval is the amount of time before the values are read again from the SecretStore provider,\nspecified as Golang Duration strings.\nValid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\"\nExample values: \"1h\", \"2h30m\", \"5d\", \"10s\"\nMay be set to zero to fetch and create it once. Defaults to 1h.",
              "type": "string"
            },
            "secretStoreRef": {
              "description": "SecretStoreRef defines which SecretStore to fetch the ExternalSecret data.",
              "type": "object",
              "properties": {
                "kind": {
                  "description": "Kind of the SecretStore resource (SecretStore or ClusterSecretStore)\nDefaults to `SecretStore`",
                  "type": "string",
                  "enum": [
                    "SecretStore",
                    "ClusterSecretStore"
                  ]
                },
                "name": {
                  "description": "Name of the SecretStore resource",
                  "type": "string",
                  "maxLength": 253,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                }
              }
            },
            "target": {
              "description": "ExternalSecretTarget defines the Kubernetes Secret to be created\nThere can be only one target per ExternalSecret.",
              "type": "object",
              "properties": {
                "creationPolicy": {
                  "description": "CreationPolicy defines rules on how to create the resulting Secret.\nDefaults to \"Owner\"",
                  "type": "string",
                  "enum": [
                    "Owner",
                    "Orphan",
                    "Merge",
                    "None"
                  ]
                },
                "deletionPolicy": {
                  "description": "DeletionPolicy defines rules on how to delete the resulting Secret.\nDefaults to \"Retain\"",
                  "type": "string",
                  "enum": [
                    "Delete",
                    "Merge",
                    "Retain"
                  ]
                },
                "immutable": {
                  "description": "Immutable defines if the final secret will be immutable",
                  "type": "boolean"
                },
                "name": {
                  "description": "The name of the Secret resource to be managed.\nDefaults to the .metadata.name of the ExternalSecret resource",
                  "type": "string",
                  "maxLength": 253,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                },
                "template": {
                  "description": "Template defines a blueprint for the created Secret resource.",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "engineVersion": {
                      "description": "EngineVersion specifies the template engine version\nthat should be used to compile/execute the\ntemplate specified in .data and .templateFrom[].",
                      "type": "string",
                      "enum": [
                        "v1",
                        "v2"
                      ]
                    },
                    "mergePolicy": {
                      "type": "string",
                      "enum": [
                        "Replace",
                        "Merge"
                      ]
                    },
                    "metadata": {
                      "description": "ExternalSecretTemplateMetadata defines metadata fields for the Secret blueprint.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "templateFrom": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "configMap": {
                            "type": "object",
                            "required": [
                              "items",
                              "name"
                            ],
                            "properties": {
                              "items": {
                                "description": "A list of keys in the ConfigMap/Secret to use as templates for Secret data",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "key"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "A key in the ConfigMap/Secret",
                                      "type": "string",
                                      "maxLength": 253,
                                      "minLength": 1,
                                      "pattern": "^[-._a-zA-Z0-9]+$"
                                    },
                                    "templateAs": {
                                      "type": "string",
                                      "enum": [
                                        "Values",
                                        "KeysAndValues"
                                      ]
                                    }
                                  }
                                }
                              },
                              "name": {
                                "description": "The name of the ConfigMap/Secret resource",
                                "type": "string",
                                "maxLength": 253,
                                "minLength": 1,
                                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                              }
                            }
                          },
                          "literal": {
                            "type": "string"
                          },
                          "secret": {
                            "type": "object",
                            "required": [
                              "items",
                              "name"
                            ],
                            "properties": {
                              "items": {
                                "description": "A list of keys in the ConfigMap/Secret to use as templates for Secret data",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "key"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "A key in the ConfigMap/Secret",
                                      "type": "string",
                                      "maxLength": 253,
                                      "minLength": 1,
                                      "pattern": "^[-._a-zA-Z0-9]+$"
                                    },
                                    "templateAs": {
                                      "type": "string",
                                      "enum": [
                                        "Values",
                                        "KeysAndValues"
                                      ]
                                    }
                                  }
                                }
                              },
                              "name": {
                                "description": "The name of the ConfigMap/Secret resource",
                                "type": "string",
                                "maxLength": 253,
                                "minLength": 1,
                                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                              }
                            }
                          },
                          "target": {
                            "type": "string",
                            "enum": [
                              "Data",
                              "Annotations",
                              "Labels"
                            ]
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "namespaceSelector": {
          "description": "The labels to select by to find the Namespaces to create the ExternalSecrets in.\nDeprecated: Use NamespaceSelectors instead.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                }
              },
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "namespaceSelectors": {
          "description": "A list of labels to select by to find the Namespaces to create the ExternalSecrets in. The selectors are ORed.",
          "type": "array",
          "items": {
            "description": "A label selector is a label query over a set of resources. The result of matchLabels and\nmatchExpressions are ANDed. An empty label selector matches all objects. A null\nlabel selector matches no objects.",
            "type": "object",
            "properties": {
              "matchExpressions": {
                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                "type": "array",
                "items": {
                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                  "type": "object",
                  "required": [
                    "key",
                    "operator"
                  ],
                  "properties": {
                    "key": {
                      "description": "key is the label key that the selector applies to.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                      "type": "string"
                    },
                    "values": {
                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "matchLabels": {
                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "x-kubernetes-map-type": "atomic"
          }
        },
        "namespaces": {
          "description": "Choose namespaces by name. This field is ORed with anything that NamespaceSelectors ends up choosing.",
          "type": "array",
          "items": {
            "type": "string",
            "maxLength": 63,
            "minLength": 1,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        },
        "refreshTime": {
          "description": "The time in which the controller should reconcile its objects and recheck namespaces for labels.",
          "type": "string"
        }
      }
    },
    "status": {
      "description": "ClusterExternalSecretStatus defines the observed state of ClusterExternalSecret.",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "message": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        },
        "externalSecretName": {
          "description": "ExternalSecretName is the name of the ExternalSecrets created by the ClusterExternalSecret",
          "type": "string"
        },
        "failedNamespaces": {
          "description": "Failed namespaces are the namespaces that failed to apply an ExternalSecret",
          "type": "array",
          "items": {
            "description": "ClusterExternalSecretNamespaceFailure represents a failed namespace deployment and it's reason.",
            "type": "object",
            "required": [
              "namespace"
            ],
            "properties": {
              "namespace": {
                "description": "Namespace is the namespace that failed when trying to apply an ExternalSecret",
                "type": "string"
              },
              "reason": {
                "description": "Reason is why the ExternalSecret failed to apply to the namespace",
                "type": "string"
              }
            }
          }
        },
        "provisionedNamespaces": {
          "description": "ProvisionedNamespaces are the namespaces where the ClusterExternalSecret has secrets",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "external-secrets.io",
      "kind": "ClusterExternalSecret",
      "version": "v1beta1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}