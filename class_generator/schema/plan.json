{
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "PlanSpec defines the desired state of Plan.",
      "type": "object",
      "required": [
        "map",
        "provider",
        "targetNamespace",
        "vms"
      ],
      "properties": {
        "archived": {
          "description": "Whether this plan should be archived.",
          "type": "boolean"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "map": {
          "description": "Resource mapping.",
          "type": "object",
          "required": [
            "network",
            "storage"
          ],
          "properties": {
            "network": {
              "description": "Network.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              },
              "x-kubernetes-map-type": "atomic"
            },
            "storage": {
              "description": "Storage.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              },
              "x-kubernetes-map-type": "atomic"
            }
          }
        },
        "preserveClusterCpuModel": {
          "description": "Preserve the CPU model and flags the VM runs with in its oVirt cluster.",
          "type": "boolean"
        },
        "preserveStaticIPs": {
          "description": "Preserve static IPs of VMs in vSphere",
          "type": "boolean"
        },
        "provider": {
          "description": "Providers.",
          "type": "object",
          "required": [
            "destination",
            "source"
          ],
          "properties": {
            "destination": {
              "description": "Destination.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              },
              "x-kubernetes-map-type": "atomic"
            },
            "source": {
              "description": "Source.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              },
              "x-kubernetes-map-type": "atomic"
            }
          }
        },
        "targetNamespace": {
          "description": "Target namespace.",
          "type": "string"
        },
        "transferNetwork": {
          "description": "The network attachment definition that should be used for disk transfer.",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "vms": {
          "description": "List of VMs.",
          "type": "array",
          "items": {
            "description": "A VM listed on the plan.",
            "type": "object",
            "properties": {
              "hooks": {
                "description": "Enable hooks.",
                "type": "array",
                "items": {
                  "description": "Plan hook.",
                  "type": "object",
                  "required": [
                    "hook",
                    "step"
                  ],
                  "properties": {
                    "hook": {
                      "description": "Hook reference.",
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "description": "API version of the referent.",
                          "type": "string"
                        },
                        "fieldPath": {
                          "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                          "type": "string"
                        },
                        "resourceVersion": {
                          "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                          "type": "string"
                        },
                        "uid": {
                          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                          "type": "string"
                        }
                      },
                      "x-kubernetes-map-type": "atomic"
                    },
                    "step": {
                      "description": "Pipeline step.",
                      "type": "string"
                    }
                  }
                }
              },
              "id": {
                "description": "The object ID.\nvsphere:\n  The managed object ID.",
                "type": "string"
              },
              "instanceType": {
                "description": "Selected InstanceType that will override the VM properties.",
                "type": "string"
              },
              "luks": {
                "description": "Disk decryption LUKS keys",
                "type": "object",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                  },
                  "fieldPath": {
                    "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                    "type": "string"
                  },
                  "resourceVersion": {
                    "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                    "type": "string"
                  },
                  "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "name": {
                "description": "An object Name.\nvsphere:\n  A qualified name.",
                "type": "string"
              },
              "namespace": {
                "description": "The VM Namespace\nOnly relevant for an openshift source.",
                "type": "string"
              },
              "rootDisk": {
                "description": "Choose the primary disk the VM boots from",
                "type": "string"
              },
              "type": {
                "description": "Type used to qualify the name.",
                "type": "string"
              }
            }
          }
        },
        "warm": {
          "description": "Whether this is a warm migration.",
          "type": "boolean"
        }
      }
    },
    "status": {
      "description": "PlanStatus defines the observed state of Plan.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "List of conditions.",
          "type": "array",
          "items": {
            "description": "Condition",
            "type": "object",
            "required": [
              "category",
              "lastTransitionTime",
              "status",
              "type"
            ],
            "properties": {
              "category": {
                "description": "The condition category.",
                "type": "string"
              },
              "durable": {
                "description": "The condition is durable - never un-staged.",
                "type": "boolean"
              },
              "items": {
                "description": "A list of items referenced in the `Message`.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "lastTransitionTime": {
                "description": "When the last status transition occurred.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "The human readable description of the condition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition or transition.",
                "type": "string"
              },
              "status": {
                "description": "The condition status [true,false].",
                "type": "string"
              },
              "type": {
                "description": "The condition type.",
                "type": "string"
              }
            }
          }
        },
        "migration": {
          "description": "Migration",
          "type": "object",
          "properties": {
            "completed": {
              "description": "Completed timestamp.",
              "type": "string",
              "format": "date-time"
            },
            "history": {
              "description": "History",
              "type": "array",
              "items": {
                "description": "Snapshot",
                "type": "object",
                "required": [
                  "map",
                  "migration",
                  "plan",
                  "provider"
                ],
                "properties": {
                  "conditions": {
                    "description": "List of conditions.",
                    "type": "array",
                    "items": {
                      "description": "Condition",
                      "type": "object",
                      "required": [
                        "category",
                        "lastTransitionTime",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "category": {
                          "description": "The condition category.",
                          "type": "string"
                        },
                        "durable": {
                          "description": "The condition is durable - never un-staged.",
                          "type": "boolean"
                        },
                        "items": {
                          "description": "A list of items referenced in the `Message`.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "lastTransitionTime": {
                          "description": "When the last status transition occurred.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "The human readable description of the condition.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "The reason for the condition or transition.",
                          "type": "string"
                        },
                        "status": {
                          "description": "The condition status [true,false].",
                          "type": "string"
                        },
                        "type": {
                          "description": "The condition type.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "map": {
                    "description": "Map.",
                    "type": "object",
                    "required": [
                      "network",
                      "storage"
                    ],
                    "properties": {
                      "network": {
                        "description": "Snapshot object reference.",
                        "type": "object",
                        "required": [
                          "generation",
                          "name",
                          "namespace",
                          "uid"
                        ],
                        "properties": {
                          "generation": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          },
                          "namespace": {
                            "type": "string"
                          },
                          "uid": {
                            "description": "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.",
                            "type": "string"
                          }
                        }
                      },
                      "storage": {
                        "description": "Snapshot object reference.",
                        "type": "object",
                        "required": [
                          "generation",
                          "name",
                          "namespace",
                          "uid"
                        ],
                        "properties": {
                          "generation": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          },
                          "namespace": {
                            "type": "string"
                          },
                          "uid": {
                            "description": "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "migration": {
                    "description": "Migration",
                    "type": "object",
                    "required": [
                      "generation",
                      "name",
                      "namespace",
                      "uid"
                    ],
                    "properties": {
                      "generation": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.",
                        "type": "string"
                      }
                    }
                  },
                  "plan": {
                    "description": "Plan",
                    "type": "object",
                    "required": [
                      "generation",
                      "name",
                      "namespace",
                      "uid"
                    ],
                    "properties": {
                      "generation": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.",
                        "type": "string"
                      }
                    }
                  },
                  "provider": {
                    "description": "Provider",
                    "type": "object",
                    "required": [
                      "destination",
                      "source"
                    ],
                    "properties": {
                      "destination": {
                        "description": "Snapshot object reference.",
                        "type": "object",
                        "required": [
                          "generation",
                          "name",
                          "namespace",
                          "uid"
                        ],
                        "properties": {
                          "generation": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          },
                          "namespace": {
                            "type": "string"
                          },
                          "uid": {
                            "description": "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.",
                            "type": "string"
                          }
                        }
                      },
                      "source": {
                        "description": "Snapshot object reference.",
                        "type": "object",
                        "required": [
                          "generation",
                          "name",
                          "namespace",
                          "uid"
                        ],
                        "properties": {
                          "generation": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          },
                          "namespace": {
                            "type": "string"
                          },
                          "uid": {
                            "description": "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "started": {
              "description": "Started timestamp.",
              "type": "string",
              "format": "date-time"
            },
            "vms": {
              "description": "VM status",
              "type": "array",
              "items": {
                "description": "VM Status",
                "type": "object",
                "required": [
                  "phase",
                  "pipeline"
                ],
                "properties": {
                  "completed": {
                    "description": "Completed timestamp.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "conditions": {
                    "description": "List of conditions.",
                    "type": "array",
                    "items": {
                      "description": "Condition",
                      "type": "object",
                      "required": [
                        "category",
                        "lastTransitionTime",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "category": {
                          "description": "The condition category.",
                          "type": "string"
                        },
                        "durable": {
                          "description": "The condition is durable - never un-staged.",
                          "type": "boolean"
                        },
                        "items": {
                          "description": "A list of items referenced in the `Message`.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "lastTransitionTime": {
                          "description": "When the last status transition occurred.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "The human readable description of the condition.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "The reason for the condition or transition.",
                          "type": "string"
                        },
                        "status": {
                          "description": "The condition status [true,false].",
                          "type": "string"
                        },
                        "type": {
                          "description": "The condition type.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "error": {
                    "description": "Errors",
                    "type": "object",
                    "required": [
                      "phase",
                      "reasons"
                    ],
                    "properties": {
                      "phase": {
                        "type": "string"
                      },
                      "reasons": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "firmware": {
                    "description": "The firmware type detected from the OVF file produced by virt-v2v.",
                    "type": "string"
                  },
                  "hooks": {
                    "description": "Enable hooks.",
                    "type": "array",
                    "items": {
                      "description": "Plan hook.",
                      "type": "object",
                      "required": [
                        "hook",
                        "step"
                      ],
                      "properties": {
                        "hook": {
                          "description": "Hook reference.",
                          "type": "object",
                          "properties": {
                            "apiVersion": {
                              "description": "API version of the referent.",
                              "type": "string"
                            },
                            "fieldPath": {
                              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                              "type": "string"
                            },
                            "kind": {
                              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                              "type": "string"
                            },
                            "resourceVersion": {
                              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                              "type": "string"
                            },
                            "uid": {
                              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "step": {
                          "description": "Pipeline step.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "id": {
                    "description": "The object ID.\nvsphere:\n  The managed object ID.",
                    "type": "string"
                  },
                  "instanceType": {
                    "description": "Selected InstanceType that will override the VM properties.",
                    "type": "string"
                  },
                  "luks": {
                    "description": "Disk decryption LUKS keys",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "An object Name.\nvsphere:\n  A qualified name.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The VM Namespace\nOnly relevant for an openshift source.",
                    "type": "string"
                  },
                  "newName": {
                    "description": "The new name of the VM after matching DNS1123 requirements.",
                    "type": "string"
                  },
                  "operatingSystem": {
                    "description": "The Operating System detected by virt-v2v.",
                    "type": "string"
                  },
                  "phase": {
                    "description": "Phase",
                    "type": "string"
                  },
                  "pipeline": {
                    "description": "Migration pipeline.",
                    "type": "array",
                    "items": {
                      "description": "Pipeline step.",
                      "type": "object",
                      "required": [
                        "name",
                        "progress"
                      ],
                      "properties": {
                        "annotations": {
                          "description": "Annotations.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "completed": {
                          "description": "Completed timestamp.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "description": {
                          "description": "Name",
                          "type": "string"
                        },
                        "error": {
                          "description": "Error.",
                          "type": "object",
                          "required": [
                            "phase",
                            "reasons"
                          ],
                          "properties": {
                            "phase": {
                              "type": "string"
                            },
                            "reasons": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "name": {
                          "description": "Name.",
                          "type": "string"
                        },
                        "phase": {
                          "description": "Phase",
                          "type": "string"
                        },
                        "progress": {
                          "description": "Progress.",
                          "type": "object",
                          "required": [
                            "completed",
                            "total"
                          ],
                          "properties": {
                            "completed": {
                              "description": "Completed units.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "total": {
                              "description": "Total units.",
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        },
                        "reason": {
                          "description": "Reason",
                          "type": "string"
                        },
                        "started": {
                          "description": "Started timestamp.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "tasks": {
                          "description": "Nested tasks.",
                          "type": "array",
                          "items": {
                            "description": "Migration task.",
                            "type": "object",
                            "required": [
                              "name",
                              "progress"
                            ],
                            "properties": {
                              "annotations": {
                                "description": "Annotations.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "completed": {
                                "description": "Completed timestamp.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "description": {
                                "description": "Name",
                                "type": "string"
                              },
                              "error": {
                                "description": "Error.",
                                "type": "object",
                                "required": [
                                  "phase",
                                  "reasons"
                                ],
                                "properties": {
                                  "phase": {
                                    "type": "string"
                                  },
                                  "reasons": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "name": {
                                "description": "Name.",
                                "type": "string"
                              },
                              "phase": {
                                "description": "Phase",
                                "type": "string"
                              },
                              "progress": {
                                "description": "Progress.",
                                "type": "object",
                                "required": [
                                  "completed",
                                  "total"
                                ],
                                "properties": {
                                  "completed": {
                                    "description": "Completed units.",
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "total": {
                                    "description": "Total units.",
                                    "type": "integer",
                                    "format": "int64"
                                  }
                                }
                              },
                              "reason": {
                                "description": "Reason",
                                "type": "string"
                              },
                              "started": {
                                "description": "Started timestamp.",
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "restorePowerState": {
                    "description": "Source VM power state before migration.",
                    "type": "string"
                  },
                  "rootDisk": {
                    "description": "Choose the primary disk the VM boots from",
                    "type": "string"
                  },
                  "started": {
                    "description": "Started timestamp.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "description": "Type used to qualify the name.",
                    "type": "string"
                  },
                  "warm": {
                    "description": "Warm migration status",
                    "type": "object",
                    "required": [
                      "consecutiveFailures",
                      "failures",
                      "successes"
                    ],
                    "properties": {
                      "consecutiveFailures": {
                        "type": "integer"
                      },
                      "failures": {
                        "type": "integer"
                      },
                      "nextPrecopyAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "precopies": {
                        "type": "array",
                        "items": {
                          "description": "Precopy durations",
                          "type": "object",
                          "properties": {
                            "end": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "snapshot": {
                              "type": "string"
                            },
                            "start": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "successes": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "observedGeneration": {
          "description": "The most recent generation observed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "forklift.konveyor.io",
      "kind": "Plan",
      "version": "v1beta1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}