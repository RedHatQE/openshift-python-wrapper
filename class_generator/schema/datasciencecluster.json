{
  "description": "DataScienceCluster is the Schema for the datascienceclusters API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "DataScienceClusterSpec defines the desired state of the cluster.",
      "type": "object",
      "properties": {
        "components": {
          "description": "Override and fine tune specific component configurations.",
          "type": "object",
          "properties": {
            "codeflare": {
              "description": "CodeFlare component configuration.\nIf CodeFlare Operator has been installed in the cluster, it should be uninstalled first before enabling component.",
              "type": "object",
              "properties": {
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                }
              }
            },
            "dashboard": {
              "description": "Dashboard component configuration.",
              "type": "object",
              "properties": {
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                }
              }
            },
            "datasciencepipelines": {
              "description": "DataSciencePipeline component configuration.\nRequires OpenShift Pipelines Operator to be installed before enable component",
              "type": "object",
              "properties": {
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                }
              }
            },
            "feastoperator": {
              "description": "Feast Operator component configuration.",
              "type": "object",
              "properties": {
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                }
              }
            },
            "kserve": {
              "description": "Kserve component configuration.\nRequires OpenShift Serverless and OpenShift Service Mesh Operators to be installed before enable component\nDoes not support enabled ModelMeshServing at the same time",
              "type": "object",
              "properties": {
                "defaultDeploymentMode": {
                  "description": "Configures the default deployment mode for Kserve. This can be set to 'Serverless' or 'RawDeployment'.\nThe value specified in this field will be used to set the default deployment mode in the 'inferenceservice-config' configmap for Kserve.\nThis field is optional. If no default deployment mode is specified, Kserve will use Serverless mode.",
                  "type": "string",
                  "pattern": "^(Serverless|RawDeployment)$",
                  "enum": [
                    "Serverless",
                    "RawDeployment"
                  ]
                },
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "nim": {
                  "description": "Configures and enables NVIDIA NIM integration",
                  "type": "object",
                  "properties": {
                    "managementState": {
                      "type": "string",
                      "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                      "enum": [
                        "Managed",
                        "Removed"
                      ]
                    }
                  }
                },
                "rawDeploymentServiceConfig": {
                  "description": "Configures the type of service that is created for InferenceServices using RawDeployment.\nThe values for RawDeploymentServiceConfig can be \"Headless\" or \"Headed\".\nHeadless : sets \"ServiceClusterIPNone = true\" in the 'inferenceservice-config' configmap for Kserve.\nHeaded : sets \"ServiceClusterIPNone = false\" in the 'inferenceservice-config' configmap for Kserve.",
                  "type": "string",
                  "pattern": "^(Headless|Headed)$",
                  "enum": [
                    "Headless",
                    "Headed"
                  ]
                },
                "serving": {
                  "description": "Serving configures the KNative-Serving stack used for model serving. A Service\nMesh (Istio) is prerequisite, since it is used as networking layer.",
                  "type": "object",
                  "properties": {
                    "ingressGateway": {
                      "description": "IngressGateway allows to customize some parameters for the Istio Ingress Gateway\nthat is bound to KNative-Serving.",
                      "type": "object",
                      "properties": {
                        "certificate": {
                          "description": "Certificate specifies configuration of the TLS certificate securing communication\nfor the gateway.",
                          "type": "object",
                          "properties": {
                            "secretName": {
                              "description": "SecretName specifies the name of the Kubernetes Secret resource that contains a\nTLS certificate secure HTTP communications for the KNative network.",
                              "type": "string"
                            },
                            "type": {
                              "description": "Type specifies if the TLS certificate should be generated automatically, or if the certificate\nis provided by the user. Allowed values are:\n* SelfSigned: A certificate is going to be generated using an own private key.\n* Provided: Pre-existence of the TLS Secret (see SecretName) with a valid certificate is assumed.\n* OpenshiftDefaultIngress: Default ingress certificate configured for OpenShift",
                              "type": "string",
                              "enum": [
                                "SelfSigned",
                                "Provided",
                                "OpenshiftDefaultIngress"
                              ]
                            }
                          }
                        },
                        "domain": {
                          "description": "Domain specifies the host name for intercepting incoming requests.\nMost likely, you will want to use a wildcard name, like *.example.com.\nIf not set, the domain of the OpenShift Ingress is used.\nIf you choose to generate a certificate, this is the domain used for the certificate request.",
                          "type": "string"
                        }
                      }
                    },
                    "managementState": {
                      "type": "string",
                      "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                      "enum": [
                        "Managed",
                        "Unmanaged",
                        "Removed"
                      ]
                    },
                    "name": {
                      "description": "Name specifies the name of the KNativeServing resource that is going to be\ncreated to instruct the KNative Operator to deploy KNative serving components.\nThis resource is created in the \"knative-serving\" namespace.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "kueue": {
              "description": "Kueue component configuration.",
              "type": "object",
              "properties": {
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                }
              }
            },
            "modelmeshserving": {
              "description": "ModelMeshServing component configuration.",
              "type": "object",
              "properties": {
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                }
              }
            },
            "modelregistry": {
              "description": "ModelRegistry component configuration.",
              "type": "object",
              "properties": {
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "registriesNamespace": {
                  "description": "Namespace for model registries to be installed, configurable only once when model registry is enabled, defaults to \"rhoai-model-registries\"",
                  "type": "string",
                  "maxLength": 63,
                  "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?)?$"
                }
              },
              "x-kubernetes-validations": [
                {
                  "message": "RegistriesNamespace is immutable when model registry is Managed",
                  "rule": "(self.managementState != 'Managed') || (oldSelf.registriesNamespace == '') || (oldSelf.managementState != 'Managed')|| (self.registriesNamespace == oldSelf.registriesNamespace)"
                }
              ]
            },
            "ray": {
              "description": "Ray component configuration.",
              "type": "object",
              "properties": {
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                }
              }
            },
            "trainingoperator": {
              "description": "Training Operator component configuration.",
              "type": "object",
              "properties": {
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                }
              }
            },
            "trustyai": {
              "description": "TrustyAI component configuration.",
              "type": "object",
              "properties": {
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                }
              }
            },
            "workbenches": {
              "description": "Workbenches component configuration.",
              "type": "object",
              "properties": {
                "devFlags": {
                  "description": "Add developer fields",
                  "type": "object",
                  "properties": {
                    "manifests": {
                      "description": "List of custom manifests for the given component",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contextDir": {
                            "description": "contextDir is the relative path to the folder containing manifests in a repository, default value \"manifests\"",
                            "type": "string"
                          },
                          "sourcePath": {
                            "description": "sourcePath is the subpath within contextDir where kustomize builds start. Examples include any sub-folder or path: `base`, `overlays/dev`, `default`, `odh` etc.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "uri is the URI point to a git repo with tag/branch. e.g.  https://github.com/org/repo/tarball/<tag/branch>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "workbenchNamespace": {
                  "description": "Namespace for workbenches to be installed, configurable only once when workbenches are enabled, defaults to \"rhods-notebooks\"",
                  "type": "string",
                  "maxLength": 63,
                  "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?)?$"
                }
              }
            }
          }
        }
      }
    },
    "status": {
      "description": "DataScienceClusterStatus defines the observed state of DataScienceCluster.",
      "type": "object",
      "properties": {
        "components": {
          "description": "Expose component's specific status",
          "type": "object",
          "properties": {
            "codeflare": {
              "description": "CodeFlare component status.",
              "type": "object",
              "properties": {
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "releases": {
                  "type": "array",
                  "items": {
                    "description": "ComponentRelease represents the detailed status of a component release.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "repoUrl": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                }
              }
            },
            "dashboard": {
              "description": "Dashboard component status.",
              "type": "object",
              "properties": {
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "url": {
                  "type": "string"
                }
              }
            },
            "datasciencepipelines": {
              "description": "DataSciencePipeline component status.",
              "type": "object",
              "properties": {
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "releases": {
                  "type": "array",
                  "items": {
                    "description": "ComponentRelease represents the detailed status of a component release.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "repoUrl": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                }
              }
            },
            "feastoperator": {
              "description": "Feast Operator component status.",
              "type": "object",
              "properties": {
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "releases": {
                  "type": "array",
                  "items": {
                    "description": "ComponentRelease represents the detailed status of a component release.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "repoUrl": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                }
              }
            },
            "kserve": {
              "description": "Kserve component status.",
              "type": "object",
              "properties": {
                "defaultDeploymentMode": {
                  "description": "DefaultDeploymentMode is the value of the defaultDeploymentMode field\nas read from the \"deploy\" JSON in the inferenceservice-config ConfigMap",
                  "type": "string"
                },
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "releases": {
                  "type": "array",
                  "items": {
                    "description": "ComponentRelease represents the detailed status of a component release.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "repoUrl": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "serverlessMode": {
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$"
                }
              }
            },
            "kueue": {
              "description": "Kueue component status.",
              "type": "object",
              "properties": {
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "releases": {
                  "type": "array",
                  "items": {
                    "description": "ComponentRelease represents the detailed status of a component release.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "repoUrl": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                }
              }
            },
            "modelmeshserving": {
              "description": "ModelMeshServing component status.",
              "type": "object",
              "properties": {
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "releases": {
                  "type": "array",
                  "items": {
                    "description": "ComponentRelease represents the detailed status of a component release.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "repoUrl": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                }
              }
            },
            "modelregistry": {
              "description": "ModelRegistry component status.",
              "type": "object",
              "properties": {
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "registriesNamespace": {
                  "type": "string"
                },
                "releases": {
                  "type": "array",
                  "items": {
                    "description": "ComponentRelease represents the detailed status of a component release.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "repoUrl": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                }
              }
            },
            "ray": {
              "description": "Ray component status.",
              "type": "object",
              "properties": {
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "releases": {
                  "type": "array",
                  "items": {
                    "description": "ComponentRelease represents the detailed status of a component release.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "repoUrl": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                }
              }
            },
            "trainingoperator": {
              "description": "Training Operator component status.",
              "type": "object",
              "properties": {
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "releases": {
                  "type": "array",
                  "items": {
                    "description": "ComponentRelease represents the detailed status of a component release.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "repoUrl": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                }
              }
            },
            "trustyai": {
              "description": "TrustyAI component status.",
              "type": "object",
              "properties": {
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "releases": {
                  "type": "array",
                  "items": {
                    "description": "ComponentRelease represents the detailed status of a component release.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "repoUrl": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                }
              }
            },
            "workbenches": {
              "description": "Workbenches component status.",
              "type": "object",
              "properties": {
                "managementState": {
                  "description": "Set to one of the following values:\n\n- \"Managed\" : the operator is actively managing the component and trying to keep it active.\n              It will only upgrade the component if it is safe to do so\n\n- \"Removed\" : the operator is actively managing the component and will not install it,\n              or if it is installed, the operator will try to remove it",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged|Force|Removed)$",
                  "enum": [
                    "Managed",
                    "Removed"
                  ]
                },
                "releases": {
                  "type": "array",
                  "items": {
                    "description": "ComponentRelease represents the detailed status of a component release.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "repoUrl": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "workbenchNamespace": {
                  "type": "string"
                }
              }
            }
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastHeartbeatTime": {
                "description": "The last time we got an update on a given condition, this should not be set and is\npresent only for backward compatibility reasons",
                "type": "string",
                "format": "date-time"
              },
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.\nIf that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human-readable message indicating details about the transition.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration\nis 9, the condition is out of date with respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nThe value should be a CamelCase string.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nWhen this is not specified, it defaults to Error.",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          },
          "x-kubernetes-list-type": "atomic"
        },
        "errorMessage": {
          "type": "string"
        },
        "installedComponents": {
          "description": "List of components with status if installed or not",
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "observedGeneration": {
          "description": "The generation observed by the resource controller.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "type": "string"
        },
        "relatedObjects": {
          "description": "RelatedObjects is a list of objects created and maintained by this operator.\nObject references will be added to this list after they have been created AND found in the cluster.",
          "type": "array",
          "items": {
            "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string"
              },
              "fieldPath": {
                "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                "type": "string"
              },
              "kind": {
                "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "name": {
                "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                "type": "string"
              },
              "resourceVersion": {
                "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": "string"
              },
              "uid": {
                "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                "type": "string"
              }
            },
            "x-kubernetes-map-type": "atomic"
          }
        },
        "release": {
          "description": "Version and release type",
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "datasciencecluster.opendatahub.io",
      "kind": "DataScienceCluster",
      "version": "v1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}