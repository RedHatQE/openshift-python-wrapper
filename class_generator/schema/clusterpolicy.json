{
  "description": "ClusterPolicy is the Schema for the clusterpolicies API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ClusterPolicySpec defines the desired state of ClusterPolicy",
      "type": "object",
      "required": [
        "daemonsets",
        "dcgm",
        "dcgmExporter",
        "devicePlugin",
        "driver",
        "gfd",
        "nodeStatusExporter",
        "operator",
        "toolkit"
      ],
      "properties": {
        "ccManager": {
          "description": "CCManager component spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "defaultMode": {
              "description": "Default CC mode setting for compatible GPUs on the node",
              "type": "string",
              "enum": [
                "on",
                "off",
                "devtools"
              ]
            },
            "enabled": {
              "description": "Enabled indicates if deployment of CC Manager is enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "CC Manager image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "CC Manager image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "CC Manager image tag",
              "type": "string"
            }
          }
        },
        "cdi": {
          "description": "CDI configures how the Container Device Interface is used in the cluster",
          "type": "object",
          "properties": {
            "default": {
              "description": "Default indicates whether to use CDI as the default mechanism for providing GPU access to containers.",
              "type": "boolean"
            },
            "enabled": {
              "description": "Enabled indicates whether CDI can be used to make GPUs accessible to containers.",
              "type": "boolean"
            }
          }
        },
        "daemonsets": {
          "description": "Daemonset defines common configuration for all Daemonsets",
          "type": "object",
          "properties": {
            "annotations": {
              "description": "Optional: Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "description": "Optional: Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "priorityClassName": {
              "type": "string"
            },
            "rollingUpdate": {
              "description": "Optional: Configuration for rolling update of all DaemonSet pods",
              "type": "object",
              "properties": {
                "maxUnavailable": {
                  "type": "string"
                }
              }
            },
            "tolerations": {
              "description": "Optional: Set tolerations",
              "type": "array",
              "items": {
                "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple <key,value,effect> using the matching operator <operator>.",
                "type": "object",
                "properties": {
                  "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
                    "type": "string"
                  },
                  "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "value": {
                    "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string"
                  }
                }
              }
            },
            "updateStrategy": {
              "type": "string",
              "enum": [
                "RollingUpdate",
                "OnDelete"
              ]
            }
          }
        },
        "dcgm": {
          "description": "DCGM component spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of NVIDIA DCGM Hostengine as a separate pod is enabled.",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "hostPort": {
              "description": "Deprecated: HostPort represents host port that needs to be bound for DCGM engine (Default: 5555)",
              "type": "integer",
              "format": "int32"
            },
            "image": {
              "description": "NVIDIA DCGM image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "NVIDIA DCGM image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "NVIDIA DCGM image tag",
              "type": "string"
            }
          }
        },
        "dcgmExporter": {
          "description": "DCGMExporter spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "config": {
              "description": "Optional: Custom metrics configuration for NVIDIA DCGM Exporter",
              "type": "object",
              "properties": {
                "name": {
                  "description": "ConfigMap name with file dcgm-metrics.csv for metrics to be collected by NVIDIA DCGM Exporter",
                  "type": "string"
                }
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of NVIDIA DCGM Exporter through operator is enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "NVIDIA DCGM Exporter image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "NVIDIA DCGM Exporter image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "serviceMonitor": {
              "description": "Optional: ServiceMonitor configuration for NVIDIA DCGM Exporter",
              "type": "object",
              "properties": {
                "additionalLabels": {
                  "description": "AdditionalLabels to add to ServiceMonitor instance for NVIDIA DCGM Exporter",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "enabled": {
                  "description": "Enabled indicates if ServiceMonitor is deployed for NVIDIA DCGM Exporter",
                  "type": "boolean"
                },
                "honorLabels": {
                  "description": "HonorLabels chooses the metric\u2019s labels on collisions with target labels.",
                  "type": "boolean"
                },
                "interval": {
                  "description": "Interval which metrics should be scraped from NVIDIA DCGM Exporter. If not specified Prometheus\u2019 global scrape interval is used.\nSupported units: y, w, d, h, m, s, ms",
                  "type": "string",
                  "pattern": "^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
                },
                "relabelings": {
                  "description": "Relabelings allows to rewrite labels on metric sets for NVIDIA DCGM Exporter",
                  "type": "array",
                  "items": {
                    "description": "RelabelConfig allows dynamic rewriting of the label set for targets, alerts,\nscraped samples and remote write samples.\n\n\nMore info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
                    "type": "object",
                    "properties": {
                      "action": {
                        "description": "Action to perform based on the regex matching.\n\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\n\nDefault: \"Replace\"",
                        "type": "string",
                        "enum": [
                          "replace",
                          "Replace",
                          "keep",
                          "Keep",
                          "drop",
                          "Drop",
                          "hashmod",
                          "HashMod",
                          "labelmap",
                          "LabelMap",
                          "labeldrop",
                          "LabelDrop",
                          "labelkeep",
                          "LabelKeep",
                          "lowercase",
                          "Lowercase",
                          "uppercase",
                          "Uppercase",
                          "keepequal",
                          "KeepEqual",
                          "dropequal",
                          "DropEqual"
                        ]
                      },
                      "modulus": {
                        "description": "Modulus to take of the hash of the source label values.\n\n\nOnly applicable when the action is `HashMod`.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "regex": {
                        "description": "Regular expression against which the extracted value is matched.",
                        "type": "string"
                      },
                      "replacement": {
                        "description": "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\n\nRegex capture groups are available.",
                        "type": "string"
                      },
                      "separator": {
                        "description": "Separator is the string between concatenated SourceLabels.",
                        "type": "string"
                      },
                      "sourceLabels": {
                        "description": "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.",
                        "type": "array",
                        "items": {
                          "description": "LabelName is a valid Prometheus label name which may only contain ASCII\nletters, numbers, as well as underscores.",
                          "type": "string",
                          "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
                        }
                      },
                      "targetLabel": {
                        "description": "Label to which the resulting string is written in a replacement.\n\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\n\nRegex capture groups are available.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "version": {
              "description": "NVIDIA DCGM Exporter image tag",
              "type": "string"
            }
          }
        },
        "devicePlugin": {
          "description": "DevicePlugin component spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "config": {
              "description": "Optional: Configuration for the NVIDIA Device Plugin via the ConfigMap",
              "type": "object",
              "properties": {
                "default": {
                  "description": "Default config name within the ConfigMap for the NVIDIA Device Plugin  config",
                  "type": "string"
                },
                "name": {
                  "description": "ConfigMap name for NVIDIA Device Plugin config including shared config between plugin and GFD",
                  "type": "string"
                }
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of NVIDIA Device Plugin through operator is enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "NVIDIA Device Plugin image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "mps": {
              "description": "Optional: MPS related configuration for the NVIDIA Device Plugin",
              "type": "object",
              "properties": {
                "root": {
                  "description": "Root defines the MPS root path on the host",
                  "type": "string"
                }
              }
            },
            "repository": {
              "description": "NVIDIA Device Plugin image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "NVIDIA Device Plugin image tag",
              "type": "string"
            }
          }
        },
        "driver": {
          "description": "Driver component spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "certConfig": {
              "description": "Optional: Custom certificates configuration for NVIDIA Driver container",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of NVIDIA Driver through operator is enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "NVIDIA Driver image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "kernelModuleConfig": {
              "description": "Optional: Kernel module configuration parameters for the NVIDIA Driver",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            },
            "licensingConfig": {
              "description": "Optional: Licensing configuration for NVIDIA vGPU licensing",
              "type": "object",
              "properties": {
                "configMapName": {
                  "type": "string"
                },
                "nlsEnabled": {
                  "description": "NLSEnabled indicates if NVIDIA Licensing System is used for licensing.",
                  "type": "boolean"
                }
              }
            },
            "livenessProbe": {
              "description": "NVIDIA Driver container liveness probe settings",
              "type": "object",
              "properties": {
                "failureThreshold": {
                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "initialDelaySeconds": {
                  "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                  "type": "integer",
                  "format": "int32"
                },
                "periodSeconds": {
                  "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "successThreshold": {
                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "timeoutSeconds": {
                  "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                }
              }
            },
            "manager": {
              "description": "Manager represents configuration for NVIDIA Driver Manager initContainer",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Optional: List of environment variables",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of the environment variable.",
                        "type": "string"
                      }
                    }
                  }
                },
                "image": {
                  "description": "Image represents NVIDIA Driver Manager image name",
                  "type": "string",
                  "pattern": "[a-zA-Z0-9\\-]+"
                },
                "imagePullPolicy": {
                  "description": "Image pull policy",
                  "type": "string"
                },
                "imagePullSecrets": {
                  "description": "Image pull secrets",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "repository": {
                  "description": "Repository represents Driver Managerrepository path",
                  "type": "string"
                },
                "version": {
                  "description": "Version represents NVIDIA Driver Manager image tag(version)",
                  "type": "string"
                }
              }
            },
            "rdma": {
              "description": "GPUDirectRDMASpec defines the properties for nvidia-peermem deployment",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled indicates if GPUDirect RDMA is enabled through GPU operator",
                  "type": "boolean"
                },
                "useHostMofed": {
                  "description": "UseHostMOFED indicates to use MOFED drivers directly installed on the host to enable GPUDirect RDMA",
                  "type": "boolean"
                }
              }
            },
            "readinessProbe": {
              "description": "NVIDIA Driver container readiness probe settings",
              "type": "object",
              "properties": {
                "failureThreshold": {
                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "initialDelaySeconds": {
                  "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                  "type": "integer",
                  "format": "int32"
                },
                "periodSeconds": {
                  "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "successThreshold": {
                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "timeoutSeconds": {
                  "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                }
              }
            },
            "repoConfig": {
              "description": "Optional: Custom repo configuration for NVIDIA Driver container",
              "type": "object",
              "properties": {
                "configMapName": {
                  "type": "string"
                }
              }
            },
            "repository": {
              "description": "NVIDIA Driver image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "startupProbe": {
              "description": "NVIDIA Driver container startup probe settings",
              "type": "object",
              "properties": {
                "failureThreshold": {
                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "initialDelaySeconds": {
                  "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                  "type": "integer",
                  "format": "int32"
                },
                "periodSeconds": {
                  "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "successThreshold": {
                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "timeoutSeconds": {
                  "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                }
              }
            },
            "upgradePolicy": {
              "description": "Driver auto-upgrade settings",
              "type": "object",
              "properties": {
                "autoUpgrade": {
                  "description": "AutoUpgrade is a global switch for automatic upgrade feature\nif set to false all other options are ignored",
                  "type": "boolean"
                },
                "drain": {
                  "description": "DrainSpec describes configuration for node drain during automatic upgrade",
                  "type": "object",
                  "properties": {
                    "deleteEmptyDir": {
                      "description": "DeleteEmptyDir indicates if should continue even if there are pods using emptyDir\n(local data that will be deleted when the node is drained)",
                      "type": "boolean"
                    },
                    "enable": {
                      "description": "Enable indicates if node draining is allowed during upgrade",
                      "type": "boolean"
                    },
                    "force": {
                      "description": "Force indicates if force draining is allowed",
                      "type": "boolean"
                    },
                    "podSelector": {
                      "description": "PodSelector specifies a label selector to filter pods on the node that need to be drained\nFor more details on label selectors, see:\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                      "type": "string"
                    },
                    "timeoutSeconds": {
                      "description": "TimeoutSecond specifies the length of time in seconds to wait before giving up drain, zero means infinite",
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "maxParallelUpgrades": {
                  "description": "MaxParallelUpgrades indicates how many nodes can be upgraded in parallel\n0 means no limit, all nodes will be upgraded in parallel",
                  "type": "integer",
                  "minimum": 0
                },
                "maxUnavailable": {
                  "description": "MaxUnavailable is the maximum number of nodes with the driver installed, that can be unavailable during the upgrade.\nValue can be an absolute number (ex: 5) or a percentage of total nodes at the start of upgrade (ex: 10%).\nAbsolute number is calculated from percentage by rounding up.\nBy default, a fixed value of 25% is used.",
                  "x-kubernetes-int-or-string": true
                },
                "podDeletion": {
                  "description": "PodDeletionSpec describes configuration for deletion of pods using special resources during automatic upgrade",
                  "type": "object",
                  "properties": {
                    "deleteEmptyDir": {
                      "description": "DeleteEmptyDir indicates if should continue even if there are pods using emptyDir\n(local data that will be deleted when the pod is deleted)",
                      "type": "boolean"
                    },
                    "force": {
                      "description": "Force indicates if force deletion is allowed",
                      "type": "boolean"
                    },
                    "timeoutSeconds": {
                      "description": "TimeoutSecond specifies the length of time in seconds to wait before giving up on pod termination, zero means\ninfinite",
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "waitForCompletion": {
                  "description": "WaitForCompletionSpec describes the configuration for waiting on job completions",
                  "type": "object",
                  "properties": {
                    "podSelector": {
                      "description": "PodSelector specifies a label selector for the pods to wait for completion\nFor more details on label selectors, see:\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                      "type": "string"
                    },
                    "timeoutSeconds": {
                      "description": "TimeoutSecond specifies the length of time in seconds to wait before giving up on pod termination, zero means\ninfinite",
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            },
            "useNvidiaDriverCRD": {
              "description": "UseNvidiaDriverCRD indicates if the deployment of NVIDIA Driver is managed by the NVIDIADriver CRD type",
              "type": "boolean"
            },
            "useOpenKernelModules": {
              "description": "UseOpenKernelModules indicates if the open GPU kernel modules should be used",
              "type": "boolean"
            },
            "usePrecompiled": {
              "description": "UsePrecompiled indicates if deployment of NVIDIA Driver using pre-compiled modules is enabled",
              "type": "boolean"
            },
            "version": {
              "description": "NVIDIA Driver image tag",
              "type": "string"
            },
            "virtualTopology": {
              "description": "Optional: Virtual Topology Daemon configuration for NVIDIA vGPU drivers",
              "type": "object",
              "properties": {
                "config": {
                  "description": "Optional: Config name representing virtual topology daemon configuration file nvidia-topologyd.conf",
                  "type": "string"
                }
              }
            }
          }
        },
        "gdrcopy": {
          "description": "GDRCopy component spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "enabled": {
              "description": "Enabled indicates if GDRCopy is enabled through GPU Operator",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "NVIDIA GDRCopy driver image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "NVIDIA GDRCopy driver image repository",
              "type": "string"
            },
            "version": {
              "description": "NVIDIA GDRCopy driver image tag",
              "type": "string"
            }
          }
        },
        "gds": {
          "description": "GPUDirectStorage defines the spec for GDS components(Experimental)",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "enabled": {
              "description": "Enabled indicates if GPUDirect Storage is enabled through GPU operator",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "NVIDIA GPUDirect Storage Driver image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "NVIDIA GPUDirect Storage Driver image repository",
              "type": "string"
            },
            "version": {
              "description": "NVIDIA GPUDirect Storage Driver image tag",
              "type": "string"
            }
          }
        },
        "gfd": {
          "description": "GPUFeatureDiscovery spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of GPU Feature Discovery Plugin is enabled.",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "GFD image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "GFD image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "GFD image tag",
              "type": "string"
            }
          }
        },
        "hostPaths": {
          "description": "HostPaths defines various paths on the host needed by GPU Operator components",
          "type": "object",
          "properties": {
            "driverInstallDir": {
              "description": "DriverInstallDir represents the root at which driver files including libraries,\nconfig files, and executables can be found.",
              "type": "string"
            },
            "rootFS": {
              "description": "RootFS represents the path to the root filesystem of the host.\nThis is used by components that need to interact with the host filesystem\nand as such this must be a chroot-able filesystem.\nExamples include the MIG Manager and Toolkit Container which may need to\nstop, start, or restart systemd services.",
              "type": "string"
            }
          }
        },
        "kataManager": {
          "description": "KataManager component spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "config": {
              "description": "Kata Manager config",
              "type": "object",
              "properties": {
                "artifactsDir": {
                  "description": "ArtifactsDir is the directory where kata artifacts (e.g. kernel / guest images, configuration, etc.)\nare placed on the local filesystem.",
                  "type": "string"
                },
                "runtimeClasses": {
                  "description": "RuntimeClasses is a list of kata runtime classes to configure.",
                  "type": "array",
                  "items": {
                    "description": "RuntimeClass defines the configuration for a kata RuntimeClass",
                    "type": "object",
                    "required": [
                      "artifacts",
                      "name"
                    ],
                    "properties": {
                      "artifacts": {
                        "description": "Artifacts are the kata artifacts associated with the runtime class.",
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "pullSecret": {
                            "description": "PullSecret is the secret used to pull the OCI artifact.",
                            "type": "string"
                          },
                          "url": {
                            "description": "URL is the path to the OCI artifact (payload) containing all artifacts\nassociated with a kata runtime class.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Name is the name of the kata runtime class.",
                        "type": "string"
                      },
                      "nodeSelector": {
                        "description": "NodeSelector specifies the nodeSelector for the RuntimeClass object.\nThis ensures pods running with the RuntimeClass only get scheduled\nonto nodes which support it.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of Kata Manager is enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "Kata Manager image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "Kata Manager image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "Kata Manager image tag",
              "type": "string"
            }
          }
        },
        "mig": {
          "description": "MIG spec",
          "type": "object",
          "properties": {
            "strategy": {
              "description": "Optional: MIGStrategy to apply for GFD and NVIDIA Device Plugin",
              "type": "string",
              "enum": [
                "none",
                "single",
                "mixed"
              ]
            }
          }
        },
        "migManager": {
          "description": "MIGManager for configuration to deploy MIG Manager",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "config": {
              "description": "Optional: Custom mig-parted configuration for NVIDIA MIG Manager container",
              "type": "object",
              "properties": {
                "default": {
                  "description": "Default MIG config to be applied on the node, when there is no config specified with the node label nvidia.com/mig.config",
                  "type": "string",
                  "enum": [
                    "all-disabled",
                    ""
                  ]
                },
                "name": {
                  "description": "ConfigMap name",
                  "type": "string"
                }
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of NVIDIA MIG Manager is enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "gpuClientsConfig": {
              "description": "Optional: Custom gpu-clients configuration for NVIDIA MIG Manager container",
              "type": "object",
              "properties": {
                "name": {
                  "description": "ConfigMap name",
                  "type": "string"
                }
              }
            },
            "image": {
              "description": "NVIDIA MIG Manager image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "NVIDIA MIG Manager image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "NVIDIA MIG Manager image tag",
              "type": "string"
            }
          }
        },
        "nodeStatusExporter": {
          "description": "NodeStatusExporter spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of Node Status Exporter is enabled.",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "Node Status Exporter image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "Node Status Exporterimage repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "Node Status Exporterimage tag",
              "type": "string"
            }
          }
        },
        "operator": {
          "description": "Operator component spec",
          "type": "object",
          "required": [
            "defaultRuntime"
          ],
          "properties": {
            "annotations": {
              "description": "Optional: Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "defaultRuntime": {
              "description": "Runtime defines container runtime type",
              "type": "string",
              "enum": [
                "docker",
                "crio",
                "containerd"
              ]
            },
            "initContainer": {
              "description": "InitContainerSpec describes configuration for initContainer image used with all components",
              "type": "object",
              "properties": {
                "image": {
                  "description": "Image represents image name",
                  "type": "string",
                  "pattern": "[a-zA-Z0-9\\-]+"
                },
                "imagePullPolicy": {
                  "description": "Image pull policy",
                  "type": "string"
                },
                "imagePullSecrets": {
                  "description": "Image pull secrets",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "repository": {
                  "description": "Repository represents image repository path",
                  "type": "string"
                },
                "version": {
                  "description": "Version represents image tag(version)",
                  "type": "string"
                }
              }
            },
            "labels": {
              "description": "Optional: Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "runtimeClass": {
              "type": "string"
            },
            "use_ocp_driver_toolkit": {
              "description": "UseOpenShiftDriverToolkit indicates if DriverToolkit image should be used on OpenShift to build and install driver modules",
              "type": "boolean"
            }
          }
        },
        "psa": {
          "description": "PSA defines spec for PodSecurityAdmission configuration",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enabled indicates if PodSecurityAdmission configuration needs to be enabled for all Pods",
              "type": "boolean"
            }
          }
        },
        "psp": {
          "description": "Deprecated: Pod Security Policies are no longer supported. Please use PodSecurityAdmission instead\nPSP defines spec for handling PodSecurityPolicies",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enabled indicates if PodSecurityPolicies needs to be enabled for all Pods",
              "type": "boolean"
            }
          }
        },
        "sandboxDevicePlugin": {
          "description": "SandboxDevicePlugin component spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of NVIDIA Sandbox Device Plugin through operator is enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "NVIDIA Sandbox Device Plugin image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "NVIDIA Sandbox Device Plugin image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "NVIDIA Sandbox Device Plugin image tag",
              "type": "string"
            }
          }
        },
        "sandboxWorkloads": {
          "description": "SandboxWorkloads defines the spec for handling sandbox workloads (i.e. Virtual Machines)",
          "type": "object",
          "properties": {
            "defaultWorkload": {
              "description": "DefaultWorkload indicates the default GPU workload type to configure\nworker nodes in the cluster for",
              "type": "string",
              "enum": [
                "container",
                "vm-passthrough",
                "vm-vgpu"
              ]
            },
            "enabled": {
              "description": "Enabled indicates if the GPU Operator should manage additional operands required\nfor sandbox workloads (i.e. VFIO Manager, vGPU Manager, and additional device plugins)",
              "type": "boolean"
            }
          }
        },
        "toolkit": {
          "description": "Toolkit component spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of NVIDIA Container Toolkit through operator is enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "NVIDIA Container Toolkit image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "installDir": {
              "description": "Toolkit install directory on the host",
              "type": "string"
            },
            "repository": {
              "description": "NVIDIA Container Toolkit image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "NVIDIA Container Toolkit image tag",
              "type": "string"
            }
          }
        },
        "validator": {
          "description": "Validator defines the spec for operator-validator daemonset",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "cuda": {
              "description": "CUDA validator spec",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Optional: List of environment variables",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of the environment variable.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "driver": {
              "description": "Toolkit validator spec",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Optional: List of environment variables",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of the environment variable.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "Validator image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "plugin": {
              "description": "Plugin validator spec",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Optional: List of environment variables",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of the environment variable.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "repository": {
              "description": "Validator image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "toolkit": {
              "description": "Toolkit validator spec",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Optional: List of environment variables",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of the environment variable.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "version": {
              "description": "Validator image tag",
              "type": "string"
            },
            "vfioPCI": {
              "description": "VfioPCI validator spec",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Optional: List of environment variables",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of the environment variable.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "vgpuDevices": {
              "description": "VGPUDevices validator spec",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Optional: List of environment variables",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of the environment variable.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "vgpuManager": {
              "description": "VGPUManager validator spec",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Optional: List of environment variables",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of the environment variable.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "vfioManager": {
          "description": "VFIOManager for configuration to deploy VFIO-PCI Manager",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "driverManager": {
              "description": "DriverManager represents configuration for NVIDIA Driver Manager",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Optional: List of environment variables",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of the environment variable.",
                        "type": "string"
                      }
                    }
                  }
                },
                "image": {
                  "description": "Image represents NVIDIA Driver Manager image name",
                  "type": "string",
                  "pattern": "[a-zA-Z0-9\\-]+"
                },
                "imagePullPolicy": {
                  "description": "Image pull policy",
                  "type": "string"
                },
                "imagePullSecrets": {
                  "description": "Image pull secrets",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "repository": {
                  "description": "Repository represents Driver Managerrepository path",
                  "type": "string"
                },
                "version": {
                  "description": "Version represents NVIDIA Driver Manager image tag(version)",
                  "type": "string"
                }
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of VFIO Manager is enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "VFIO Manager image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "VFIO Manager image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "VFIO Manager image tag",
              "type": "string"
            }
          }
        },
        "vgpuDeviceManager": {
          "description": "VGPUDeviceManager spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "config": {
              "description": "NVIDIA vGPU devices configuration for NVIDIA vGPU Device Manager container",
              "type": "object",
              "properties": {
                "default": {
                  "description": "Default config name within the ConfigMap",
                  "type": "string"
                },
                "name": {
                  "description": "ConfigMap name",
                  "type": "string"
                }
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of NVIDIA vGPU Device Manager is enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "NVIDIA vGPU Device Manager image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "NVIDIA vGPU Device Manager image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "NVIDIA vGPU Device Manager image tag",
              "type": "string"
            }
          }
        },
        "vgpuManager": {
          "description": "VGPUManager component spec",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional: List of arguments",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "driverManager": {
              "description": "DriverManager represents configuration for NVIDIA Driver Manager initContainer",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Optional: List of environment variables",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of the environment variable.",
                        "type": "string"
                      }
                    }
                  }
                },
                "image": {
                  "description": "Image represents NVIDIA Driver Manager image name",
                  "type": "string",
                  "pattern": "[a-zA-Z0-9\\-]+"
                },
                "imagePullPolicy": {
                  "description": "Image pull policy",
                  "type": "string"
                },
                "imagePullSecrets": {
                  "description": "Image pull secrets",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "repository": {
                  "description": "Repository represents Driver Managerrepository path",
                  "type": "string"
                },
                "version": {
                  "description": "Version represents NVIDIA Driver Manager image tag(version)",
                  "type": "string"
                }
              }
            },
            "enabled": {
              "description": "Enabled indicates if deployment of NVIDIA vGPU Manager through operator is enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Optional: List of environment variables",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value of the environment variable.",
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "description": "NVIDIA vGPU Manager  image name",
              "type": "string",
              "pattern": "[a-zA-Z0-9\\-]+"
            },
            "imagePullPolicy": {
              "description": "Image pull policy",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repository": {
              "description": "NVIDIA vGPU Manager image repository",
              "type": "string"
            },
            "resources": {
              "description": "Optional: Define resources requests and limits for each pod",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "version": {
              "description": "NVIDIA vGPU Manager image tag",
              "type": "string"
            }
          }
        }
      }
    },
    "status": {
      "description": "ClusterPolicyStatus defines the observed state of ClusterPolicy",
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions is a list of conditions representing the ClusterPolicy's current state.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          }
        },
        "namespace": {
          "description": "Namespace indicates a namespace in which the operator is installed",
          "type": "string"
        },
        "state": {
          "description": "State indicates status of ClusterPolicy",
          "type": "string",
          "enum": [
            "ignored",
            "ready",
            "notReady"
          ]
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "nvidia.com",
      "kind": "ClusterPolicy",
      "version": "v1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}