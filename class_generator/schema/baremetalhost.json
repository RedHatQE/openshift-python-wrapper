{
  "description": "BareMetalHost is the Schema for the baremetalhosts API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "BareMetalHostSpec defines the desired state of BareMetalHost.",
      "type": "object",
      "required": [
        "online"
      ],
      "properties": {
        "architecture": {
          "description": "CPU architecture of the host, e.g. \"x86_64\" or \"aarch64\". If unset, eventually populated by inspection.",
          "type": "string"
        },
        "automatedCleaningMode": {
          "description": "When set to disabled, automated cleaning will be avoided during provisioning and deprovisioning.",
          "type": "string",
          "enum": [
            "metadata",
            "disabled"
          ]
        },
        "bmc": {
          "description": "How do we connect to the BMC?",
          "type": "object",
          "required": [
            "address",
            "credentialsName"
          ],
          "properties": {
            "address": {
              "description": "Address holds the URL for accessing the controller on the network.",
              "type": "string"
            },
            "credentialsName": {
              "description": "The name of the secret containing the BMC credentials (requires keys \"username\" and \"password\").",
              "type": "string"
            },
            "disableCertificateVerification": {
              "description": "DisableCertificateVerification disables verification of server certificates when using HTTPS to connect to the BMC. This is required when the server certificate is self-signed, but is insecure because it allows a man-in-the-middle to intercept the connection.",
              "type": "boolean"
            }
          }
        },
        "bootMACAddress": {
          "description": "Which MAC address will PXE boot? This is optional for some types, but required for libvirt VMs driven by vbmc.",
          "type": "string",
          "pattern": "[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}"
        },
        "bootMode": {
          "description": "Select the method of initializing the hardware during boot. Defaults to UEFI.",
          "type": "string",
          "enum": [
            "UEFI",
            "UEFISecureBoot",
            "legacy"
          ]
        },
        "consumerRef": {
          "description": "ConsumerRef can be used to store information about something that is using a host. When it is not empty, the host is considered \"in use\".",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "customDeploy": {
          "description": "A custom deploy procedure.",
          "type": "object",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "description": "Custom deploy method name. This name is specific to the deploy ramdisk used. If you don't have a custom deploy ramdisk, you shouldn't use CustomDeploy.",
              "type": "string"
            }
          }
        },
        "description": {
          "description": "Description is a human-entered text used to help identify the host",
          "type": "string"
        },
        "externallyProvisioned": {
          "description": "ExternallyProvisioned means something else is managing the image running on the host and the operator should only manage the power status and hardware inventory inspection. If the Image field is filled in, this field is ignored.",
          "type": "boolean"
        },
        "firmware": {
          "description": "BIOS configuration for bare metal server",
          "type": "object",
          "properties": {
            "simultaneousMultithreadingEnabled": {
              "description": "Allows a single physical processor core to appear as several logical processors. This supports following options: true, false.",
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            },
            "sriovEnabled": {
              "description": "SR-IOV support enables a hypervisor to create virtual instances of a PCI-express device, potentially increasing performance. This supports following options: true, false.",
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            },
            "virtualizationEnabled": {
              "description": "Supports the virtualization of platform hardware. This supports following options: true, false.",
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            }
          }
        },
        "hardwareProfile": {
          "description": "What is the name of the hardware profile for this host? Hardware profiles are deprecated and should not be used. Use the separate fields Architecture and RootDeviceHints instead. Set to \"empty\" to prepare for the future version of the API without hardware profiles.",
          "type": "string"
        },
        "image": {
          "description": "Image holds the details of the image to be provisioned.",
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "checksum": {
              "description": "Checksum is the checksum for the image.",
              "type": "string"
            },
            "checksumType": {
              "description": "ChecksumType is the checksum algorithm for the image, e.g md5, sha256 or sha512. The special value \"auto\" can be used to detect the algorithm from the checksum. If missing, MD5 is used. If in doubt, use \"auto\".",
              "type": "string",
              "enum": [
                "md5",
                "sha256",
                "sha512",
                "auto"
              ]
            },
            "format": {
              "description": "DiskFormat contains the format of the image (raw, qcow2, ...). Needs to be set to raw for raw images streaming. Note live-iso means an iso referenced by the url will be live-booted and not deployed to disk, and in this case the checksum options are not required and if specified will be ignored.",
              "type": "string",
              "enum": [
                "raw",
                "qcow2",
                "vdi",
                "vmdk",
                "live-iso"
              ]
            },
            "url": {
              "description": "URL is a location of an image to deploy.",
              "type": "string"
            }
          }
        },
        "metaData": {
          "description": "MetaData holds the reference to the Secret containing host metadata (e.g. meta_data.json) which is passed to the Config Drive.",
          "type": "object",
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "networkData": {
          "description": "NetworkData holds the reference to the Secret containing network configuration (e.g content of network_data.json) which is passed to the Config Drive.",
          "type": "object",
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        },
        "online": {
          "description": "Should the server be online?",
          "type": "boolean"
        },
        "preprovisioningNetworkDataName": {
          "description": "PreprovisioningNetworkDataName is the name of the Secret in the local namespace containing network configuration (e.g content of network_data.json) which is passed to the preprovisioning image, and to the Config Drive if not overridden by specifying NetworkData.",
          "type": "string"
        },
        "raid": {
          "description": "RAID configuration for bare metal server",
          "type": "object",
          "properties": {
            "hardwareRAIDVolumes": {
              "description": "The list of logical disks for hardware RAID, if rootDeviceHints isn't used, first volume is root volume. You can set the value of this field to `[]` to clear all the hardware RAID configurations."
            },
            "softwareRAIDVolumes": {
              "description": "The list of logical disks for software RAID, if rootDeviceHints isn't used, first volume is root volume. If HardwareRAIDVolumes is set this item will be invalid. The number of created Software RAID devices must be 1 or 2. If there is only one Software RAID device, it has to be a RAID-1. If there are two, the first one has to be a RAID-1, while the RAID level for the second one can be 0, 1, or 1+0. As the first RAID device will be the deployment device, enforcing a RAID-1 reduces the risk of ending up with a non-booting node in case of a disk failure. Software RAID will always be deleted.",
              "maxItems": 2
            }
          }
        },
        "rootDeviceHints": {
          "description": "Provide guidance about how to choose the device for the image being provisioned.",
          "type": "object",
          "properties": {
            "deviceName": {
              "description": "A Linux device name like \"/dev/vda\", or a by-path link to it like \"/dev/disk/by-path/pci-0000:01:00.0-scsi-0:2:0:0\". The hint must match the actual value exactly.",
              "type": "string"
            },
            "hctl": {
              "description": "A SCSI bus address like 0:0:0:0. The hint must match the actual value exactly.",
              "type": "string"
            },
            "minSizeGigabytes": {
              "description": "The minimum size of the device in Gigabytes.",
              "type": "integer",
              "minimum": 0
            },
            "model": {
              "description": "A vendor-specific device identifier. The hint can be a substring of the actual value.",
              "type": "string"
            },
            "rotational": {
              "description": "True if the device should use spinning media, false otherwise.",
              "type": "boolean"
            },
            "serialNumber": {
              "description": "Device serial number. The hint must match the actual value exactly.",
              "type": "string"
            },
            "vendor": {
              "description": "The name of the vendor or manufacturer of the device. The hint can be a substring of the actual value.",
              "type": "string"
            },
            "wwn": {
              "description": "Unique storage identifier. The hint must match the actual value exactly.",
              "type": "string"
            },
            "wwnVendorExtension": {
              "description": "Unique vendor storage identifier. The hint must match the actual value exactly.",
              "type": "string"
            },
            "wwnWithExtension": {
              "description": "Unique storage identifier with the vendor extension appended. The hint must match the actual value exactly.",
              "type": "string"
            }
          }
        },
        "taints": {
          "description": "Taints is the full, authoritative list of taints to apply to the corresponding Machine. This list will overwrite any modifications made to the Machine on an ongoing basis.",
          "type": "array",
          "items": {
            "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
            "type": "object",
            "required": [
              "effect",
              "key"
            ],
            "properties": {
              "effect": {
                "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                "type": "string"
              },
              "key": {
                "description": "Required. The taint key to be applied to a node.",
                "type": "string"
              },
              "timeAdded": {
                "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
                "type": "string",
                "format": "date-time"
              },
              "value": {
                "description": "The taint value corresponding to the taint key.",
                "type": "string"
              }
            }
          }
        },
        "userData": {
          "description": "UserData holds the reference to the Secret containing the user data to be passed to the host before it boots.",
          "type": "object",
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "x-kubernetes-map-type": "atomic"
        }
      }
    },
    "status": {
      "description": "BareMetalHostStatus defines the observed state of BareMetalHost.",
      "type": "object",
      "required": [
        "errorCount",
        "errorMessage",
        "hardwareProfile",
        "operationalStatus",
        "poweredOn",
        "provisioning"
      ],
      "properties": {
        "errorCount": {
          "description": "ErrorCount records how many times the host has encoutered an error since the last successful operation",
          "type": "integer"
        },
        "errorMessage": {
          "description": "the last error message reported by the provisioning subsystem",
          "type": "string"
        },
        "errorType": {
          "description": "ErrorType indicates the type of failure encountered when the OperationalStatus is OperationalStatusError",
          "type": "string",
          "enum": [
            "provisioned registration error",
            "registration error",
            "inspection error",
            "preparation error",
            "provisioning error",
            "power management error"
          ]
        },
        "goodCredentials": {
          "description": "the last credentials we were able to validate as working",
          "type": "object",
          "properties": {
            "credentials": {
              "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
              "type": "object",
              "properties": {
                "name": {
                  "description": "name is unique within a namespace to reference a secret resource.",
                  "type": "string"
                },
                "namespace": {
                  "description": "namespace defines the space within which the secret name must be unique.",
                  "type": "string"
                }
              },
              "x-kubernetes-map-type": "atomic"
            },
            "credentialsVersion": {
              "type": "string"
            }
          }
        },
        "hardware": {
          "description": "The hardware discovered to exist on the host.",
          "type": "object",
          "properties": {
            "cpu": {
              "description": "CPU describes one processor on the host.",
              "type": "object",
              "properties": {
                "arch": {
                  "type": "string"
                },
                "clockMegahertz": {
                  "description": "ClockSpeed is a clock speed in MHz",
                  "type": "number",
                  "format": "double"
                },
                "count": {
                  "type": "integer"
                },
                "flags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "model": {
                  "type": "string"
                }
              }
            },
            "firmware": {
              "description": "Firmware describes the firmware on the host.",
              "type": "object",
              "properties": {
                "bios": {
                  "description": "The BIOS for this firmware",
                  "type": "object",
                  "properties": {
                    "date": {
                      "description": "The release/build date for this BIOS",
                      "type": "string"
                    },
                    "vendor": {
                      "description": "The vendor name for this BIOS",
                      "type": "string"
                    },
                    "version": {
                      "description": "The version of the BIOS",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "hostname": {
              "type": "string"
            },
            "nics": {
              "type": "array",
              "items": {
                "description": "NIC describes one network interface on the host.",
                "type": "object",
                "properties": {
                  "ip": {
                    "description": "The IP address of the interface. This will be an IPv4 or IPv6 address if one is present.  If both IPv4 and IPv6 addresses are present in a dual-stack environment, two nics will be output, one with each IP.",
                    "type": "string"
                  },
                  "mac": {
                    "description": "The device MAC address",
                    "type": "string",
                    "pattern": "[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}"
                  },
                  "model": {
                    "description": "The vendor and product IDs of the NIC, e.g. \"0x8086 0x1572\"",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the network interface, e.g. \"en0\"",
                    "type": "string"
                  },
                  "pxe": {
                    "description": "Whether the NIC is PXE Bootable",
                    "type": "boolean"
                  },
                  "speedGbps": {
                    "description": "The speed of the device in Gigabits per second",
                    "type": "integer"
                  },
                  "vlanId": {
                    "description": "The untagged VLAN ID",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 4094,
                    "minimum": 0
                  },
                  "vlans": {
                    "description": "The VLANs available",
                    "type": "array",
                    "items": {
                      "description": "VLAN represents the name and ID of a VLAN.",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "VLANID is a 12-bit 802.1Q VLAN identifier",
                          "type": "integer",
                          "format": "int32",
                          "maximum": 4094,
                          "minimum": 0
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "ramMebibytes": {
              "type": "integer"
            },
            "storage": {
              "type": "array",
              "items": {
                "description": "Storage describes one storage device (disk, SSD, etc.) on the host.",
                "type": "object",
                "properties": {
                  "alternateNames": {
                    "description": "A list of alternate Linux device names of the disk, e.g. \"/dev/sda\". Note that this list is not exhaustive, and names may not be stable across reboots.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "hctl": {
                    "description": "The SCSI location of the device",
                    "type": "string"
                  },
                  "model": {
                    "description": "Hardware model",
                    "type": "string"
                  },
                  "name": {
                    "description": "A Linux device name of the disk, e.g. \"/dev/disk/by-path/pci-0000:01:00.0-scsi-0:2:0:0\". This will be a name that is stable across reboots if one is available.",
                    "type": "string"
                  },
                  "rotational": {
                    "description": "Whether this disk represents rotational storage. This field is not recommended for usage, please prefer using 'Type' field instead, this field will be deprecated eventually.",
                    "type": "boolean"
                  },
                  "serialNumber": {
                    "description": "The serial number of the device",
                    "type": "string"
                  },
                  "sizeBytes": {
                    "description": "The size of the disk in Bytes",
                    "type": "integer",
                    "format": "int64"
                  },
                  "type": {
                    "description": "Device type, one of: HDD, SSD, NVME.",
                    "type": "string",
                    "enum": [
                      "HDD",
                      "SSD",
                      "NVME"
                    ]
                  },
                  "vendor": {
                    "description": "The name of the vendor of the device",
                    "type": "string"
                  },
                  "wwn": {
                    "description": "The WWN of the device",
                    "type": "string"
                  },
                  "wwnVendorExtension": {
                    "description": "The WWN Vendor extension of the device",
                    "type": "string"
                  },
                  "wwnWithExtension": {
                    "description": "The WWN with the extension",
                    "type": "string"
                  }
                }
              }
            },
            "systemVendor": {
              "description": "HardwareSystemVendor stores details about the whole hardware system.",
              "type": "object",
              "properties": {
                "manufacturer": {
                  "type": "string"
                },
                "productName": {
                  "type": "string"
                },
                "serialNumber": {
                  "type": "string"
                }
              }
            }
          }
        },
        "hardwareProfile": {
          "description": "The name of the profile matching the hardware details.",
          "type": "string"
        },
        "lastUpdated": {
          "description": "LastUpdated identifies when this status was last observed.",
          "type": "string",
          "format": "date-time"
        },
        "operationHistory": {
          "description": "OperationHistory holds information about operations performed on this host.",
          "type": "object",
          "properties": {
            "deprovision": {
              "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
              "type": "object",
              "properties": {
                "end": {
                  "format": "date-time"
                },
                "start": {
                  "format": "date-time"
                }
              }
            },
            "inspect": {
              "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
              "type": "object",
              "properties": {
                "end": {
                  "format": "date-time"
                },
                "start": {
                  "format": "date-time"
                }
              }
            },
            "provision": {
              "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
              "type": "object",
              "properties": {
                "end": {
                  "format": "date-time"
                },
                "start": {
                  "format": "date-time"
                }
              }
            },
            "register": {
              "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
              "type": "object",
              "properties": {
                "end": {
                  "format": "date-time"
                },
                "start": {
                  "format": "date-time"
                }
              }
            }
          }
        },
        "operationalStatus": {
          "description": "OperationalStatus holds the status of the host",
          "type": "string",
          "enum": [
            "",
            "OK",
            "discovered",
            "error",
            "delayed",
            "detached"
          ]
        },
        "poweredOn": {
          "description": "indicator for whether or not the host is powered on",
          "type": "boolean"
        },
        "provisioning": {
          "description": "Information tracked by the provisioner.",
          "type": "object",
          "required": [
            "ID",
            "state"
          ],
          "properties": {
            "ID": {
              "description": "The machine's UUID from the underlying provisioning tool",
              "type": "string"
            },
            "bootMode": {
              "description": "BootMode indicates the boot mode used to provision the node",
              "type": "string",
              "enum": [
                "UEFI",
                "UEFISecureBoot",
                "legacy"
              ]
            },
            "customDeploy": {
              "description": "Custom deploy procedure applied to the host.",
              "type": "object",
              "required": [
                "method"
              ],
              "properties": {
                "method": {
                  "description": "Custom deploy method name. This name is specific to the deploy ramdisk used. If you don't have a custom deploy ramdisk, you shouldn't use CustomDeploy.",
                  "type": "string"
                }
              }
            },
            "firmware": {
              "description": "The Bios set by the user",
              "type": "object",
              "properties": {
                "simultaneousMultithreadingEnabled": {
                  "description": "Allows a single physical processor core to appear as several logical processors. This supports following options: true, false.",
                  "type": "boolean",
                  "enum": [
                    true,
                    false
                  ]
                },
                "sriovEnabled": {
                  "description": "SR-IOV support enables a hypervisor to create virtual instances of a PCI-express device, potentially increasing performance. This supports following options: true, false.",
                  "type": "boolean",
                  "enum": [
                    true,
                    false
                  ]
                },
                "virtualizationEnabled": {
                  "description": "Supports the virtualization of platform hardware. This supports following options: true, false.",
                  "type": "boolean",
                  "enum": [
                    true,
                    false
                  ]
                }
              }
            },
            "image": {
              "description": "Image holds the details of the last image successfully provisioned to the host.",
              "type": "object",
              "required": [
                "url"
              ],
              "properties": {
                "checksum": {
                  "description": "Checksum is the checksum for the image.",
                  "type": "string"
                },
                "checksumType": {
                  "description": "ChecksumType is the checksum algorithm for the image, e.g md5, sha256 or sha512. The special value \"auto\" can be used to detect the algorithm from the checksum. If missing, MD5 is used. If in doubt, use \"auto\".",
                  "type": "string",
                  "enum": [
                    "md5",
                    "sha256",
                    "sha512",
                    "auto"
                  ]
                },
                "format": {
                  "description": "DiskFormat contains the format of the image (raw, qcow2, ...). Needs to be set to raw for raw images streaming. Note live-iso means an iso referenced by the url will be live-booted and not deployed to disk, and in this case the checksum options are not required and if specified will be ignored.",
                  "type": "string",
                  "enum": [
                    "raw",
                    "qcow2",
                    "vdi",
                    "vmdk",
                    "live-iso"
                  ]
                },
                "url": {
                  "description": "URL is a location of an image to deploy.",
                  "type": "string"
                }
              }
            },
            "raid": {
              "description": "The Raid set by the user",
              "type": "object",
              "properties": {
                "hardwareRAIDVolumes": {
                  "description": "The list of logical disks for hardware RAID, if rootDeviceHints isn't used, first volume is root volume. You can set the value of this field to `[]` to clear all the hardware RAID configurations."
                },
                "softwareRAIDVolumes": {
                  "description": "The list of logical disks for software RAID, if rootDeviceHints isn't used, first volume is root volume. If HardwareRAIDVolumes is set this item will be invalid. The number of created Software RAID devices must be 1 or 2. If there is only one Software RAID device, it has to be a RAID-1. If there are two, the first one has to be a RAID-1, while the RAID level for the second one can be 0, 1, or 1+0. As the first RAID device will be the deployment device, enforcing a RAID-1 reduces the risk of ending up with a non-booting node in case of a disk failure. Software RAID will always be deleted.",
                  "maxItems": 2
                }
              }
            },
            "rootDeviceHints": {
              "description": "The RootDevicehints set by the user",
              "type": "object",
              "properties": {
                "deviceName": {
                  "description": "A Linux device name like \"/dev/vda\", or a by-path link to it like \"/dev/disk/by-path/pci-0000:01:00.0-scsi-0:2:0:0\". The hint must match the actual value exactly.",
                  "type": "string"
                },
                "hctl": {
                  "description": "A SCSI bus address like 0:0:0:0. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "minSizeGigabytes": {
                  "description": "The minimum size of the device in Gigabytes.",
                  "type": "integer",
                  "minimum": 0
                },
                "model": {
                  "description": "A vendor-specific device identifier. The hint can be a substring of the actual value.",
                  "type": "string"
                },
                "rotational": {
                  "description": "True if the device should use spinning media, false otherwise.",
                  "type": "boolean"
                },
                "serialNumber": {
                  "description": "Device serial number. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "vendor": {
                  "description": "The name of the vendor or manufacturer of the device. The hint can be a substring of the actual value.",
                  "type": "string"
                },
                "wwn": {
                  "description": "Unique storage identifier. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "wwnVendorExtension": {
                  "description": "Unique vendor storage identifier. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "wwnWithExtension": {
                  "description": "Unique storage identifier with the vendor extension appended. The hint must match the actual value exactly.",
                  "type": "string"
                }
              }
            },
            "state": {
              "description": "An indiciator for what the provisioner is doing with the host.",
              "type": "string"
            }
          }
        },
        "triedCredentials": {
          "description": "the last credentials we sent to the provisioning backend",
          "type": "object",
          "properties": {
            "credentials": {
              "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
              "type": "object",
              "properties": {
                "name": {
                  "description": "name is unique within a namespace to reference a secret resource.",
                  "type": "string"
                },
                "namespace": {
                  "description": "namespace defines the space within which the secret name must be unique.",
                  "type": "string"
                }
              },
              "x-kubernetes-map-type": "atomic"
            },
            "credentialsVersion": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "metal3.io",
      "kind": "BareMetalHost",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}