"""Parser for extracting user-added code from generated files."""

import ast


def parse_user_code_from_file(file_path: str) -> tuple[str, str]:
    """
    Extract user-added code and imports from a generated file.

    Args:
        file_path: Path to the generated file

    Returns:
        Tuple of (user_code, user_imports)
    """
    with open(file_path) as fd:
        data = fd.read()

    end_of_generated_code_line = "    # End of generated code"
    user_code: str = ""
    user_imports: str = ""

    if end_of_generated_code_line in data:
        _end_of_generated_code_index = data.index(end_of_generated_code_line)
        user_code = data[_end_of_generated_code_index + len(end_of_generated_code_line) :]

        tree = ast.parse(data)
        imports = [imp for imp in tree.body if isinstance(imp, ast.Import) or isinstance(imp, ast.ImportFrom)]
        splited_data = data.splitlines()

        # Standard imports that are always generated by the template
        template_imports = {
            "from typing import Any",
            "from ocp_resources.resource import NamespacedResource",
            "from ocp_resources.resource import Resource",
            "from ocp_resources.resource import NamespacedResource, MissingRequiredArgumentError",
            "from ocp_resources.resource import Resource, MissingRequiredArgumentError",
        }

        for _import in imports:
            end_import_no = _import.end_lineno
            import_lines = []

            if end_import_no and _import.lineno != end_import_no:
                for num in range(_import.lineno - 1, end_import_no):
                    import_lines.append(splited_data[num])
            else:
                import_lines.append(splited_data[_import.lineno - 1])

            import_str = "\n".join(import_lines).strip()

            # Only include imports that are not in the template
            if import_str not in template_imports:
                user_imports += f"{import_str}\n"

    return user_code, user_imports
